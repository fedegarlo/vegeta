{
  "questions" : [ {
    "answers" : [ {
      "option" : "A",
      "text" : "$10.00"
    }, {
      "option" : "B",
      "text" : "$1.00"
    }, {
      "option" : "C",
      "text" : "($1.00)"
    }, {
      "option" : "D",
      "text" : "$0"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment or project. NPV is the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an  investment  or  project  will   yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow is discounted back  to its present value (PV) (i.e.,, what the money is worth in terms of todayÕs value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the   first   year,   a   $200   inflow is expected. At the end of the second year, a $1,000 is expected. NPV = 500 +   200/(1.05)^1   +   1000/(1.05)^2   = ~$597. If NPV is positive, it indicates that the investment will add value to the buyerÕs portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the Net Present Value of the following investment candidate. The initial investment cost is  $10,00. The discount rate is 0%. At the end of year 1, $500 is expected. At the end of year 2, $8,000 is expected. At the end of year 3, $1,500 is expected."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "4th"
    }, {
      "option" : "B",
      "text" : "2nd"
    }, {
      "option" : "C",
      "text" : "1st"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and  apply  the  test,  4)  Refactor    the product code. An example may be that a user has to enter an age value.  A good test is to make sure the user data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would verify that entering a letter instead of a number would cause the program to cause an exception (i.e., v&v the test). The programmer would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product    code    is    successful,     the programmer would refactor  the product code to improve its design. Using these four steps iteratively ensures that programmers think about how a software program might fail first and to build product code that is holistically being tested. This helps produce high quality code. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Xavier has just written test code as part of the four step process of TDD; What step is Xavier performing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who empowers the team to procrastinate and evade key decisions for the sake of performance."
    }, {
      "option" : "B",
      "text" : "Someone who empowers the team to be dependent and reliant upon on the team leader for all decisions."
    }, {
      "option" : "C",
      "text" : "Someone who empowers the team to be undisciplined and chaordic."
    }, {
      "option" : "D",
      "text" : "Someone who empowers the team to be self-organized and self-disciplined."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired Ôself- organizingÕ quality of the agile team. And although the Ôself-organizingÕ agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the  team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all   stakeholders,   including  business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is the best definition of an agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "5Y"
    }, {
      "option" : "B",
      "text" : "Kaizen"
    }, {
      "option" : "C",
      "text" : "Yokoten"
    }, {
      "option" : "D",
      "text" : "Kanban"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Kanban, Japanese for billboard or signboard, is a scheduling system for just-in-time (JIT) production developed by Toyota in the 1940s and 1950s. It is a way of controlling and reducing inventory by using cards or signs    to    order    (demand     signal) requisite parts for a manufacturing process from other dependent systems (supply). Kanban has been adopted by agile to help control workflow. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Identify the lean manufacturing process used for inventory control adopted by agile to help control workflow?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "50 minutes"
    }, {
      "option" : "B",
      "text" : "70 minutes"
    }, {
      "option" : "C",
      "text" : "60 minutes"
    }, {
      "option" : "D",
      "text" : "110 minutes"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The local safety is the difference between the 90% confidence estimate of task time and the 50% confidence estimate of task time. Remember that estimates for task time are typically a range  of  estimates  and  not  a   single value; think of estimates existing as a cumulative distribution function. A 50% confidence estimate is essentially an aggressive estimate where the estimator only has a 50% confidence that the task will be completed within the associated time value. A 90% confidence estimate is essentially a conservative estimate where the estimator has a 90% confidence that the task will be completed within the associated time value. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "To help explain the definition of local safety in his agile practitioner class, Cody uses a chart showing a cumulative distribution function of estimated task times. On the chart, the 90% confidence level has a value of 120 minutes, the 50% confidence level has a value of 70 minutes, and the 10% confidence level has a value of 10 minutes. What  is  the local safety  of this task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Managing communication between the team to reduce team conflict and inefficiencies."
    }, {
      "option" : "B",
      "text" : "Reducing communication between the development team and stakeholders to prevent the inefficiency that communication causes in the software environment."
    }, {
      "option" : "C",
      "text" : "Managing communication between a few key team members so that they may in turn convey information to their subordinates."
    }, {
      "option" : "D",
      "text" : "Managing communication between team members and stakeholders to promote effective collaboration."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Effective  communication  is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance    Reporting:    Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:  Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these   communication   techniques,   a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Rachel is going over the agile knowledge and skill area of communications management. Which of the following is the best definition of communications management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A  trainer  can  administer site content."
    }, {
      "option" : "B",
      "text" : "A trainer can delete old training programs from student plans."
    }, {
      "option" : "C",
      "text" : "A trainer can sign up students for detailed nutrition programs"
    }, {
      "option" : "D",
      "text" : "A trainer can review student weight lifting progress."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The best answer is ÒA trainer can administer site contentÓ because it is an activity that has no clear end  point or exit criteria. The other selections include activities that have a clear end point. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Which  of the  following example user stories is NOT closed?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "CV = EV - AC"
    }, {
      "option" : "B",
      "text" : "CV = AC - EV"
    }, {
      "option" : "C",
      "text" : "CV = PV - EV"
    }, {
      "option" : "D",
      "text" : "CV = EV - PV"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Unlike traditional project management methods that  evaluate risk and variance and trends in formal meetings, agile incorporates risk analysis and variance and trend analysis into iteration review meetings. Risk and variance and trend analysis may be performed in agile using information radiators, like a risk burndown chart, and the use of traditional earned value management (EVM) to measure cost and schedule variance (CV and SV, respectively). [Agile Estimating and Planning. Mike Cohn.]  [Knowledge  and  Skills: Level 3]"
    },
    "question" : "What earned value  management (EVM)  variable captures cost variance?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A caves area where programmers may have peace and quiet for developing user stories and a common room for eating lunch and other social activities."
    }, {
      "option" : "B",
      "text" : "A single room where on one side is an open space with information radiators and a whiteboard for meetings, and on the other side are programming cubicles."
    }, {
      "option" : "C",
      "text" : "A common area that is public to   team   members   and    where osmotic communication and collaboration are at play, and a caves area that is a reserved space for private business."
    }, {
      "option" : "D",
      "text" : "A common area reserved for iteration reviews, daily stand-ups, and retrospectives and a caves area reserved for the development team."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The XP phrase Ôcaves and commonÕ refers to the creation of two zones for team members. The common area is a public space where osmotic communication and collaboration are largely at play. The caves is a private space is reserved for private tasks that require an isolated and quiet environment. For the common area to work well, each team member should be working on one and the same project. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair  Cockburn.]  [Knowledge  and Skills: Level 2]"
    },
    "question" : "What does the XP phrase 'caves and common' mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A finished product design."
    }, {
      "option" : "B",
      "text" : "A design concept showing content, layout, and intended functionality."
    }, {
      "option" : "C",
      "text" : "A competitor's design."
    }, {
      "option" : "D",
      "text" : "A chart of remaining story points to be developed in the iteration."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In the agile design process, prototypes help the customer understand current design state. Three common types of prototypes are HTML, paper (i.e., sketches), and wireframes. A wireframe is a sketch of a user interface, identifying its content, layout, functionality, is usually black and white, and excludes detailed pictures or graphics. A wireframe can be created on paper, whiteboards, or using software. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What  does  a wireframe help portray to a customer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A concept of communication where people sharing the same workspace take in information unconsciously"
    }, {
      "option" : "B",
      "text" : "A concept of communication where only verbal information is exchanged"
    }, {
      "option" : "C",
      "text" : "A concept of communication that excludes body language and other nonverbal information"
    }, {
      "option" : "D",
      "text" : "A concept of communication for software developers to exchange best coding practices"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated   team  members unconsciously. By sharing the same work environment, team members are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework    that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select  the definition  of  osmotic communication"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "As product owner, she can delay valuable feedback until the end of the project."
    }, {
      "option" : "B",
      "text" : "As  product  owner,  she   can review old product code."
    }, {
      "option" : "C",
      "text" : "As product owner, she can start to create the product roadmap."
    }, {
      "option" : "D",
      "text" : "As product owner, she can review a tangible product and update or refine requirements."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A cornerstone of Agile development is Ôincremental delivery.Õ Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two  to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As a product owner, Hanna believes in the value of 'incremental delivery.'' Why might Hanna see value in incremental delivery?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Rumination"
    }, {
      "option" : "B",
      "text" : "Control"
    }, {
      "option" : "C",
      "text" : "Ascendancy"
    }, {
      "option" : "D",
      "text" : "Governance"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Highsmith defines agile project governance as 'making decisions in an uncertain environment.' [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 2]"
    },
    "question" : "With respect to agile project management, what term is used to describe 'making decisions in an uncertain environment?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The vector ordering of product features with respect value."
    }, {
      "option" : "B",
      "text" : "The scalar ordering of product features with respect to value."
    }, {
      "option" : "C",
      "text" : "The fixed ordering of product features with respect to value."
    }, {
      "option" : "D",
      "text" : "The relative ordering of product features with respect to value."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An  agile  team  must  always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/features of its product to ensure that high-quality and high-value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms  of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk,   a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is the best definition of prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1) Individuals and collaboration over processes and tools, 2) Working software over comprehensive documentation, 3) Customer collaboration over contract negotiation, and 4) Responding to change over following a plan."
    }, {
      "option" : "B",
      "text" : "1) Individuals and interactions over processes and tools, 2) Comprehensive documentation over working software, 3)Customer collaboration over contract negotiation, and 4) Responding to change over following a plan."
    }, {
      "option" : "C",
      "text" : "1) Teams and interactions over processes and tools, 2) Working software over comprehensive documentation, 3) Customer collaboration over contract negotiation, and 4) Responding to change over following a plan."
    }, {
      "option" : "D",
      "text" : "1) Individuals and interactions over processes and tools,  2) Working software over comprehensive documentation, 3) Customer collaboration over contract negotiation, and 4) Responding to change over following a plan."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. [Manifesto      for      Agile     Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which  of  the  following  lists the four Agile Manifesto values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A participatory decision model"
    }, {
      "option" : "B",
      "text" : "A ad hominem decision model"
    }, {
      "option" : "C",
      "text" : "A user-first decision model"
    }, {
      "option" : "D",
      "text" : "A done-done decision model"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "To build trust among the team, agile believes heavily in participatory decision models where team members collaborate to make decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as collective ownership, self- organization, and self-discipline. In collective ownership, the team members  are  equally  responsible  for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "During Vanessa's daily stand-up meeting update, the agile team helped her make a quick decision on what  type of memory she should use for object access. When a team makes decisions together, it is known as:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A few hours."
    }, {
      "option" : "B",
      "text" : "From four to eight hours."
    }, {
      "option" : "C",
      "text" : "A few months."
    }, {
      "option" : "D",
      "text" : "From a few days  to  a few weeks."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The Crystal development process is cyclical/iterative. Its  primary components are chartering, delivery cycles, and project wrap-up. Chartering involves creating a project charter, which can last from a few  days to a few weeks. Chartering consists of four activities: 1)   Building the core project team, 2) performing an Exploratory 360¡ assessment, 3) fine tuning the methodology, and 3) building the initial project plan. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "How long does creating a charter typically take in the Crystal development process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Schedule"
    }, {
      "option" : "B",
      "text" : "Scope"
    }, {
      "option" : "C",
      "text" : "Cost"
    }, {
      "option" : "D",
      "text" : "Constraints"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile iron triangle includes cost, scope, and schedule as its parameters. Constraints is a parameter included in the agile triangle, not the agile iron triangle. [Agile Project Management: Creating Innovative Products      Ð      2nd      Edition.    Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select  the parameter that  does NOT belong in the agile iron triangle:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A fixed and interval value of development effort."
    }, {
      "option" : "B",
      "text" : "A fixed and relative value of development effort."
    }, {
      "option" : "C",
      "text" : "A dynamic and nominal value of development effort."
    }, {
      "option" : "D",
      "text" : "A fixed and ordinal value of development effort."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Story points represent the relative work effort it takes to develop a user story. Each point represents a fixed value of development effort. When estimating the agile team must consider complexity, effort, risk, and inter-dependencies. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Trey and his agile team are using story points to estimate development effort of user stories. What is a story point?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A high level overview product requirements. "
    }, {
      "option" : "B",
      "text" : "A high level overview sprint backlog."
    }, {
      "option" : "C",
      "text" : "A high level overview iteration backlog."
    }, {
      "option" : "D",
      "text" : "A highly detailed document describing the product requirements."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development.   James   Shore.]  [Agile analysis and design]"
    },
    "question" : "Thomas is explaining the purpose of a product roadmap to Christy, a new agile developer. Select the response that best defines a product roadmap."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A limit of how many sprints can be performed at one time."
    }, {
      "option" : "B",
      "text" : "A limit of how many user stories can be authored at one time."
    }, {
      "option" : "C",
      "text" : "A limit of how many WIPs can be in process at one time."
    }, {
      "option" : "D",
      "text" : "A limit of how many object classes can be performed during a sprint."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is also referred to as work in process (WIP). WIP is material or parts that have started production but are not yet a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain. One way of reducing inventory is to reduce the WIP at individual machines or servers by only moving    as    fast    as    your  slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that can develop a certain amount of features. In this analogy, the WIP limit is equivalent to the sprint backlog. By maintaining a WIP limit equal to the sprint backlog, no features should be incomplete at the sprint review. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.]    [Planning,    monitoring,   and adapting]"
    },
    "question" : "What is a WIP limit?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A list of the product features  to be developed in a sprint."
    }, {
      "option" : "B",
      "text" : "A list of all product features to be developed in a release."
    }, {
      "option" : "C",
      "text" : "A list of possible product features to be developed in a sprint."
    }, {
      "option" : "D",
      "text" : "A list of product features."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The sprint backlog is a list of product features or work items to be completed in a sprint. It is typically fixed for the sprint unless it is overcome by important customer requirements. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "What is a sprint backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Non-working days, single developer implementation only, and ideal uninterrupted work"
    }, {
      "option" : "B",
      "text" : "Delays, obstacles, non- working days, and the possibility that multiple developers may work on the user story"
    }, {
      "option" : "C",
      "text" : "Weekends, holidays, and ideal working conditions"
    }, {
      "option" : "D",
      "text" : "Delays,  obstacles,  and ideal working days"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Instead of using story points, agile teams may estimate the    relative sizes of user stories using ideal days. Ideal days represents the amount of days uninterrupted by meetings, personal life, non-working days, or  any other delays, obstacles or distractions - that it would take a  single person to build, test, and release the user story, relative to other user stories in the backlog. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What does the agile estimation technique of ideal days ignore, discount, or simplify?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Empowered  teams need extensive management involvement in order to understand customer need"
    }, {
      "option" : "B",
      "text" : "Empowered teams need minimal management involvement and thus can  focus on leading and delivering value instead of being lead"
    }, {
      "option" : "C",
      "text" : "Empowered teams adapt slowly to changing requirements and therefore can reduce scope- creep risk."
    }, {
      "option" : "D",
      "text" : "Empowered teams remain inflexible to changing customer requirements and focus on delivering to specification."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management    involvement    -    are  a cornerstone of the agile methodology. This is the antithesis to the classic viewpoint of the traditional project manager who is seen as someone that controls all decisions and delegates tasks to a team with little feedback. An agile team must include all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer is closely integrated  with the agile team with collocation/on-site support being ideal. An agile team feels empowered when  it  collectively  assumes  responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select the rationale for why an empowered team considered an important team attribute in agile?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A measure of the number of user story points or stories completed per iteration"
    }, {
      "option" : "B",
      "text" : "A measure of the number of user  story  points  completed  per day"
    }, {
      "option" : "C",
      "text" : "A measure of the number of iteration plans completed per iteration"
    }, {
      "option" : "D",
      "text" : "A measure of the number of user story points completed per release"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Velocity is a measure of the number of user story points or stories completed by a team per iteration. An agile team can use its previous  velocity recordings as a method of estimating how many user story points it may complete in the next iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "An agile team often uses velocity when estimating. What is velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A  measure  of  the number of user story points planned per release."
    }, {
      "option" : "B",
      "text" : "A measure of the number of user story points planned for an iteration."
    }, {
      "option" : "C",
      "text" : "A measure of the number of user story points or stories completed per iteration."
    }, {
      "option" : "D",
      "text" : "A measure of the number of user story points completed per day."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Velocity is a measure of the number of user story points or stories completed by a team per iteration. An agile team can use its previous  velocity recordings as a method of estimating how many user story points it may complete in the next iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Define  velocity  as  used  in  agile estimation."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed-price with incentive"
    }, {
      "option" : "B",
      "text" : "Fixed-requirement"
    }, {
      "option" : "C",
      "text" : "Fixed-scope"
    }, {
      "option" : "D",
      "text" : "Fixed-price"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing  scope,  means  that  it  lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract        vehicle        types        are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select from the following types of contracts, the one most suited for the agile framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Delaying any criticism that may hamper idea generation."
    }, {
      "option" : "B",
      "text" : "Hosting the meeting in a neutral and comfortable environment."
    }, {
      "option" : "C",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session."
    }, {
      "option" : "D",
      "text" : "Never follow up with the results, conclusions, or action items of the brainstorming session."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A successful brainstorming event   should   strive   to   consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multi- disciplinary/diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A non-skilled team"
    }, {
      "option" : "B",
      "text" : "A monolithic team"
    }, {
      "option" : "C",
      "text" : "A cross-functional team"
    }, {
      "option" : "D",
      "text" : "A mono-functional team"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient    and    effective    method  of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "the entire development team."
    }, {
      "option" : "B",
      "text" : "a pair of programmers."
    }, {
      "option" : "C",
      "text" : "the entire iteration team."
    }, {
      "option" : "D",
      "text" : "a single developer."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Instead of using story points, agile teams may estimate the relative sizes of user stories using ideal    days. Ideal days represents the amount of days uninterrupted by meetings, personal life, non-working days, or  any other delays, obstacles or distractions - that it would take a  single person to build, test, and release the user story, relative to other user stories in the backlog. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Select the correct ending to the sentence. When estimating relative work effort in the agile methodology, ideal days are estimated for"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A picture"
    }, {
      "option" : "B",
      "text" : "All are important details"
    }, {
      "option" : "C",
      "text" : "An Age"
    }, {
      "option" : "D",
      "text" : "An Address"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A persona is a notional user of the system under development. Being much more detailed than actors in use case modeling where generic user names  are  assigned  (e.g.,  end  user), personas try to elaborate on users with detailed descriptions to  provide context to the developers. Some personas have such notional details as name, address, age, income, likes and dislikes, and other specific details. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "When drafting a persona for agile modeling, which detail is the most important to include?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A project roadmap"
    }, {
      "option" : "B",
      "text" : "A process roadmap"
    }, {
      "option" : "C",
      "text" : "A product roadmap"
    }, {
      "option" : "D",
      "text" : "A planning roadmap"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and  assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development. James Shore.] [Agile analysis and design]"
    },
    "question" : "Patty is reviewing an agile artifact that serves as a high level overview of the product requirements and when certain features are expected to be completed. What artifact is Patty most likely looking reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A task board"
    }, {
      "option" : "B",
      "text" : "A 10-day weather look ahead for  all team  members'  local weather"
    }, {
      "option" : "C",
      "text" : "An archive of team e-mails"
    }, {
      "option" : "D",
      "text" : "A project plan document"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Typical information   radiators on an agile project include: project burndown charts, task boards, burnup charts, and defect charts. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select the response that is a typical information radiator for an agile project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "An online  guide for how to review project information."
    }, {
      "option" : "B",
      "text" : "A visual representation or chart that shows project status regarding a tracked project- related metric."
    }, {
      "option" : "C",
      "text" : "A raw file of project data."
    }, {
      "option" : "D",
      "text" : "A visual depiction of a Pascal coding technique."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An information radiator is a visual representation of project status data. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Of the following, which response defines an information radiator?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The natural flow of questions, ideas, and information sharing"
    }, {
      "option" : "B",
      "text" : "The natural flow of top-down decision making"
    }, {
      "option" : "C",
      "text" : "Inter-team rivalry and competition for improved productivity"
    }, {
      "option" : "D",
      "text" : "A reduction in the use of body language and other visual cues"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Osmotic communication helps ensure  the  natural  flow  of questions, ideas, and information sharing among the agile project team. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What does collocation and osmotic communication enhance among team members?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A refactoring"
    }, {
      "option" : "B",
      "text" : "A retrospective"
    }, {
      "option" : "C",
      "text" : "A re-imaging"
    }, {
      "option" : "D",
      "text" : "A resolution"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "During reflection or retrospectives, an agile team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/team-assessment events, topics can include: lessons learned from successes and failures; team standards that worked, failed, or were not properly followed; and other  areas of improvement.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the activity called when a team constructively criticizes its performance for the purpose of improving performance going forward?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A relative decision model"
    }, {
      "option" : "B",
      "text" : "An exclusionary decision model"
    }, {
      "option" : "C",
      "text" : "An ordinal decision model"
    }, {
      "option" : "D",
      "text" : "A participatory decision model"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "To build trust among the team, agile believes heavily in participatory decision models where team members collaborate to make decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as      collective      ownership,      self- organization, and self-discipline. In collective ownership, the team members are equally responsible for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Planning poker, where team members make collective decisions, is an example of:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It is estimable"
    }, {
      "option" : "B",
      "text" : "It is independent"
    }, {
      "option" : "C",
      "text" : "It is Negotiable"
    }, {
      "option" : "D",
      "text" : "It is small"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The acronym INVEST (independent, negotiable, valuable, estimable, small, and testable) helps the agile practitioner remember the characteristics of a good user story. I Ð Independent stories can be developed in any order and avoid dependencies which can make development more complex. N Ð Negotiable user stories mean that both the customer and developer should feel free to analyze and adapt a user story to meet customer needs. V Ð A valuable user story describes how the product  feature will provide value to the customer. E Ð Estimable user stories are ones that developers can readily estimate the effort or duration required for developing them. S-Small user stories are ones that take about two to five days of work to implement. T - Testable user stories are ones that   can be verified according to acceptance criteria to ensure value. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken   Schwaber.]  [Planning, monitoring, and adapting]"
    },
    "question" : "If a user story is said to be able to be scheduled and developed in any order, it satisfies which characteristic?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using video conferencing whenever possible"
    }, {
      "option" : "B",
      "text" : "Making all workers work the same hours, even if it means the graveyard shift for some team members"
    }, {
      "option" : "C",
      "text" : "Making workers fly in on Monday and fly out on Friday"
    }, {
      "option" : "D",
      "text" : "Using e-mail exclusively"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective     communication     in     the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What  is  one  method  that  can be used to improve communication for a team that cannot be collocated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extra processing"
    }, {
      "option" : "B",
      "text" : "Earned Interest"
    }, {
      "option" : "C",
      "text" : "Entity Flow Reversal"
    }, {
      "option" : "D",
      "text" : "Emission"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing analysis technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities   for   process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste within the process. Processes that add value (processing of a part or feature) are generally referred to as 'value-added'  and  processes  that  do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to identify areas of waste that exist in the process. The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the E in WIDETOM stand for with respect to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A team that is risk-averse and focused solely on minimizing  risk."
    }, {
      "option" : "B",
      "text" : "A team that solves problems through the use of customer feedback mechanisms."
    }, {
      "option" : "C",
      "text" : " A team that is capable of 'powering' up to different iteration  velocities  to  reach customer expectations."
    }, {
      "option" : "D",
      "text" : "A team that is self-organizing and takes ownership of the product it is developing."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for  the  delivery  of  the  product  (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Roger as an experienced agile  team leader is keen on  having an empowered team. What  does an empowered team mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because Barry is the developer, the team should use Barry's estimate."
    }, {
      "option" : "B",
      "text" : "An average of the two values should be used as the estimated work effort to complete the user story."
    }, {
      "option" : "C",
      "text" : "Both Barry and Jill should be allowed to defend their decisions and the team should repeat the voting process until consensus is reached by the entire team."
    }, {
      "option" : "D",
      "text" : "Randomly pick one of the cards as the user story work effort estimate."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci  sequence  is  often  used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are  given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Barry and Jill have just overturned the lowest and highest values, respectively, during a planning poker meeting when estimating a user story that Barry is to develop. What  typically happens next in planning poker?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because understanding that software projects are themselves similar to CASs reminds practitioners about the importance of adapting to a changing environment."
    }, {
      "option" : "B",
      "text" : "Because understanding that software projects are themselves similar to CASs reminds practitioners about the importance of avoiding scope creep."
    }, {
      "option" : "C",
      "text" : "Because understanding that software projects are themselves similar to CASs reminds practitioners about the importance of fixing a changing environment."
    }, {
      "option" : "D",
      "text" : "Because understanding that software projects are themselves similar to CASs reminds practitioners about the importance of avoiding too many interacting, adaptive agents that can disrupt progress."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A complex adaptive system, or CAS, is a system composed of interacting, adaptive agents or components. The term is used in agile to remind practitioners that the development of a product is adaptive  in that previous interactions, events, decisions   influence   future  behavior. The term chaordic (a made up word blending chaotic and order) is sometimes used when describing CASs. Literature points to three key characteristics of chaordic projects: alignment and cooperation, emergence and self-organization, and learning and adaptation.  [Agile   Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Why is knowing about CASs important for an agile practitioner?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Refactoring the team"
    }, {
      "option" : "B",
      "text" : "Guiding the team"
    }, {
      "option" : "C",
      "text" : "Reforming the team"
    }, {
      "option" : "D",
      "text" : "Motivating the team"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Having a motivated team is essential for any project, regardless of whether  it  is  agile  or  not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust    and    shows    that     leadership believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "John, as project leader, mentors and coaches his team. He always makes sure to highlight important team achievements. What is John doing when he provides mentoring and coaching?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who delegates all tasks to the development team without any collaboration"
    }, {
      "option" : "B",
      "text" : "Someone who empowers the development team to take ownership of the product and make important decisions in a collaborative environment."
    }, {
      "option" : "C",
      "text" : "Someone who retains control of key decisions and delegates all functions and tasks to team members."
    }, {
      "option" : "D",
      "text" : "Someone who empowers the development team to make inconsequential decisions to give it the feeling of self-organization."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And   although   the   'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore   new   ideas   and   technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of    Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of an agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Confirms the product meets specifications and requirements."
    }, {
      "option" : "B",
      "text" : "Confirms the product meets user needs."
    }, {
      "option" : "C",
      "text" : "Helps ensure quality."
    }, {
      "option" : "D",
      "text" : "Performed frequently."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need).  Sometimes  a  product  may  be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "Pick the response which is NOT a characteristic of the agile validation process."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Problem-saturation strategies, tools, and techniques"
    }, {
      "option" : "B",
      "text" : "Problem-reversing  strategies, tools, and techniques"
    }, {
      "option" : "C",
      "text" : "Problem-mitigation strategies, tools, and techniques"
    }, {
      "option" : "D",
      "text" : "Problem-solving  strategies, tools, and techniques"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem- solving       strategies,       tools,      and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jessica is using the lean technique of 5Y for root cause analysis. What agile knowledge and skill area  does 5Y fall under?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Static systems development method (SSDM)"
    }, {
      "option" : "B",
      "text" : "Dynamic product development method (DPDM)"
    }, {
      "option" : "C",
      "text" : "Dynamic systems development method (DSDM)"
    }, {
      "option" : "D",
      "text" : "Extreme systems development method (XSDM)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Common frameworks or methodologies used within agile include: scrum, extreme programming (XP), lean software development, crystal,   feature   driven  development (FDD), dynamic systems development method (DSDM), agile unified process (AUP). [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "From the following,  select  a common agile framework/methodology."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through  the use of  lengthy memorandums."
    }, {
      "option" : "B",
      "text" : "Through collaborative release planning"
    }, {
      "option" : "C",
      "text" : "Through  the use of  formal boardroom meetings."
    }, {
      "option" : "D",
      "text" : "Through the use of e-mail."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications     management    and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders: Managing communications to satisfy the requirements and resolve issues with project   stakeholders.   From   an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following helps an agile team promote simple and effective communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Frequency"
    }, {
      "option" : "B",
      "text" : "Acceleration"
    }, {
      "option" : "C",
      "text" : "Speed"
    }, {
      "option" : "D",
      "text" : "Velocity"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Velocity is a measure of the number of user story points completed per iteration. An agile team can use its previous velocity recordings as a method of estimating how many user story points it may complete in the  next iteration. David's team's velocity is 20. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What term often used in agile estimation refers to the amount of user stories or story points completed in an iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Defect driven  development (3D)"
    }, {
      "option" : "B",
      "text" : "Test driven  development (TDD)"
    }, {
      "option" : "C",
      "text" : "Acceptance test  driven development (ATDD)"
    }, {
      "option" : "D",
      "text" : "Feature  driven  development (FDD)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Feature driven development (FDD) uses a prescriptive model  where the software development process is planned, managed, and tracked from the perspective of individual software features. FDD uses short iterations of two weeks or less to develop a set amount of features. The five step FDD process is: 1. Develop overall model; 2. Create the features list; 3. Plan by feature; 4. Design by feature; 5 Build by feature. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Hanson and his team are using a framework in their agile effort where the team follows a prescriptive five step process that is managed and tracked from the perspective of the product features. Which framework is Hanson's  team  incorporating  into  its agile effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Monitoring & Controlling"
    }, {
      "option" : "B",
      "text" : "Adapting"
    }, {
      "option" : "C",
      "text" : "Speculating"
    }, {
      "option" : "D",
      "text" : "Closing"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The agile project management phases, in sequence, are: Envisioning, speculating, exploring, adapting, closing. [Manifesto for Agile Software Development.        Agile       Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a phase of Highsmith's agile project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Accrued budget debt from failing to adhere to waterfall scheduling."
    }, {
      "option" : "B",
      "text" : "Accrued schedule debt from using a sustainable, 40 hour work week."
    }, {
      "option" : "C",
      "text" : "Accrued technical debt from putting off quality standards."
    }, {
      "option" : "D",
      "text" : "Accrued  social  debt  from putting off team building events."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The top 12 causes of agile failure (failure modes) according to Aaron Sanders: 1. A checkbook commitment doesn't automatically cause organizational change or  support. 2. Culture doesn't support change. 3. Culture does not have retrospectives or performs them poorly. 4. Standards and quality are lost in a race to project closing. 5.  Lack of collaboration in planning. 6. None or too many Product Owners. 7. Poor project leadership or scrum master  that  doesn't  place  trust  in the team and allow it to be self-organizing and self-disciplined. 8. No  on-site agile promoter or coach. 9. Lack of a well built, high-performance team. 10. Accrued technical debt if strict testing standards are not upheld. 11. Culture maintains traditional performance appraisals where individuals are honored  and  the  team  aspect  is lost. 12. A reversion to the traditional or 'old-way' of doing business occurs because change is hard. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Not  all  agile  efforts  succeed the first time, what is a common cause of failure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Achieving personal goals."
    }, {
      "option" : "B",
      "text" : "Achieving  objectives independently."
    }, {
      "option" : "C",
      "text" : "Achieving objectives through cooperative team work."
    }, {
      "option" : "D",
      "text" : "Achieving growth targets."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Collaboration is a key soft skill negotiation skill. It involves working  in groups to create ideas, solve problems, and produce solutions. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of  the following best defines collaboration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The relative ordering of user stories with respect to value and risk."
    }, {
      "option" : "B",
      "text" : "The scalar ordering of user stories with respect to value and risk."
    }, {
      "option" : "C",
      "text" : "The fixed ordering of user stories with respect to value and risk"
    }, {
      "option" : "D",
      "text" : "The vector ordering of user stories with respect value and  risk."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An    agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived     value     and     should   be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value,  low-risk;  high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is the best definition of prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Chaordicness"
    }, {
      "option" : "B",
      "text" : "Controlled recklessness"
    }, {
      "option" : "C",
      "text" : "Interpersonal sensitivity"
    }, {
      "option" : "D",
      "text" : "Sympathy"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Higgs & Dulewicz (1999) defines emotional intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4)      Interpersonal      sensitivity,     5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. What is one of the seven components of emotional intelligence as defined by Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "-70%"
    }, {
      "option" : "B",
      "text" : "-90%"
    }, {
      "option" : "C",
      "text" : "90%"
    }, {
      "option" : "D",
      "text" : "-80%"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for    the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $1,000; Cost: $10,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1st"
    }, {
      "option" : "B",
      "text" : "4th"
    }, {
      "option" : "C",
      "text" : "2nd"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and apply the test, 4) Refactor the product code. An example may be that a user has to enter an age value.  A good test is to make sure the user data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would verify that entering a letter instead of a number would cause     the program to cause an exception (i.e., v&v the test). The programmer would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product code is successful, the programmer would refactor  the product code to improve its design. Using these four steps iteratively ensures that programmers think about how a software program might fail first and to build product code that is holistically being tested. This helps produce high quality code. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Xavier has just refactored his production code after testing it as part of the four step process of TDD; What step is Xavier performing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "2nd"
    }, {
      "option" : "B",
      "text" : "3rd"
    }, {
      "option" : "C",
      "text" : "4th"
    }, {
      "option" : "D",
      "text" : "1st"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer    or    business    stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have    been    developed,    the     team demonstrates them to the customer or business stakeholders for feedback. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "Jane and her team are discussing with the business stakeholder what the expected behavior is of a particular user story. What step is Jane on in the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1st"
    }, {
      "option" : "B",
      "text" : "2nd"
    }, {
      "option" : "C",
      "text" : "4th"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of  ATDD  with  its  four  steps  can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are.   3)   After   distillation,   the  team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "Jane and her team are distilling information from a discussion with the business stakeholder into specific tests for a user story. What step is Jane on  in the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Refined over time"
    }, {
      "option" : "B",
      "text" : "Defined in the agile manifesto"
    }, {
      "option" : "C",
      "text" : "CMMI-defined"
    }, {
      "option" : "D",
      "text" : "Fixed from the get go"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the  beginning of an effort and refines collaboratively  throughout  the  effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote   a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards while also being open to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily  stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adaptive agility and anticipatory agility"
    }, {
      "option" : "B",
      "text" : "Being agile and doing agile"
    }, {
      "option" : "C",
      "text" : "Being  agile and practicing agile"
    }, {
      "option" : "D",
      "text" : "Adaptive agility and prescriptive agility"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile and doing agile. Being agile includes focusing on cornerstones of agile     project     management,      like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "Sarah, as an agile leader, knows that she should practice with an adaptive leadership style. What are the two dimensions Highsmith uses to define adaptive leadership?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adaptive compromise"
    }, {
      "option" : "B",
      "text" : "Adaptive leadership"
    }, {
      "option" : "C",
      "text" : "Adaptive reflection"
    }, {
      "option" : "D",
      "text" : "Adaptive following"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Select  from  the following a key soft skill negotiation quality."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Revenue retained through the development of  new product features or services that prevent existing customers from stopping use of the existing product."
    }, {
      "option" : "B",
      "text" : "Additional revenue realized through the sales of new product features or services to existing customers."
    }, {
      "option" : "C",
      "text" : "New revenue realized through the sales of products or services  to new customers."
    }, {
      "option" : "D",
      "text" : "New revenue found in a hidden value stream."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Retained revenue is revenue retained through the development of new product features or services that prevent existing customers from stopping use of the existing product. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "In agile estimating and planning, what is 'retained' revenue?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Affinity planning"
    }, {
      "option" : "C",
      "text" : "Milestone reviews"
    }, {
      "option" : "D",
      "text" : "Verification and validation"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Because each iteration typically produces a working product that    is    built    and    integrated   and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need). Sometimes a product may be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated.   [Agile   Software Development:  The  Cooperative Game Ð 2nd   Edition.   Alistair  Cockburn.] [Product quality]"
    },
    "question" : "What process, performed frequently, helps ensure high product quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Release plan meeting"
    }, {
      "option" : "B",
      "text" : "Daily stand-up meeting"
    }, {
      "option" : "C",
      "text" : "Affinity planning meeting"
    }, {
      "option" : "D",
      "text" : "Sprint planning meeting"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In the agile framework scrum, sprint planning and sprint review meetings are often timeboxed at four hours. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Which scrum meeting is  often timeboxed to four hours?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Empowered teams adapt slowly to changing requirements and therefore can reduce scope- creep risk."
    }, {
      "option" : "B",
      "text" : "Empowered teams remain inflexible to changing customer requirements and focus on delivering to specification."
    }, {
      "option" : "C",
      "text" : "Empowered teams adapt to changing requirements and thus can focus on delivering value in a volatile marketplace"
    }, {
      "option" : "D",
      "text" : "Empowered teams remove themselves from  being responsible of product quality in order to reduce association with project failure."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. This  is  the  antithesis  to  the    classic viewpoint of the traditional project manager who is seen as someone that controls all decisions and delegates tasks to a team with little feedback. An agile team must include all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer is closely integrated  with the agile team with collocation/on-site support being ideal. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking   ownership).   [Coaching  Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select the rationale for why an empowered team considered an important team attribute in agile?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because agile welcomes the changing scope that customers may request to stay relevant  in the marketplace."
    }, {
      "option" : "B",
      "text" : "Because customers have little experience with the agile quality to cost and value triangle."
    }, {
      "option" : "C",
      "text" : "Because  the cost  of  product development is not fixed."
    }, {
      "option" : "D",
      "text" : "Because  agile works outside the purview of a fixed schedule."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and,   incentive   contracts   (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Kathy, the head of a multi-national corporation, is considering hiring an agile team to develop a new database system.    However,    the  agile  team Kathy is working with tells her that estimating final cost can be difficult. Why is it more difficult to estimate cost on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "After the first iteration"
    }, {
      "option" : "B",
      "text" : "At the beginning of an effort"
    }, {
      "option" : "C",
      "text" : "After refactoring"
    }, {
      "option" : "D",
      "text" : "After  the first accepted  user story"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the  beginning of an effort and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt    as    the    project    evolves,  to promote  a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards while also being open to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific     software     coding     styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Rebecca and her agile team are discussing the project and quality standards it will hold itself accountable against for a new effort. When it typically the best time to have this discussion?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Focusing only on business objectives."
    }, {
      "option" : "B",
      "text" : "Fostering a competitive environment."
    }, {
      "option" : "C",
      "text" : "Spending quality time together."
    }, {
      "option" : "D",
      "text" : "Highlighting a developer's deficiencies public for the sake of team feedback."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In agile and other project management styles, team motivation is a critical factor for success. What is one method to improve team motivation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "XAML"
    }, {
      "option" : "B",
      "text" : "Paper"
    }, {
      "option" : "C",
      "text" : "HTML"
    }, {
      "option" : "D",
      "text" : "Wireframe"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In the agile design process, prototypes help the customer understand current design state. Three common types of prototypes are HTML, paper (i.e., sketches), and wireframes. A wireframe is a sketch of a user interface, identifying its content, layout, functionality, is usually black and white, and excludes detailed pictures or graphics. A wireframe can be created on paper, whiteboards, or using software. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Prototyping is a common project management technique to reduce risk. Select the response which is NOT a common form of prototyping in agile projects."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Isolating  team  members for focus"
    }, {
      "option" : "B",
      "text" : "Criticizing  team  members openly"
    }, {
      "option" : "C",
      "text" : "Promoting competition"
    }, {
      "option" : "D",
      "text" : "Building trust"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Building  a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is self-organized and self-disciplined, and is collocated. Several management techniques can be used to build or foster a high-performance team environment, some techniques include: removing obstacles that slow down a team's performance, having high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice or technique she can use to build a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Agile codified process (ACP)"
    }, {
      "option" : "B",
      "text" : "Agile framework  process (AFP)"
    }, {
      "option" : "C",
      "text" : "Agile lean process (ALP)"
    }, {
      "option" : "D",
      "text" : "Agile unified process (AUP)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Common frameworks or methodologies used within agile include: scrum, extreme programming (XP), lean software development, crystal, feature driven development (FDD), dynamic systems development method (DSDM), agile unified process (AUP). [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair  Cockburn.]  [Knowledge  and Skills: Level 2]"
    },
    "question" : "Select a  common agile framework/methodology."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme Programming"
    }, {
      "option" : "B",
      "text" : "Agile Unified Process"
    }, {
      "option" : "C",
      "text" : "Crystal"
    }, {
      "option" : "D",
      "text" : "Feature Driven Development"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Reflective improvement workshops are a cornerstone of the Crystal methodology. While all agile methodologies incorporate reflection into their standard practices, Crystal terms the practice 'reflective improvement workshops.' [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Jill and her team are scheduled to hold a reflective improvement workshop the next business day. Which agile project management methodology uses reflective improvement workshops as a key tool to apply its principles?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme programming (XP)"
    }, {
      "option" : "B",
      "text" : "Scrum"
    }, {
      "option" : "C",
      "text" : "Lean software development"
    }, {
      "option" : "D",
      "text" : "Agile unified process (AUP)"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The core roles in scrum are the product owner, scrum master and development team. [Ken Schwaber. Agile Project Management with Scrum. Chapter 1.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In which framework are core roles categorized as the following three: product owner, scrum master, development team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Power team"
    }, {
      "option" : "B",
      "text" : "Empowered team"
    }, {
      "option" : "C",
      "text" : "Magnitude team"
    }, {
      "option" : "D",
      "text" : "Impact team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams.   Lyssa   Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What type of team takes ownership of a product and requires minimal management supervision?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning game estimating"
    }, {
      "option" : "B",
      "text" : "Agility estimating"
    }, {
      "option" : "C",
      "text" : "Planning poker"
    }, {
      "option" : "D",
      "text" : "Affinity estimating"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product backlogs. Although several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has    several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "Peter is at a planning event where the relative development effort of user stories of a large product backlog is to be estimated. The team is to assign user stories to various soft drink sizes (small, medium, large, extra-large). What type of planning event is Peter most likely attending?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Agreement  found through customer choice."
    }, {
      "option" : "B",
      "text" : "Agreement  found through discussion."
    }, {
      "option" : "C",
      "text" : "Agreement  found through inspection."
    }, {
      "option" : "D",
      "text" : "Agreement  found through reflection."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Negotiation is a key soft skill negotiation skill. It involves discussion or conversation to work towards a common understanding between two parties. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of  the following best defines negotiation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Aggregate"
    }, {
      "option" : "B",
      "text" : "Altruistic"
    }, {
      "option" : "C",
      "text" : "Achievable"
    }, {
      "option" : "D",
      "text" : "Accurate"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The acronym SMART (specific, measurable, achievable, relevant,   and   time-boxed)   helps the agile practitioner remember the characteristics of a well-defined task.  S Ð Specific tasks are ones that clearly contribute to the development of a user story. It should not be vague. M Ð Measurable tasks are ones that the team and customer can verify. A - Achievable tasks are ones that developers may realistically  implement and understand. R Relevant tasks are ones that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams   Great.   Esther   Derby,  Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "Jules is describing the SMART acronym used for task analysis in an agile seminar. What does the A stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Increasing inventory"
    }, {
      "option" : "B",
      "text" : "Amplifying defect detection"
    }, {
      "option" : "C",
      "text" : "Quality stream mapping"
    }, {
      "option" : "D",
      "text" : "Eliminating waste"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The principles of lean software development are: Eliminate waste; Amplify learning; Decide as late as possible; Deliver as fast as possible; Empower the team; Build integrity in; See the whole. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Help Julian select a key principle of lean software development."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Scrum"
    }, {
      "option" : "B",
      "text" : "FDD"
    }, {
      "option" : "C",
      "text" : "Crystal"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A core principle of the Crystal methodology is osmotic communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Which agile methodology has as one of its core principles the concept of osmotic communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Abruptly cancel the meeting."
    }, {
      "option" : "B",
      "text" : "Let  the team, as  self- organizing, resolve the issue."
    }, {
      "option" : "C",
      "text" : "Ignore the disruptive discussion knowing that it will be handled during the next performance review."
    }, {
      "option" : "D",
      "text" : "Call attention to the disruption and order that everyone pay attention to the speaker."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A high-performance, self-organizing team should realize and correct the disruptive behavior. [Coaching Agile Teams. Lyssa Adkins.] [Communications]"
    },
    "question" : "What should a scrum master do if he or she notices disruptive behavior during a scrum?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Bi-weekly"
    }, {
      "option" : "B",
      "text" : "Dail"
    }, {
      "option" : "C",
      "text" : "Every other day"
    }, {
      "option" : "D",
      "text" : "After an iteration"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A stand-up meeting is typically held daily and is often referred to as the daily stand-up meeting. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "How  often are stand-up  meetings typically held on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Arrange  seating  to  group by team function"
    }, {
      "option" : "B",
      "text" : "Minimize team member interaction"
    }, {
      "option" : "C",
      "text" : "Have a dedicated whiteboard"
    }, {
      "option" : "D",
      "text" : "Have large swaths of blank wall space devoid of project information"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated    team    members    is     an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction  of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Sheila as team leader, wants to design a comfortable, collaborative team space for her agile project. What can she do as a basic guideline?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Improves team communication"
    }, {
      "option" : "B",
      "text" : "Makes  communication less time consuming"
    }, {
      "option" : "C",
      "text" : "Makes  it  easy  for all team members to track progress"
    }, {
      "option" : "D",
      "text" : "Removes the need for project planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "All successful projects, regardless of management philosophy, require project planning. The use of information radiators on an agile project offer several advantages. They reduce lengthy communication, allow for all team members and stakeholders to review project status throughout a project, and reduce the need of other more time-consuming communication methods, like emails or  memorandums. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select the response that is NOT an advantage of using an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "With regular communication between the customer and team."
    }, {
      "option" : "B",
      "text" : "With incentives and kickbacks for approving completed features."
    }, {
      "option" : "C",
      "text" : "With a defect information radiator showing customer meeting absences."
    }, {
      "option" : "D",
      "text" : "With bi-weekly communication between the customer and team."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "An agile approach heavily emphasizes the need for direct customer involvement to ensure product quality and value. One way to promote customer engagement is to have regular communication between the customer and team. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "How  does  an  agile  team promote customer engagement?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A histogram showing the highest velocity of all agile teams worldwide."
    }, {
      "option" : "B",
      "text" : "The weather, local time, and stock exchange quotes."
    }, {
      "option" : "C",
      "text" : "User story development status, system defects, iteration feature development status."
    }, {
      "option" : "D",
      "text" : "The text of user stories with highlighting showing a need for clarification from stakeholders."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "An information radiator displays project status-related information, such as user story development status, burndown charts, and task boards. [Agile   Software   Development:   The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What type of information do information radiators typically portray?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A culture with a highly focused distribution of power that requires many levels of clearance for communication"
    }, {
      "option" : "B",
      "text" : "A culture that values open, face-to-face communication"
    }, {
      "option" : "C",
      "text" : "A culture with strict communication channels  and clear hierarchical divisions"
    }, {
      "option" : "D",
      "text" : "A culture that retains physical separation between the agile team and customer or customer representative"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An open, face-to-face communication culture is the best suited culture for an agile team. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Not all company cultures are right for the agile methodology. With respect to communication, what type of culture is a good fit for the agile methodology?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Walter must communicate the results of scrum tests with the development team."
    }, {
      "option" : "B",
      "text" : "Walter must facilitate communication between the developers and customer."
    }, {
      "option" : "C",
      "text" : "Walter must communicate the fail tests he wrote before an iteration to the customer."
    }, {
      "option" : "D",
      "text" : "Walter must facilitate communication on the functional requirements  specification document."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "As a team leader or agile project manager, you must facilitate communication between the development team and customer to ensure that requirements are understood and implemented correctly. One of the four Agile  Manifesto values underscores customer collaboration. The team leader must facilitate this collaboration to deliver value. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "As team leader, Walter must interact with the customer frequently. What is one significant requirement of  the team leader with respect to communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Every week"
    }, {
      "option" : "B",
      "text" : "At the end of each iteration"
    }, {
      "option" : "C",
      "text" : "Constantly"
    }, {
      "option" : "D",
      "text" : "Never"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Constantly is the best answer. Information radiators should be updated whenever the posted data has changed to keep all team members and stakeholders up to date. [Agile Software Development: The Cooperative Game  Ð  2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "How often are information radiators updated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Customer-programmer empathy and programmer-tester empathy"
    }, {
      "option" : "B",
      "text" : "Customer-stakeholder empathy and customer-product owner empathy"
    }, {
      "option" : "C",
      "text" : "Stakeholder-customer empathy and customer-programmer empathy"
    }, {
      "option" : "D",
      "text" : "Customer-product owner empathy  and  programmer-tester empathy"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Customer-programmer empathy and programmer-tester empathy help generate team trust on  an agile project. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "Empathy is a valuable human emotion for generating trust in a team. What types of empathy on an agile project can help build trust?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Emphasize the use of top-down decision making."
    }, {
      "option" : "B",
      "text" : "Emphasize the use of comprehensive documentation."
    }, {
      "option" : "C",
      "text" : "Emphasize  the isolation of team members."
    }, {
      "option" : "D",
      "text" : "Emphasize the use of face-to-face communication."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Face-to-face communication enhances team collaboration. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What is an effective method for improving team collaboration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Work breakdown structures"
    }, {
      "option" : "B",
      "text" : "Stakeholder inconsistencies"
    }, {
      "option" : "C",
      "text" : "Software development methods"
    }, {
      "option" : "D",
      "text" : "Current progress and any issues or impediments that are impacting progress"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In a daily stand-up meeting team members discuss current  progress and any issues or impediments that are impacting progress. Each team member shares what he or she has achieved since the last meeting, what he or she will achieve before the next meeting, and what obstacles may prevent him or her from achieving progress. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "What do team members discuss in the daily stand-up meeting?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "2 to 4 hours"
    }, {
      "option" : "B",
      "text" : "1.5 to 2.0 hours"
    }, {
      "option" : "C",
      "text" : "30 to 60 minutes"
    }, {
      "option" : "D",
      "text" : "15 minutes"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In the scrum methodology, daily standup meetings, or scrums, should last no longer than 15  minutes. Some scrum instances use stop  watches to track time and use a 'talking stick' to help indicate whose sole turn it is to share pertinent information. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "In the scrum methodology, how long do daily stand-up meetings, or scrums, typically last?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Daily scrum"
    }, {
      "option" : "B",
      "text" : "Pit"
    }, {
      "option" : "C",
      "text" : "Sprint"
    }, {
      "option" : "D",
      "text" : "Dailies"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In the scrum-based agile project management methodology, daily stand-up meetings are referred to as 'scrums' or 'Daily scrum.' [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "In the scrum-based agile project management methodology, what are standup meetings called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A retrospective"
    }, {
      "option" : "B",
      "text" : "A resolution"
    }, {
      "option" : "C",
      "text" : "An INVEST analysis"
    }, {
      "option" : "D",
      "text" : "An appropriating"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "During reflection or retrospectives, an agile team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/team-assessment events, topics can include: lessons learned from   successes   and   failures;   team standards that worked, failed, or were not properly followed; and other areas of improvement.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the activity called when a person performs a self-assessment to understand  how  he  or  she  may improve performance?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A team that is management- driven and focused solely on pleasing the management."
    }, {
      "option" : "B",
      "text" : "A team that relies on external leadership to show it the path forward."
    }, {
      "option" : "C",
      "text" : "A team that is self-organizing and knows how to solve problems with minimal need for oversight"
    }, {
      "option" : "D",
      "text" : "A  team  that  solves problems through the use of  market research."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for  the  delivery  of  the  product  (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jill is explaining the importance of an agile team being empowered. What does an empowered team mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A rough estimate of product requirements"
    }, {
      "option" : "B",
      "text" : "An exact estimate of product requirements"
    }, {
      "option" : "C",
      "text" : "A rough estimate of product standards"
    }, {
      "option" : "D",
      "text" : "An exact estimate of product standards"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The product backlog initially serves as a rough estimate of the product's requirements [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What does  the product backlog serve as initially in an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : " An objective range that indicates if  a process is considered stable."
    }, {
      "option" : "B",
      "text" : "An objective range that indicates if a process is improving in residual activity."
    }, {
      "option" : "C",
      "text" : "A threshold value that indicates if a process is improving in reaction time."
    }, {
      "option" : "D",
      "text" : "A threshold value that indicates if a process is declining in responsiveness."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Control limits - those which set an objective range to indicate whether a process is controlled or stabilized or defect free (e.g., within three sigmas of the mean) - may be used in an agile project. Generally, a control limit of three-sigma (s) is used on a Shewhart control chart. A sigma refers to one standard deviation. So three sigmas indicates a limit three standard deviations away from the mean in both the positive and negative direction. This applies to normal data, where a normal distribution curve has been obtained. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What is a control limit?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Anticipatory"
    }, {
      "option" : "B",
      "text" : "Estimation"
    }, {
      "option" : "C",
      "text" : "Participatory"
    }, {
      "option" : "D",
      "text" : "Planning"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "To build trust among the   team, agile believes heavily in participatory decision models where team members collaborate to make decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as collective ownership, self- organization, and self-discipline. In collective ownership, the team members are equally responsible for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great.   Esther  Derby,   Diana  Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Rebecca and her agile team have assembled to play a game of planning poker to make decisions about the relative work effort of the product's user stories. When a team collectively makes decisions, what is the decision model known as?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "App buyer"
    }, {
      "option" : "B",
      "text" : "App developer"
    }, {
      "option" : "C",
      "text" : "App host administrator"
    }, {
      "option" : "D",
      "text" : "James Quill"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A persona is a notional user of the system under development. Being much more detailed than actors in use case modeling where generic user names are assigned (e.g., end user), personas try to elaborate on users with detailed descriptions to  provide context to the developers. Some personas have such notional details as name, address, age, income, likes and dislikes, and other specific details. [User Stories Applied: For Agile Software  Development.  Mike  Cohn.] [Agile analysis and design]"
    },
    "question" : "In agile modeling, what is a good example of a name given to a persona?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Creative intelligence"
    }, {
      "option" : "B",
      "text" : "Intelligence quotient"
    }, {
      "option" : "C",
      "text" : "Artificial intelligence"
    }, {
      "option" : "D",
      "text" : "Emotional intelligence"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Of the following, which is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "As a curved, downward sloping line"
    }, {
      "option" : "B",
      "text" : "As a straight, upward sloping line"
    }, {
      "option" : "C",
      "text" : "As a straight, downward sloping line"
    }, {
      "option" : "D",
      "text" : "As a curved, upward sloping line"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A project burndown chart is an often used information radiator to show iteration progress. It charts two series: the actual work remaining and ideal/estimated work remaining. The vertical axis is the work unit (often story points or hours) and the horizontal axis is iteration duration (typically in number of days). The ideal/estimated work series is a straight, downward sloping line originating on the vertical axis at the value of work to be completed (e.g.,  20 story points) and extending to the horizontal axis (i.e., 0 story points) on the last day of the iteration. The actual series is dependent upon the agile team's productivity and the task complexity and is updated daily. The actual series is typically volatile and is not a straight line but ebbs and flows as the project team tackles the development process. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "On a burndown chart, how does the charted 'ideal/estimated work accomplished' series appear?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Dynamic  systems development method (DSDM)"
    }, {
      "option" : "B",
      "text" : "Static systems development method (SSDM)"
    }, {
      "option" : "C",
      "text" : "Extreme systems development method (XSDM)"
    }, {
      "option" : "D",
      "text" : "Dynamic product development method (DPDM)"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Dynamic Systems Development Method (DSDM) is a structured framework that emphasizes a business perspective with a heavy focus on proving the 'fitness' or marketability. Similar to scrum, DSDM has three major phases: initiating project activities, project life cycle activities, and closing project activities (i.e., similar  to  scrum's  pre-game,   game, postgame). The project life cycle has five stages: feasibility study, business study, functional model iteration, design and build iteration, and implementation. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which agile framework has a project life cycle with the following five stages: feasibility study, business study, functional model iteration, design and build iteration, and implementation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through  collaborative brainstorming events"
    }, {
      "option" : "B",
      "text" : "Through the use of e-mail."
    }, {
      "option" : "C",
      "text" : "Through  the use of formal boardroom meetings."
    }, {
      "option" : "D",
      "text" : "Through  the use of lengthy memorandums."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights  this  importance.  PMI   has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:   Managing communications      to      satisfy     the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In terms of communications management, how does an agile team promote simple and effective communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Scrum"
    }, {
      "option" : "B",
      "text" : "Crystal"
    }, {
      "option" : "C",
      "text" : "DSDM"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Extreme Programming (XP) uses the following practices: pair programming, collective ownership, continuous integration, 40-hour week, on-site customer, coding standards, open workspace, and team rules [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework emphasizes the practice of collective ownership, continuous integration, and pair programming?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Whether or not to consider cultural and language differences to promote an effective communication method."
    }, {
      "option" : "B",
      "text" : "Whether or not to reflect after an iteration."
    }, {
      "option" : "C",
      "text" : "Whether or not to use earned value management as an agile accounting method."
    }, {
      "option" : "D",
      "text" : "Whether or not to conduct risk-based spike tasks."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic  communication  and  face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "A portion of Tom's agile team is not collocated but rather geographically dispersed throughout the world. What is one factor the team should consider when conducting its business?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having fine-grained coordination during a stand-up meeting is a false indicator of a healthy stand-up meeting. The team should have a broad focus to remain open to innovative ideas from other sectors of industry."
    }, {
      "option" : "B",
      "text" : "Having fine-grained coordination during a stand-up meeting indicates a lack of defects and well tested and integrated code."
    }, {
      "option" : "C",
      "text" : "Having fine-grained coordination during a stand-up meeting indicates that each team member is solely focused on his or her own obstacles and uninterested in other team members' progress or obstacles."
    }, {
      "option" : "D",
      "text" : "Having fine-grained coordination during a stand-up meeting indicates that the team understands how important it is to have a sharp,  interdependent focus for the duration of the meeting."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The key characteristics of a healthy stand-up meeting include: peer pressure - the team is dependent upon each other so expectations of peers drives progress; fine-grained coordination - the team should understand the necessity for focus and working dependently; fine focus - the team should understand the need for brevity in the stand-up meeting so the team can be productive; daily commitment - the team should understand the value of daily commitments to each other and uphold those  commitments;  identification  of obstacles - the team collectively  should be aware of each other's obstacles so that the team collectively can try to resolve them. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "As an agile certified practitioner, Patricia emphasizes the virtue of fine- grained communication in the daily stand-up meeting. How is this virtue a sign of a healthy stand-up meeting?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Assign the user story an arbitrarily high number"
    }, {
      "option" : "B",
      "text" : "Assign the user story with the mode of all previously scored  user stories"
    }, {
      "option" : "C",
      "text" : "Assign the user story the mean of all previously scored user stories"
    }, {
      "option" : "D",
      "text" : "Remove the user story from the backlog"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "When an agile team is scoring a particularly vague and unclear user story, it typically assigns it a high value knowing that it will most likely become further defined in upcoming iterations. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Henry and his team are assigning story points to a particularly vague and unclear user story. What should the agile team typically do in such a case?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the adopting organization values a competitive, non-collaborative environment for the sake of boosting revenue."
    }, {
      "option" : "B",
      "text" : "That the adopting organization will review the product once  at the end of the release when all requirements have been reached."
    }, {
      "option" : "C",
      "text" : "That the adopting organization values strict, inflexible project management techniques."
    }, {
      "option" : "D",
      "text" : "That the adopting organization will   assign   dedicated  customer representatives to  the project effort."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "When considering whether to apply new agile practices, several internal and external factors should be considered. Internal factors include whether the project is developing new processes or products; whether the organization is collaborative and emphasizes trust, adaptability, collective ownership, and has minimal or informal project management processes; the size, location, and skills of the project team. External factors include the industry stability and customer engagement or involvement. Generally, agile is best suited to developing new processes or products for an organization that  is collaborative and emphasizes trust, adaptability, collective ownership, and has minimal project management processes by an agile/project team that is relatively small in size,  is collocated, and is cross-functional in skill. Additionally, agile is known to succeed in industries that are quickly adapting to disruptive technologies as opposed to industries that are stable and perhaps inflexible to adaptive approaches. And, lastly,  the component of customer involvement and engagement cannot be stressed enough; the more participation, the better. [The Art of Agile Development. James Shore.] [Knowledge and  Skills: Level 3]"
    },
    "question" : "What is a positive indicator that agile may be appropriate to an organization as a new project methodology?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The  vector  ordering  of  user stories with respect value."
    }, {
      "option" : "B",
      "text" : "The  fixed ordering  of  user stories with respect to value."
    }, {
      "option" : "C",
      "text" : "The relative ordering of user stories with respect to value."
    }, {
      "option" : "D",
      "text" : "The  scalar  ordering  of  user stories with respect to value."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/features of its product to ensure that high-quality and high-value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms  of relative value and risk; value is  defined by the customer(i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer   is   pleased,   but   are     not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative   to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which is  the best  definition  of prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Story marks"
    }, {
      "option" : "B",
      "text" : "Story pips"
    }, {
      "option" : "C",
      "text" : "Story points"
    }, {
      "option" : "D",
      "text" : "Story cards"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Agile teams typically use story points to estimate the relative size or effort of developing a user story [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Ursula has several user stories that she and her agile team need to provide an estimate for regarding their relative size to one another. What scoring system might Ursula and her team use to estimate relative size?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Rotate team member roles"
    }, {
      "option" : "B",
      "text" : "Isolate  team  members by function"
    }, {
      "option" : "C",
      "text" : "Separate team  members by function"
    }, {
      "option" : "D",
      "text" : "Reserve  a space for daily stand-up meetings"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A warm, welcoming environment  that  promotes   effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction  of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "What can an agile team do to promote an innovative and collaborative team space?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The production code is reviewed  in its  entirety by pair programmers."
    }, {
      "option" : "B",
      "text" : "The production code is tested."
    }, {
      "option" : "C",
      "text" : "Other code is integrated before testing the production code."
    }, {
      "option" : "D",
      "text" : "The production code is postfactored to add redundancy measures."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "In the XP principle of continuous integration, what happens after new code has been tested and integrated  into the production code base?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "XP"
    }, {
      "option" : "B",
      "text" : "Crystal"
    }, {
      "option" : "C",
      "text" : "AUP"
    }, {
      "option" : "D",
      "text" : "DSDM"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Crystal is a family of methodologies for a flexible and lightweight approach to software development. The family of methodologies is color coded to differentiate its members (e.g., clear, yellow, orange, red.) The color chosen depends on the level of effort required. On one end of the spectrum is crystal clear, which is for smaller efforts, while crystal red is for larger efforts. Regardless of color, the crystal framework is cyclical and has three fundamental processes: chartering, delivery cycles, and wrap-up. Crystal chartering includes building the team, doing   an   Exploratory   360, defining standards of practice for the team, and building the project plan. In the delivery cycle, the crystal team iteratively develops, integrates, tests, and releases the product in iterations that last from one week to two months. Like other agile frameworks, crystal includes collaborative events, like stand-up meetings and reflective improvement workshops. In wrap-up the team concludes the project and holds a completion ritual where the team reflects on the entire project. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Jill and her team just performed an Exploratory 36. Which framework is Jill most likely leveraging in her  agile effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Creating the project vision"
    }, {
      "option" : "B",
      "text" : "Completing remaining project work"
    }, {
      "option" : "C",
      "text" : "Authoring user documentation"
    }, {
      "option" : "D",
      "text" : "Authoring  product release instructions"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In the closing phase, the agile team completes all remaining project work. In a software project, remaining work can be such tasks as user training documentation and installation manuals. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What are some activities that an agile team would NOT be performing in Highsmith's agile project management closing phase?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Inspection"
    }, {
      "option" : "B",
      "text" : "Interest"
    }, {
      "option" : "C",
      "text" : "Inventory"
    }, {
      "option" : "D",
      "text" : "Installation"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a lean manufacturing analysis technique adopted by agile. A value stream map may  be  used  to  analyze  the  flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities  for   process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste within the process. Processes that add value (processing of a part or feature)  are  generally  referred  to   as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to identify areas of waste that exist in the process. The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the I in WIDETOM stand for with respect to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cost, scope, value"
    }, {
      "option" : "B",
      "text" : "Scope, schedule, constraints"
    }, {
      "option" : "C",
      "text" : "Value, quality, constraints"
    }, {
      "option" : "D",
      "text" : "Scope, cost, schedule"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The agile triangle includes value, quality, and constraints as its parameters.  [Agile   Project Management:     Creating    Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "The agile triangle  includes  what three parameters?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Background sensory communication"
    }, {
      "option" : "B",
      "text" : "Active listening"
    }, {
      "option" : "C",
      "text" : "Subliminal communication"
    }, {
      "option" : "D",
      "text" : "Osmotic communication"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated   team  members unconsciously. By sharing the same work environment, team members are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework    that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Bob and Laurie share the same work environment and so are in tune with each other's daily progress as a result of hearing the same environmental sounds. What type of communication are Bob and Laurie participating in when neither must use words to know, in part, about what the other person is thinking or feeling?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Be kind, probe"
    }, {
      "option" : "B",
      "text" : "Devil's in the detail"
    }, {
      "option" : "C",
      "text" : "1Y"
    }, {
      "option" : "D",
      "text" : "Asking probing questions"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions;  and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem-solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because a product release typically lasts several sprints, verification and validation take place frequently to keep  sprints on track."
    }, {
      "option" : "B",
      "text" : "Verification and validation are not performed frequently."
    }, {
      "option" : "C",
      "text" : "Because a product release typically lasts several iterations, verification and validation take place frequently to keep iterations on track."
    }, {
      "option" : "D",
      "text" : "Because iterations are typically short in duration and a working product is delivered at the end of each iteration, verification and validation must take place frequently to ensure product quality."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated    by    a    user    story)    and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need). Sometimes a product may be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated.   [Agile   Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "Why is verification and validation performed frequently on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because agile contracts have no scheduling or planning"
    }, {
      "option" : "B",
      "text" : "Because customers have little experience with the agile quality to cost and value triangle."
    }, {
      "option" : "C",
      "text" : "Because  agile welcomes changing scope."
    }, {
      "option" : "D",
      "text" : "Because the cost of developers is constantly in flux."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith,   the   nature   of   the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can  be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Stacey, the head of a multi- national corporation, is considering hiring an agile team to develop a new database system. However, the agile team Stacey is working with tells her that estimating final cost can be difficult. Why is it more difficult to estimate cost on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Affinity planning."
    }, {
      "option" : "B",
      "text" : "Team enabling."
    }, {
      "option" : "C",
      "text" : "Kanban tracking."
    }, {
      "option" : "D",
      "text" : "User story authoring."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Servant leadership has its roots with an essay written in 1970 by Robert K Greenleaf. Greenleaf defined servant leaders as humble stewards devoted to their company and work to serve their peers, teams, and  customers. In a self-organizing team, a servant leader, as Greenleaf defined it, is ideal as the team leader is an enabler, listening to the agile team's needs, removing obstacles, and providing tools or other support to promote high productivity. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following duties is expected of a servant leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because fixed-price implies that the time and material costs shall not exceed certain thresholds which causes undue stress on agile accounting practices."
    }, {
      "option" : "B",
      "text" : "Because fixed-price implies that the schedule is fixed which  no agile development effort should bind itself against."
    }, {
      "option" : "C",
      "text" : "Because fixed-price implies that the revenue structure is fixed to a point that is problematic for development compensation."
    }, {
      "option" : "D",
      "text" : "Because fixed-price implies that scope is fixed and discourages the development team from exploring innovative ideas outside the scope that may add value to the product."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Fixed-price contracts, although typical of traditional projects where scope is defined ahead of time, are not well suited for agile. When scope is fixed it can deter a team from exploring out-of-scope solutions that may add value to the product. Contracts suited for agile include: general service for the initial phase with fixed-price contracts for successive phases;  cost- reimbursable/time and materials; not- to-exceed with fixed-fee; and a combination with incentives. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair  Cockburn.]  [Knowledge  and Skills: Level 3]"
    },
    "question" : "Why should fixed-price contracts be avoided for agile development?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because it promotes an inflexible atmosphere."
    }, {
      "option" : "B",
      "text" : "Because it produces more efficient software code."
    }, {
      "option" : "C",
      "text" : "Because it decreases employee retention."
    }, {
      "option" : "D",
      "text" : "Because it promotes effective communication, collaboration, and innovation."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings;   pairing   workstations;  and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Why is a warm, welcoming team space environment important in agile development efforts?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because it ensures that all team members know that cost is the only factor in the  prioritization equation."
    }, {
      "option" : "B",
      "text" : "Because it ensures that all team members are aware that risk never enters the equation of prioritization."
    }, {
      "option" : "C",
      "text" : "Because it ensures that all team members are aware that risk trumps value in the prioritization equation."
    }, {
      "option" : "D",
      "text" : "Because it ensures that all team members are aware of the product features most valuable to the customer."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An    agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived     value     and     should   be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk-to- value matrix has four quadrants, with the horizontal axis having low and  high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low- risk; low-value, high-risk; high-value, low-risk; high-value, high-risk. A cost- to-value  matrix  can  also  be  made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized on a fixed scale. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jessica as a product owner believes steadfastly in the feature prioritization. Why might Jessica believe in prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because it ensures that the most valuable features are developed first."
    }, {
      "option" : "B",
      "text" : "Because  it ensures that all product features get delivered in a release."
    }, {
      "option" : "C",
      "text" : "Because it ensures that all team members know that  valuable product features will always be developed in the affinity plan."
    }, {
      "option" : "D",
      "text" : "Because it ensures that the local safety of all features are developed first."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/   features   of   its   product   to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,'       'Satisfiers,'       and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high  risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "George as a product owner believes steadfastly in the feature prioritization. Why might George believe in prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because it facilitates a discussion helpful for post- iteration reflection."
    }, {
      "option" : "B",
      "text" : "Because it facilitates lessons learned on product defects."
    }, {
      "option" : "C",
      "text" : "Because it maximizes the earnings potential of product developers."
    }, {
      "option" : "D",
      "text" : "Because it facilitates an optimized and early return on investment."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An  agile  team  must  always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk,   a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise   Agility.   Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Margaret  as  a product owner believes steadfastly in the feature prioritization. Why might Margaret believe in prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because it helps order the closing backlog for release."
    }, {
      "option" : "B",
      "text" : "Because   it   helps   order the Kanban board for task sequencing."
    }, {
      "option" : "C",
      "text" : "Because it helps order the iteration backlog for release planning."
    }, {
      "option" : "D",
      "text" : "Because it helps order the product backlog for release planning."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features  in terms of relative value and   risk; value is defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more   the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that   the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Hanna as a product owner believes steadfastly in the feature prioritization. Why might Hanna believe in prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because  it  ranks the team members in order of velocity."
    }, {
      "option" : "B",
      "text" : "Because  it  provides  for an optimized early ROI."
    }, {
      "option" : "C",
      "text" : "Because it provides for a local pessimum in product delivery."
    }, {
      "option" : "D",
      "text" : "Because it provides for value- based ranking of developer tasks."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value  features  are  developed  first  to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that   are   requisite.   Dissatisfiers   are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four  categories/quadrants:  low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Hanna as a product owner believes steadfastly in the feature prioritization. Why might Hanna believe in prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because market demand is difficult to predict."
    }, {
      "option" : "B",
      "text" : "Because agile welcomes changing scope throughout a project which will change costing."
    }, {
      "option" : "C",
      "text" : "Because the customer has not idea of what it will be necessary  to spend to buy a valuable product."
    }, {
      "option" : "D",
      "text" : "Because the cost of product development is highly volatile."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Time, budget, and cost estimation is an important knowledge and  skill  area  of  agile.  According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements  are  agreed  upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Henrietta, the head of a multi- national corporation, is considering hiring an agile team to develop a new database system. However, the agile team Henrietta is working with  tells her that estimating final cost can be difficult. Why is it more difficult to estimate cost on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because market demand is difficult to predict."
    }, {
      "option" : "B",
      "text" : "Because agile welcomes changing scope, which can increase or decrease the level of effort."
    }, {
      "option" : "C",
      "text" : "Because the cost of developers is a sunk cost."
    }, {
      "option" : "D",
      "text" : "Because minimal planning is involved with agile."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency  to  provide  improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products      Ð      2nd      Edition.    Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Janet, the head of a multi-national corporation, is considering hiring an agile team to develop a new database system. However, the agile team  Janet is working with tells her that estimating final cost can be difficult. Why is it more difficult to estimate cost on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because  no  planning  is involved with agile."
    }, {
      "option" : "B",
      "text" : "Because  agile welcomes changing scope."
    }, {
      "option" : "C",
      "text" : "Because the cost of developers is constantly in flux."
    }, {
      "option" : "D",
      "text" : "Because customers have little experience with the agile quality to cost and value triangle."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and,   incentive   contracts   (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Why is it more difficult to estimate cost on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because of its requirement to use self-organizing teams."
    }, {
      "option" : "B",
      "text" : "Because the cost of developers is constantly in flux."
    }, {
      "option" : "C",
      "text" : "Because  agile welcomes changing scope."
    }, {
      "option" : "D",
      "text" : "Because  no  planning  is involved with agile."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes  it  difficult  to  estimate  a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Peter, the head of a multi-national corporation, is considering hiring an agile team to develop a new database system. However, the agile team Peter is working with tells him that the exact cost of delivering the new database system is difficult to estimate. Why is  it more difficult to estimate cost on  an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because competition breeds high productivity and peer pressure has been identified by human resource experts to be the best method for increasing competition in the workplace."
    }, {
      "option" : "B",
      "text" : "Because in an agile project the team is dependent upon each member to provide consistent and sustainable results for the success of the project. Peer pressure in this context is a positive attribute because team members, or peers, feel responsible for providing positive results so the team can function efficiently."
    }, {
      "option" : "C",
      "text" : "Because peer pressure encourages team members to take huge project risks that otherwise would never transpire and an underlying theme of agile project management is risk seeking."
    }, {
      "option" : "D",
      "text" : "This question is incorrect. Peer pressure is not an advantage  of the daily stand-up meeting."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The key characteristics of a healthy stand-up meeting include: peer pressure - the team is dependent upon each other so expectations of peers drives         progress;         fine-grained coordination - the team should understand the necessity for focus and working dependently; fine focus - the team should understand the need for brevity in the stand-up meeting so the team can be productive; daily commitment - the team should understand the value of daily commitments to each other and uphold those commitments; identification of obstacles - the team collectively  should be aware of each other's obstacles so that the team collectively can try to resolve them. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "Usually peer pressure has a negative connotation. Why is peer pressure viewed as an advantage of the daily stand-up meeting?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because having engaged stakeholders that actively participate is crucial for success."
    }, {
      "option" : "B",
      "text" : "Because without assigning tasks and duties to stakeholders scope creep is inevitable."
    }, {
      "option" : "C",
      "text" : "Because managing the requirements of stakeholders is essential to keep the product backlog from expanding."
    }, {
      "option" : "D",
      "text" : "Because preventing the stakeholders from interfering with developers helps improve velocity."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment)  for  a  project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose  that  fulfills  our commitment to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Wilson and the agile team he belongs to are having a discussion regarding  'stakeholder  management.' Why is 'stakeholder management' an important topic of conversation for an agile team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because the product owner provides   an   overview   of   user stories and answers any questions the development team may have."
    }, {
      "option" : "B",
      "text" : "Because the product owner must report any outliers (i.e., extremely long or short estimates) on the risk register."
    }, {
      "option" : "C",
      "text" : "Because the product owner must relay to the customer the range of story points assigned to each user story."
    }, {
      "option" : "D",
      "text" : "Because   the   product owner must moderate the planning poker session."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop  a  user  story.  At  a  planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort     by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Why is the presence of a product owner necessary when playing a game of planning poker?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A team that is self-organizing and involves the entire team and customer or user to blaze a forward trail and solve problems."
    }, {
      "option" : "B",
      "text" : "A team that is management- oriented  and  focused  solely   on meeting scope, cost, and schedule constraints."
    }, {
      "option" : "C",
      "text" : "A team that is capable of exceeding  sustainable development velocities in 'power' iterations to meet backlog goals."
    }, {
      "option" : "D",
      "text" : "A team that solves problems through the use of market research."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management    involvement    -    are  a cornerstone of the agile methodology. This is the antithesis to the classic viewpoint of the traditional project manager who is seen as someone that controls all decisions and delegates tasks to a team with little feedback. An agile team must include all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer is closely integrated  with the agile team with collocation/on-site support being ideal. An agile team feels empowered when  it  collectively  assumes  responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Patty is explaining the importance of an agile team being empowered. What does an empowered team mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because without participation from stakeholders, the chances of a successful project are  optimized."
    }, {
      "option" : "B",
      "text" : "Because without participation from stakeholders, the team can focus on providing a valuable product that adheres to the initial project plan."
    }, {
      "option" : "C",
      "text" : "Because without stakeholder management, stakeholders will inevitably interfere  with necessary product development."
    }, {
      "option" : "D",
      "text" : "Because without active participation from stakeholders, the chances of a successful  project are reduced."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs.     6)     We     need      intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lila,  as  project leader, has been discussing the importance of 'stakeholder management' with her team. Why is stakeholder management so important?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because without prioritization a team would not know how prepare for retrospective workshops."
    }, {
      "option" : "B",
      "text" : "Because without prioritization a team would not know how to gauge unit testing efforts."
    }, {
      "option" : "C",
      "text" : "Because without prioritization a team would not know how to estimate user story sizes."
    }, {
      "option" : "D",
      "text" : "Because without prioritization a team would not know in what order to develop user stories in order to optimize value delivered to the customer."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high-value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user    stories/features    in    terms    of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value  linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Marge as a product owner believes steadfastly in the feature prioritization. Why might Marge believe in prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Taking notes."
    }, {
      "option" : "B",
      "text" : "Being present and focusing your attention on the speaker."
    }, {
      "option" : "C",
      "text" : "Talking loudly."
    }, {
      "option" : "D",
      "text" : "Being silent."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cannon"
    }, {
      "option" : "B",
      "text" : "WIDETOM"
    }, {
      "option" : "C",
      "text" : "WoCSoM"
    }, {
      "option" : "D",
      "text" : "Kano"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high-value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms  of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into    'Must    have,'    'Should  have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value  matrix  can  be  used.   A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James   R.   Trott.]   [Knowledge    and Skills: Level 1]"
    },
    "question" : "Select a method used in agile for the purpose of prioritization."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being  present and focusing your attention on the speaker."
    }, {
      "option" : "B",
      "text" : "Closed-ended questions."
    }, {
      "option" : "C",
      "text" : "Being silent."
    }, {
      "option" : "D",
      "text" : "Taking notes."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Taking notes."
    }, {
      "option" : "B",
      "text" : "Leaving  the conversation early."
    }, {
      "option" : "C",
      "text" : "Good body language."
    }, {
      "option" : "D",
      "text" : "Being silent."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being  present  and  focusing   your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Instant messaging"
    }, {
      "option" : "B",
      "text" : "Near Field Communication"
    }, {
      "option" : "C",
      "text" : "None"
    }, {
      "option" : "D",
      "text" : "Bluetooth"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Video conferencing and instant messaging are technologies that can provide some level of osmotic communication.      [Agile      Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What technology can facilitate some osmotic communication for team members that do NOT share the same workspace?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Tim and Mark"
    }, {
      "option" : "B",
      "text" : "Ursula and Yvonne"
    }, {
      "option" : "C",
      "text" : "Bob and Yvonne"
    }, {
      "option" : "D",
      "text" : "Bob and Mark"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci  sequence  is  often  used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are  given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "An agile team has just estimated the relative value of developing a user story during a game of planning poker. The following scores were played: Bob: 40; Tim: 8; Mark: 1; Ursula: 13; Yvonne: 2. According to the rules of planning poker, which two team members should defend their positions?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Simple unified process (SUP)"
    }, {
      "option" : "B",
      "text" : "Adapted  unified process (AdUP)"
    }, {
      "option" : "C",
      "text" : "Extreme  unified process (EUP)"
    }, {
      "option" : "D",
      "text" : "Agile unified process (AUP)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Agile Unified Process (AUP) is a simplified version of the Unified Process, or UP (UP itself is a more detailed framework for iterative and incremental software development). AUP simplifies UP for the agile framework. AUP projects use four phases: 1) inception, 2) elaboration, 3) construction, and 4) transition. At the end of each short iteration, the team delivers a working product. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Hillary is using a software development framework adapted specifically for agile that from the unified process (UP). Which framework is Hillary using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Whether or not to consider language differences when communicating."
    }, {
      "option" : "B",
      "text" : "Whether or not to plan an iteration."
    }, {
      "option" : "C",
      "text" : "Whether or not to use a rolling look ahead plan for complex projects."
    }, {
      "option" : "D",
      "text" : "Whether or not to use information radiators."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form     of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Peter's agile team is geographically dispersed throughout the world. What is one factor the team should consider when conducting its business?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Timeboxing"
    }, {
      "option" : "B",
      "text" : "Daily stand-up meeting"
    }, {
      "option" : "C",
      "text" : "Process tree"
    }, {
      "option" : "D",
      "text" : "Console mapping"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "There are several feedback techniques - techniques that facilitate constructive    criticism    to    improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,   demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken  Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Feedback techniques are ubiquitous in agile projects. Select the response which lists a feedback technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Both are equivalent."
    }, {
      "option" : "B",
      "text" : "Low-value, low risk"
    }, {
      "option" : "C",
      "text" : "High-value, high risk"
    }, {
      "option" : "D",
      "text" : "High-severity, low-likelihood"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A risk-adjusted backlog is a product backlog organized by taking into account risk. Risk can be estimated as the product of severity/consequence and likelihood. User stories can also be positioned on  a risk-to-value matrix to help prioritize them in the backlog. The risk-to-value matrix is a chart with four quadrants. Along the horizontal axis is value in ascending order. Along the vertical axis is risk in ascending order. A user story that is high risk and high value is located in the top-right corner. A   user story that is low risk and high value is located in the lower-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk  and low value is located in the lower- left corner. Typically a team will prioritize high-value, low-risk user stories first, followed by high-value, high-risk user stories, followed by low-value, low-risk user stories, followed by low-value, high-risk user stories. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Which type of risk category is typically given a lower priority when creating the risk-adjusted backlog: a) high-value, high risk or b) low-value, low risk?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the adopting organization values strict and inflexible project management practices."
    }, {
      "option" : "B",
      "text" : "That the adopting organization values hierarchical decision making."
    }, {
      "option" : "C",
      "text" : "That the adopting organization values top-down management."
    }, {
      "option" : "D",
      "text" : "That the adopting organization values trust, collective ownership, and adaptability."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "When considering whether to apply new agile practices, several internal and external factors should be considered. Internal factors include whether the project is developing new processes or products; whether the organization is collaborative and emphasizes trust, adaptability, collective ownership, and has minimal or informal project management processes; the size, location, and skills of the project team. External factors include the industry stability and customer engagement or involvement. Generally, agile is best suited to developing new processes or products for      an      organization      that       is collaborative and emphasizes trust, adaptability, collective ownership, and has minimal project management processes by an agile/project team that is relatively small in size,  is collocated, and is cross-functional in skill. Additionally, agile is known to succeed in industries that are quickly adapting to disruptive technologies as opposed to industries that are stable and perhaps inflexible to adaptive approaches. And, lastly,  the component of customer involvement and engagement cannot be stressed enough; the more participation, the better. [The Art of Agile Development. James Shore.] [Knowledge and  Skills: Level 3]"
    },
    "question" : "What is a positive indicator that agile may be appropriate to an organization as a new project methodology?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "$20,000"
    }, {
      "option" : "B",
      "text" : "($10,000)"
    }, {
      "option" : "C",
      "text" : "$10,000"
    }, {
      "option" : "D",
      "text" : "$30,000"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index  (SPI). CV and SV can be converted into performance   indicators   of   CPI  and SPI, respectively, and tracked and charted to show progress over  time. PV is the planned value of work at a given time in a project; you can calculate it by multiplying the BAC by the ratio of current week/scheduled weeks (e.g., 5 weeks into a 15 week $15,000 project = $5,000 PV). EV is value of work actually completed or earned (e.g., you have completed 50% of the project by week 5 of a 15   week $15,000 project = $7,500 EV). SV is the difference between what a project has earned to date and what it was planned to earn to date (i.e., SV = EV - PV). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "Consider the following EVM scenario and calculate the SV. The team is on week 30 of a 100 week project. Its BAC is $100,000 and AC  is $15,00. The team estimates it is 20% complete overall and has an EV of $20,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Story coins"
    }, {
      "option" : "B",
      "text" : "Story chapters"
    }, {
      "option" : "C",
      "text" : "Story marks"
    }, {
      "option" : "D",
      "text" : "Story points"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Agile teams typically use story points to estimate the relative size or effort of developing a user story [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Thomas notices that his team just assigned a user story the value of 10 to indicate the relative effort it will take to develop the user story. What is Thomas and his team most likely using to estimate relative user story development effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "From both  a horizontal  and vertical dimension"
    }, {
      "option" : "B",
      "text" : "From the bottom up"
    }, {
      "option" : "C",
      "text" : "From the top down"
    }, {
      "option" : "D",
      "text" : "Both from the top down and the bottom up"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "When estimating an agile project, a top-down approach is typically used. This involves high- level estimation at first, followed by more detailed estimation. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Generally, how is an agile project estimated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collocation of team members"
    }, {
      "option" : "B",
      "text" : "Isolation of team members"
    }, {
      "option" : "C",
      "text" : "Rotation of team members"
    }, {
      "option" : "D",
      "text" : "Separation of team members by function"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important place that should foster effective communication. What is a guideline    for    promoting such an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Communications management"
    }, {
      "option" : "B",
      "text" : "Command and control"
    }, {
      "option" : "C",
      "text" : "Stakeholder analysis"
    }, {
      "option" : "D",
      "text" : "Brainstorming"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and    communication    needs    of  the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders: Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information  radiators,  daily  stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As team lead, Xavier is constantly monitoring the effectiveness of communication among his team and stakeholders. What is the knowledge and skill area that deals with communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Broad-spectrum software"
    }, {
      "option" : "B",
      "text" : "Narrow-band software"
    }, {
      "option" : "C",
      "text" : "Vertical-market software"
    }, {
      "option" : "D",
      "text" : "Horizontal-market software"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Vertical-market software includes solutions for many organizations within one industry (e.g., pharmaceutical  software). Horizontal-market software includes solutions for many organizations in many industries (e.g., word processing software). [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "If a software product is developed for multiple organizations within one industry, it can be described as:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The collaborative sharing of information among all stakeholders and team  members to promote a well-informed project environment."
    }, {
      "option" : "B",
      "text" : "The sharing of information on a need-to-know basis."
    }, {
      "option" : "C",
      "text" : "The sharing of information between the product owner and chief programming engineer regarding the adaptability of the development team to implement performance improvement plans."
    }, {
      "option" : "D",
      "text" : "The sharing of information on a just-in-time basis."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn,   effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jessica, as a certified agile practitioner, believes in the value of 'knowledge sharing.' Which of the following is the best definition of 'knowledge sharing?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme programming (XP)"
    }, {
      "option" : "B",
      "text" : "Peer perfect programming (3P)"
    }, {
      "option" : "C",
      "text" : "Ultra programming (UP)"
    }, {
      "option" : "D",
      "text" : "Paired programming (PP)"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Common frameworks or methodologies used within agile include: scrum, extreme programming (XP), lean software development, crystal, feature driven development (FDD), dynamic systems development method (DSDM), agile unified process (AUP). [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "From  the following,  select  a common agile framework/methodology."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cost-to-schedule matrix"
    }, {
      "option" : "B",
      "text" : "Cost-to-value matrix"
    }, {
      "option" : "C",
      "text" : "Cost-to-risk matrix"
    }, {
      "option" : "D",
      "text" : "Cost-to-constraint matrix"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value  matrices.  An  agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Becky and her agile team have just performed decomposition on several user stories and wants to prioritize them. What common technique might she and her team use to prioritize the user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Could disrupt dependencies"
    }, {
      "option" : "B",
      "text" : "Could have"
    }, {
      "option" : "C",
      "text" : "Cannot have"
    }, {
      "option" : "D",
      "text" : "Could do without"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The MoSCoW technique is commonly used in agile to prioritize user stories and create a story  map. The   MoSCoW   technique  prioritizes user stories into the following groups in descending order of priority: M - Must have; S - Should have; C - Could have; W - Would have. Must have items are those product features which are absolutely essential to develop. Should have items are product features that are not essential but have significant business value. Could have items are product features that would add some business value. Would have items are product features that have marginal business value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Perry is explaining the MoSCoW technique which is often used in agile to prioritize user stories. What does the C stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration delivery"
    }, {
      "option" : "B",
      "text" : "Prototype delivery"
    }, {
      "option" : "C",
      "text" : "Demo and acceptance delivery"
    }, {
      "option" : "D",
      "text" : "Incremental delivery"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two  to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Bill, as the agile team lead, likes being able to demo the latest iteration of a working product to the customer. His   team   delivers a demo of the product every two weeks so the customer may provide feedback and perform acceptance. What type of delivery concept provides this type of regular interval feedback that is a cornerstone of agile development?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Empowered teams remove themselves from  being responsible of product quality in order to reduce association with project failure."
    }, {
      "option" : "B",
      "text" : "Empowered teams need extensive management involvement in order to understand customer need"
    }, {
      "option" : "C",
      "text" : "Empowered teams remain inflexible to changing customer requirements and focus on delivering to specification."
    }, {
      "option" : "D",
      "text" : "Empowered teams take ownership of the product and thus have a strong focus on delivering value."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams.   Lyssa   Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Why is an empowered team considered an important team attribute in agile?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Building the team; Performing an Exploratory 360; Picking team conventions and practices; Building the initial project plan"
    }, {
      "option" : "B",
      "text" : "Building the team; Performing an Exploratory 180; Picking team conventions and practices; Building the initial project plan"
    }, {
      "option" : "C",
      "text" : "Choosing the product owner; Performing  an  Exploratory  360; Picking team conventions and practices; Building the initial project plan"
    }, {
      "option" : "D",
      "text" : "Building the team; Performing an Exploratory 360; Picking story points or ideal days; Building the initial project plan"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Crystal development process is cyclical/iterative. Its  primary components are chartering, delivery cycles, and project wrap-up. Chartering involves creating a project charter, which can last from a few  days to a few weeks. Chartering consists of four activities: 1) Building the core project team, 2) performing an Exploratory 360¡ assessment, 3) fine tuning the methodology, and 3) building the initial project plan. [Agile Software Development: The Cooperative   Game   Ð   2nd   Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "List  the primary steps in  the Crystal development process project chartering activity."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "After the first release."
    }, {
      "option" : "B",
      "text" : "At the beginning of a project, usually after the vision statement has been defined."
    }, {
      "option" : "C",
      "text" : "After the first iteration."
    }, {
      "option" : "D",
      "text" : "During closing as end-user documentation to understand the product"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative   work   effort   (e.g.,  planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development. James Shore.] [Agile analysis and design]"
    },
    "question" : "When  is  the product roadmap initially created?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Built-in test output"
    }, {
      "option" : "B",
      "text" : "Iteration schedule slip points"
    }, {
      "option" : "C",
      "text" : "Feature feedback and critique"
    }, {
      "option" : "D",
      "text" : "Scrum error analysis"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In the adapting phase, the agile team encourages feedback of the latest deliverable of an iteration. From the feedback, the team adapts product features and plans for the subsequent iteration. [Agile Project Management: Creating Innovative Products Ð 2nd Edition.  Jim  Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is the primary input to Highsmith's agile project management adapting phase?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Task board"
    }, {
      "option" : "B",
      "text" : "Iteration backlog"
    }, {
      "option" : "C",
      "text" : "Burndown chart"
    }, {
      "option" : "D",
      "text" : "Business case"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project will deliver value to a customer. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James   R.   Trott.]   [Knowledge    and Skills: Level 2]"
    },
    "question" : "What  agile artifact  outlines  the project's expected rate of return?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By difficulty"
    }, {
      "option" : "B",
      "text" : "By value"
    }, {
      "option" : "C",
      "text" : "By developer preference"
    }, {
      "option" : "D",
      "text" : "By ease of implementation"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "User stories are prioritized based on customer value. Value is determined by return on investment, growth of team knowledge, and risk reduction. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "How are user stories or features prioritized for development in the agile methodology?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By alphabetical letter"
    }, {
      "option" : "B",
      "text" : "By relation to product feature"
    }, {
      "option" : "C",
      "text" : "By priority"
    }, {
      "option" : "D",
      "text" : "By logical sequence and dependency"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Various grouping methods are used to organize user stories. Typical methods are: 1) Relation to a product feature (e.g., all user stories that interact   with   the   database),   2)  By logical sequence and dependency (e.g., Group 1 must be developed before Group 2 because of technological dependency), 3) By priority based on customer value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Which of the following is NOT a typical grouping of user stories for purposes of organization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Allows for a streamlined process for changing sprint deadlines"
    }, {
      "option" : "B",
      "text" : "Makes communication of project status less time consuming"
    }, {
      "option" : "C",
      "text" : "Improves team dynamics by offering a place to air grievances"
    }, {
      "option" : "D",
      "text" : "Decreases the amount of time spent in daily standup meetings"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Information radiators improve team communication by reducing the amount of time spent explaining project status. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select  an  advantage of  using an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By using comprehensive documentation to define team values."
    }, {
      "option" : "B",
      "text" : "By performing  ongoing testing."
    }, {
      "option" : "C",
      "text" : "By performing  integration testing near the end of a release."
    }, {
      "option" : "D",
      "text" : "By performing  work breakdown structure reviews."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Agile project management places strong emphasis on 'continuous improvement.' Continuous improvement processes are built into the agile methodology, from customers providing feedback after each iteration to the team reserving time to reflect on its performance through retrospectives after each iteration. Ongoing unit and integration testing and keeping up with technological/industry developments also play a part in the continuous improvement process. Continuous improvement is also a key principle in the  lean  methodology,  where  a focus of removing waste from the value stream is held. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "How might an  agile team continuously improve its product?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It helps ensure the customer and agile team understand the product vision, acceptance criteria, and high-level product release plan."
    }, {
      "option" : "B",
      "text" : "It helps the team understand customer portfolio risks"
    }, {
      "option" : "C",
      "text" : "It helps the customer solidify product requirements for the release"
    }, {
      "option" : "D",
      "text" : "It helps the agile team decompose user stories into tasks."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Release planning is important because the customer and development team collaborate to create a high-level plan for product release. User stories are initially defined during release planning. The release plan typically includes a schedule that includes several iterations and an estimate for when the product will be released. The development team discusses each user story   in   detail   to,   along   with  the customer, assign them to the project's iterations. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "One level of planning in the agile project management methodology is release panning. Why is release planning important?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Making all decisions for the team"
    }, {
      "option" : "B",
      "text" : "Having a team  that  is  self- organizing and self-disciplined"
    }, {
      "option" : "C",
      "text" : "Promoting competition"
    }, {
      "option" : "D",
      "text" : "Assigning more work than can be accomplished in an iteration to set a sense of urgency"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Building a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is  self-organized  and self-disciplined, and is collocated. Several management techniques can be used to build or foster a high-performance team environment, some techniques include: removing obstacles that slow down a team's performance, having high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice or technique she can use to build a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "$(220.00)"
    }, {
      "option" : "B",
      "text" : "$(244.00)"
    }, {
      "option" : "C",
      "text" : "$(230.00)"
    }, {
      "option" : "D",
      "text" : "$(300.00)"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment   or   project.   NPV   is  the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow is discounted back  to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash  inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the Net Present Value of the following investment candidate. The initial investment cost is $1,00. The discount rate is 5%. At the end of year 1, $100 is expected. At the end of year 2, $300 is expected. At the end of year 3, $450 is expected."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By collocating its team members."
    }, {
      "option" : "B",
      "text" : "By purchasing  its team members blue tooth headsets."
    }, {
      "option" : "C",
      "text" : "By isolating its team members."
    }, {
      "option" : "D",
      "text" : "By separating team members into functional specialties."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated   team  members unconsciously. By sharing the same work environment, team members are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework    that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "How can a team ensure it benefits from osmotic communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "6"
    }, {
      "option" : "B",
      "text" : "3"
    }, {
      "option" : "C",
      "text" : "5"
    }, {
      "option" : "D",
      "text" : "4"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "83/20=4.15. Round 4.15 up to 5. 5 iterations is the best answer. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "If a team has a velocity of 20 story points and there are 83 story points remaining in the backlog  and excluding all other potential constraints like increased scope, how many iterations should it take for the project team to complete the remaining story points?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the user story costs 0 points."
    }, {
      "option" : "B",
      "text" : "That the user story has no value."
    }, {
      "option" : "C",
      "text" : "That the user story is an impediment to progress."
    }, {
      "option" : "D",
      "text" : "That the user story takes minimal effort to design, build, and test."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A 0 point user story is said to be of minimal effort for a development team. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "When a user story is estimated to be 0 story points, what does it indicate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "During release planning"
    }, {
      "option" : "B",
      "text" : "Immediately  after any scope change"
    }, {
      "option" : "C",
      "text" : "After a sprint"
    }, {
      "option" : "D",
      "text" : "During sprint planning"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A change report is typically authored after a sprint has completed. [Agile Project Management with Scrum. Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "In scrum a change report is used to document a change in scope. When is  a change report typically created?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Work in product"
    }, {
      "option" : "B",
      "text" : "Work in production"
    }, {
      "option" : "C",
      "text" : "Work in process"
    }, {
      "option" : "D",
      "text" : "Work in places"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is  also referred to as work in process (WIP). WIP is material or parts that have started production but are not yet a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain. One way of reducing inventory is to reduce the WIP at individual machines or servers by only moving as fast as your slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that  can develop a certain amount of features. In this analogy, the WIP limit is equivalent to the sprint backlog. By maintaining a WIP limit equal to the sprint backlog, no features should be incomplete at the sprint review. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "What does WIP stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Only during iteration planning."
    }, {
      "option" : "B",
      "text" : "When a user story is picked for an iteration."
    }, {
      "option" : "C",
      "text" : "After user story definition and before coding starts."
    }, {
      "option" : "D",
      "text" : "Only during release planning."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Acceptance criteria is typically defined in tandem with user story definition during release planning; however,  acceptance  criteria  can also be defined during iteration planning once a story has been picked for the iteration. The one steadfast rule is that acceptance criteria must be defined before development begins. Like agile planning, the definition of acceptance criteria is constantly evolving as the conversation with the product owner matures. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "When is acceptance criteria defined by the customer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Select a different user story"
    }, {
      "option" : "B",
      "text" : "Remove the card from the task board and place it in the product backlog"
    }, {
      "option" : "C",
      "text" : "Deal with the minor inconsistency in private and work overtime to keep the iteration on schedule"
    }, {
      "option" : "D",
      "text" : "Update the time on the task card as soon as possible"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Agile team members should feel free to update incorrect task time estimates as soon as possible. Team members   can   use   current   iteration progress and accrued experience to come to a new task time estimate. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Greg is ready to select another task for execution in the current iteration. He reviews the task and realizes that the estimated time on the task card is most likely too low. What should Greg do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product vision and project data sheet"
    }, {
      "option" : "B",
      "text" : "Project parking lot and story card layout"
    }, {
      "option" : "C",
      "text" : "Project  charter and sprint change report"
    }, {
      "option" : "D",
      "text" : "Product  vision  and project charter"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An agile practitioner can use the project parking lot and story card layout to summarize a release plan. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "What two artifacts are available to agile practitioners to summarize a release plan?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "RFID"
    }, {
      "option" : "B",
      "text" : "Task board"
    }, {
      "option" : "C",
      "text" : "Gantt chart"
    }, {
      "option" : "D",
      "text" : "Work breakdown structure (WBS)"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An agile team often uses a task board to monitor and control progress. A task board identifies tasks to be completed during an iteration and their progress. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning,  monitoring, and adapting]"
    },
    "question" : "What is one type of information radiator that a scrum master uses to track and monitor team progress?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Executive sponsor"
    }, {
      "option" : "B",
      "text" : "External facilitator"
    }, {
      "option" : "C",
      "text" : "Product owner"
    }, {
      "option" : "D",
      "text" : "Scrum master"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Because the product owner is responsible for ROI and has the most knowledge on what the complete objectives are for a product, the product owner should lead the sprint review.   [Agile   Project  Management with Scrum. Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "Which team member should lead or facilitate the sprint review?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Blitz planning incorporates story dependencies and involves using cards to plan a project where timeline, tasks, and story dependencies are identified and considered."
    }, {
      "option" : "B",
      "text" : "Blitz   planning   incorporates randomizing pair programmers every iteration to promote cross- functional team development."
    }, {
      "option" : "C",
      "text" : "Blitz planning incorporates increasing user story WIP in an iteration to determine where natural bottlenecks occur so that the team may confront them in an upcoming retrospective."
    }, {
      "option" : "D",
      "text" : "Blitz planning incorporates overloading an iteration with 10% more user stories than the team's current    estimated    velocity   in order to see if the team can reach new velocity levels. The blitz serves as a motivator for the team to improve performance."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Blitz planning incorporates story dependencies and involves using cards to plan a project where timeline, tasks, and story dependencies are identified and considered. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "In  the agile framework,  what  is blitz planning?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Aggregating similar user stories into meta-stories."
    }, {
      "option" : "B",
      "text" : "Decomposing large or complex user stories into smaller, more manageable user stories."
    }, {
      "option" : "C",
      "text" : "Aggregating  dissimilar  user stories into meta-stories."
    }, {
      "option" : "D",
      "text" : "Refactoring  testing code  for the upcoming iteration"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "During iteration planning, the team follows three steps to create an iteration backlog: 1) The team decomposes large or complex user stories into multiple, smaller stories, 2) The team breaks each user story into development tasks, and 3) The team estimates the task effort or duration, typically using ideal hours. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "What is the first step agile team's take during iteration planning?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To do"
    }, {
      "option" : "B",
      "text" : "Ready for testing"
    }, {
      "option" : "C",
      "text" : "Done"
    }, {
      "option" : "D",
      "text" : "In progress"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Greg should place the task card in the 'in progress' column to signify that the task is currently being executed. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Planning,  monitoring, and adapting]"
    },
    "question" : "As a developer on the agile team, Greg is beginning development on a task. Greg is at the task board and  must place the task card in the correct column of the task board to update everyone of its status. In which  column  should  Greg  place  the    task card?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Story points represent quality and value points represent value."
    }, {
      "option" : "B",
      "text" : "Story points represent cost and value points represent benefit."
    }, {
      "option" : "C",
      "text" : "Story points represent quality and value points  represent benefit."
    }, {
      "option" : "D",
      "text" : "Story points represent story value and value points represent product value."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In general, story points can be considered as the cost of developing a user story, while value points can be considered as the benefit of developing a user story. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "In general, how can story points and value points be considered?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Task board plan"
    }, {
      "option" : "B",
      "text" : "Communication plan"
    }, {
      "option" : "C",
      "text" : "Rolling wave or rolling look ahead plan"
    }, {
      "option" : "D",
      "text" : "Work plan"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In large, complex projects, agile project leaders can facilitate iteration planning by using a rolling wave or rolling look ahead plan, which involves making plans for the next few iterations at a time. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "What technique can an agile project manager use for planning in complex projects?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The project vision"
    }, {
      "option" : "B",
      "text" : "The  release and iteration vision"
    }, {
      "option" : "C",
      "text" : "The milestone exit criteria"
    }, {
      "option" : "D",
      "text" : "The product vision"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In release planning, the agile project manager discusses the product vision with the development team in detail. This ensures that the proper requirements, acceptance criteria, and priorities are established. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "As project manager, David needs to facilitate a release plan meeting. What should David share and discuss in detail with the project team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "33%"
    }, {
      "option" : "B",
      "text" : "200%"
    }, {
      "option" : "C",
      "text" : "300%"
    }, {
      "option" : "D",
      "text" : "-50%"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $30,000;  Cost: $10,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By isolating team members so that they may focus on  developing code without interruption."
    }, {
      "option" : "B",
      "text" : "By reviewing customer feedback at the end of a project."
    }, {
      "option" : "C",
      "text" : "By using software techniques that are outdated but functional."
    }, {
      "option" : "D",
      "text" : "By keeping up with industry developments in technology."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Agile project management places strong emphasis on 'continuous improvement.' Continuous improvement processes are built into the agile methodology, from customers providing feedback after each iteration to the team reserving time to reflect on its performance through retrospectives after each iteration. Ongoing unit   and integration testing and keeping up with technological/industry developments also play a part in the continuous improvement process. Continuous improvement is also a key principle in the lean methodology, where a focus of removing waste from the value stream is held. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "How  might an  agile team continuously improve?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Immediately establishing a daily standup where team members are told their roles."
    }, {
      "option" : "B",
      "text" : "Holding a retrospective where the project leader can assign roles to team members."
    }, {
      "option" : "C",
      "text" : "Taking the team out for lunch so that members can get to  know one another and establish trust."
    }, {
      "option" : "D",
      "text" : "Calling a meeting where the project leader can assign preliminary tasks to the team."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The BEST answer is taking the team out to lunch for bonding and trust building. The other responses include behaviors atypical of a high performance team (i.e., project   leader controlling and directing too much rather than letting the self-organizing team manage itself). [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "For a new agile project team, what is a good next step for building a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Bring up the issue in the project retrospective."
    }, {
      "option" : "B",
      "text" : "Extend the meeting to make up for lost time."
    }, {
      "option" : "C",
      "text" : "Trust that as a self-organizing team, it will notice the issue and correct the problem."
    }, {
      "option" : "D",
      "text" : "Cancel the meeting."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A high-performance, self- organizing team should realize and correct the disruptive behavior. [Coaching Agile Teams. Lyssa Adkins.] [Communications]"
    },
    "question" : "During the daily scrum, Joseph, the scrum master, notices that  several team members are holding disruptive side conversations. What should Joseph do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "MoSCoW"
    }, {
      "option" : "B",
      "text" : "Cano"
    }, {
      "option" : "C",
      "text" : "WIDETOM"
    }, {
      "option" : "D",
      "text" : "Cannon"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "An agile team must always  face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high-value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms  of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk,   a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a method used in agile for the purpose of prioritization."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Kano"
    }, {
      "option" : "B",
      "text" : "Cano"
    }, {
      "option" : "C",
      "text" : "Cannon"
    }, {
      "option" : "D",
      "text" : "Agile"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the  MoSCoW  or  Kano  method   and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Becky and her agile team have just performed decomposition on several user stories and wants to prioritize them. What common technique might she and her team use to prioritize the user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "4 hours"
    }, {
      "option" : "B",
      "text" : "8 hours"
    }, {
      "option" : "C",
      "text" : "16 hours"
    }, {
      "option" : "D",
      "text" : "24 hours"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In the agile framework scrum, sprint   planning   and   sprint    review meetings are often timeboxed at four hours. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "What is  a typical scrum timebox value for a sprint review meeting?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Honored team"
    }, {
      "option" : "B",
      "text" : "Empowered team"
    }, {
      "option" : "C",
      "text" : "Integrated team"
    }, {
      "option" : "D",
      "text" : "Certified team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. This is the antithesis to the classic viewpoint of the traditional project manager who is seen as someone that controls all decisions and delegates tasks to a team with little feedback. An agile  team  must  include  all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer is closely integrated  with the agile team with collocation/on-site support being ideal. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What type of team uses collaboration to solve problems and decides on the path forward?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Chances of project success are inversely related to stakeholder involvement."
    }, {
      "option" : "B",
      "text" : "Chances of project success are independent of stakeholder involvement."
    }, {
      "option" : "C",
      "text" : "Chances of project success are greatly improved with engaged stakeholders."
    }, {
      "option" : "D",
      "text" : "Chances of project success are greatly   reduced   with engaged stakeholders."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Stakeholder  management  is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need   to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach.  9)  We  engage  with    both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ethan as project leader, has been discussing the importance of 'stakeholder management' with his team. Why is stakeholder management so important?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Change through value stream mapping"
    }, {
      "option" : "B",
      "text" : "Change though  process improvement"
    }, {
      "option" : "C",
      "text" : "Change for the better"
    }, {
      "option" : "D",
      "text" : "Change through the elimination of waste"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Japanese word 'kaizen' means  change  for  the  better.  [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "The general translation of the lean term 'Kaizen' is"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Exploring"
    }, {
      "option" : "B",
      "text" : "Closing"
    }, {
      "option" : "C",
      "text" : "Envisioning"
    }, {
      "option" : "D",
      "text" : "Planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile project management phases, in sequence, are: Envisioning, speculating, exploring, adapting, closing. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a phase of Highsmith's agile project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Test driven  development (TDD)"
    }, {
      "option" : "B",
      "text" : "Defect driven  development (3D)"
    }, {
      "option" : "C",
      "text" : "Feature  driven  development (FDD)"
    }, {
      "option" : "D",
      "text" : "Acceptance test  driven development (ATDD)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Feature driven development (FDD)    uses    a    prescriptive  model where the software development process is planned, managed, and tracked from the perspective of individual software features. FDD uses short iterations of two weeks or less to develop a set amount of features. The five step FDD process is: 1. Develop overall model; 2. Create the features list; 3. Plan by feature; 4. Design by feature; 5 Build by feature. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Stella and her team are using a framework where the team follows a prescriptive development process that plans and manages from the perspective of the product features. Which framework is Stella's team incorporating into its agile effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Closing, adapting, exploring, speculating, envisioning"
    }, {
      "option" : "B",
      "text" : "Planning, executing, initiating, monitoring and controlling, closing"
    }, {
      "option" : "C",
      "text" : "Envisioning, speculating, exploring, adapting, closing"
    }, {
      "option" : "D",
      "text" : "Envisioning, exploring, speculating, adapting, closing"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The agile project  management phases, in sequence of introduction, are: Envisioning, speculating, exploring, adapting, closing. It is important to note that these phases can occur simultaneously and iteratively. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Paul is explaining the agile project management method to his superiors. He must describe the phases of agile project management. Which response has the correct sequence of agile phases   as   typically   introduced    by Highsmith?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Initiating, planning, executing, monitoring and controlling, closing"
    }, {
      "option" : "B",
      "text" : "Closing, planning, initiating, executing, monitoring and controlling"
    }, {
      "option" : "C",
      "text" : "Initiating, planning, executing, closing, monitoring and controlling"
    }, {
      "option" : "D",
      "text" : "Planning, executing, initiating, monitoring and controlling, closing"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The traditional project management phases are typically introduced in the following sequence: Initiating, planning, executing, monitoring and controlling, and closing.  It  is  important  to  note   that monitoring and controlling happen concurrently and throughout the  project life-cycle with other phases. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the response that has the traditional project management phases in the proper sequence (as typically introduced)."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "An WIDETOM analysis technique"
    }, {
      "option" : "B",
      "text" : "A  priority-based  analysis technique"
    }, {
      "option" : "C",
      "text" : "A  constraints-based analysis technique"
    }, {
      "option" : "D",
      "text" : "A  value-based analysis technique"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are often prioritized with prioritization based on value and risk. Prioritization can be performed   using   the   MoSCoW   or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Bart is using a cost-to-value matrix technique to understand the value of each feature in the eyes of the customer. What is a cost-to-value matrix an example of?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mechanizing"
    }, {
      "option" : "B",
      "text" : "Crowdsourcing and mentoring"
    }, {
      "option" : "C",
      "text" : "Symptom and solution"
    }, {
      "option" : "D",
      "text" : "Coaching and mentoring"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile    has    a    value    of  continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile      Teams.      Lyssa      Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Wendy is  concerned with  the recent  stagnant  performance of  her agile team. She believes it to be highly capable but stuck in a rut. What agile knowledge and skill technique might Wendy consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Facilitation method"
    }, {
      "option" : "B",
      "text" : "Asymmetric method"
    }, {
      "option" : "C",
      "text" : "Capitulation method"
    }, {
      "option" : "D",
      "text" : "Prescriptive method"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "As a project leader or scrum master, effective facilitation methods are critical for building a high- performance and motivated team. Facilitation of meetings, discussions, demonstrations, etc., is a constant on an agile project. Some general facilitation methods include: using a small number of people for brainstorming events; hosting  events in a non-threatening/comfortable environment; having an agenda that is shared with the group ahead of time; using open-ended questions instead  of closed-ended questions; including a diverse representation to gain a broader perspective of the topic.  [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Peter is a project leader for an agile project. He makes sure that his team always has a non-threatening environment when it needs to brainstorm. The use of a nonthreatening environment is a..."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Both are used  as  financial metrics."
    }, {
      "option" : "B",
      "text" : "Both are used  as  refactoring metrics."
    }, {
      "option" : "C",
      "text" : "Both are used  as  reflection metrics."
    }, {
      "option" : "D",
      "text" : "Both are used  as  sprint metrics."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which   is   a   dollar   amount   (i.e.,   a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative  market rate is 2%. The IRR being larger than the comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "How are NPV and IRR similar?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Separation"
    }, {
      "option" : "B",
      "text" : "Collocation"
    }, {
      "option" : "C",
      "text" : "Isolation"
    }, {
      "option" : "D",
      "text" : "Sequestering"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In agile, effective   'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient    and    effective    method  of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "From the following, select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Make-up WIP"
    }, {
      "option" : "B",
      "text" : "Mirroring"
    }, {
      "option" : "C",
      "text" : "Mistake"
    }, {
      "option" : "D",
      "text" : "Motion"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value stream mapping is a lean manufacturing analysis technique adopted by agile. A value stream   map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities   for   process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste within the process. Processes that add value (processing of a part   or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to identify areas of waste that exist in the process. The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the M in WIDETOM stand for with respect  to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Space  for daily stand-up meetings"
    }, {
      "option" : "B",
      "text" : "Separation of  team  members by function"
    }, {
      "option" : "C",
      "text" : "Isolation of team members"
    }, {
      "option" : "D",
      "text" : "Rotation of team members"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication,      innovation,      and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction   of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important place that should foster effective communication. What is a guideline for promoting such an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sub-tasking"
    }, {
      "option" : "B",
      "text" : "Sub-functioning"
    }, {
      "option" : "C",
      "text" : "Decomposition"
    }, {
      "option" : "D",
      "text" : "Subdivision"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user   stories   into   more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is the process called when an agile team subdivides user stories into manageable tasks?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The amount of story points remaining to complete in an iteration."
    }, {
      "option" : "B",
      "text" : "The amount of remaining use stories to decompose in a release."
    }, {
      "option" : "C",
      "text" : "The amount of defects identified to date in a release."
    }, {
      "option" : "D",
      "text" : "The amount of story points that will be completed in a project in a worst-case scenario."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A risk-based burnup chart tracks targeted and actual product delivery progress and also includes estimates of how likely the team is to achieve targeted value adjusted for risk. Typically, risk is shown as   three different levels: best-case; most likely; and worst-case. For example, if you have a 10 iteration project and the team's current velocity is 10 story points, you can portray the chance of completing 100 story points (most likely case), the chance of completing 80 story points (worst-case), and the chance of completing 120 story points (best-case). In this way, the stakeholders get a feel for the range of risk. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "What is one piece of information a stakeholder can review using a risk-based burnup chart?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "General service for the initial phase with fixed-price contracts for successive phases; fixed- price; not-to-exceed with fixed- fee"
    }, {
      "option" : "B",
      "text" : "General service for the initial phase with fixed-price contracts for successive phases; cost- reimbursable/time and materials; not-to-exceed with fixed-fee"
    }, {
      "option" : "C",
      "text" : "General service for the initial phase with fixed-price contracts for successive phases; cost- reimbursable/time and materials; fixed-price"
    }, {
      "option" : "D",
      "text" : "Fixed-price; cost- reimbursable/time and materials; not-to-exceed with fixed-fee"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Fixed-price contracts, although typical  of  traditional  projects   where scope is defined ahead of time, are not well suited for agile. When scope is fixed it can deter a team from exploring out-of-scope solutions that may add value to the product. Contracts suited for agile include: general service for the initial phase with fixed-price contracts for successive phases; cost-reimbursable/ time and materials; not-to-exceed with fixed-fee; and a combination with incentives. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Terry is currently negotiating the type of contract for her agile project with the customer's financial representative. What types of contracts are suitable for agile efforts?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Courage"
    }, {
      "option" : "B",
      "text" : "Honesty"
    }, {
      "option" : "C",
      "text" : "Confident"
    }, {
      "option" : "D",
      "text" : "Collaboration"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a community value per the  PMI agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Quality"
    }, {
      "option" : "B",
      "text" : "Integrity"
    }, {
      "option" : "C",
      "text" : "Value"
    }, {
      "option" : "D",
      "text" : "Model"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile and doing agile. Being agile includes  focusing  on  cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "According to Highsmith and his definition of adaptive leadership, what is one item a project leader can focus on for 'doing agile?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Total scope diagram"
    }, {
      "option" : "B",
      "text" : "Cumulative flow diagram"
    }, {
      "option" : "C",
      "text" : "Lean flow diagram"
    }, {
      "option" : "D",
      "text" : "Total flow diagram"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Like burnup charts, cumulative flow diagrams are information radiators that can track progress for agile projects. CFDs differ from traditional burnup charts because  they convey total scope (not started, started, completed) of the entire backlog. Tracked items can be features, stories, tasks, or use cases. By tracking total scope, CFDs communicate absolute progress and give a proportional sense of project progress (e.g., On Day 14: 15% of features have been completed; 15% have been started; and, 70% have not been started). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "What information radiator, similar to a burnup chart, can be used on an agile project to show total scope of items in the backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Lean"
    }, {
      "option" : "B",
      "text" : "Crystal"
    }, {
      "option" : "C",
      "text" : "Scrum"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Scrum is a framework  that strives to facilitate the development of complex products quickly and efficiently, the adaptation of changing requirements, the delivery of working products incrementally. Scrum development includes three major phases: pre-game, game, and post- game. Scrum emphasizes the use of product and sprint backlogs, iterative development (termed 'sprints'), daily stand-up meetings (termed 'scrums'), sprint reviews (demos) and reflection, and the use of information radiators such as task boards and burndown charts. [Ken Schwaber. Agile Project Management with Scrum. Chapter 1.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Kyle is using a popular agile framework that emphasizes the user of information radiators such as task boards and burndown charts and includes three major phases: pre-game, game,      and      post-game. Which framework is Kyle most likely using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme  programming, extreme rotation"
    }, {
      "option" : "B",
      "text" : "Couple programming, couple rotation"
    }, {
      "option" : "C",
      "text" : "Pare programming,  pare rotation"
    }, {
      "option" : "D",
      "text" : "Pair programming,  pair rotation"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection,   and   on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "From the following, select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Brainstorming management"
    }, {
      "option" : "B",
      "text" : "Stakeholder management"
    }, {
      "option" : "C",
      "text" : "Teamwork management"
    }, {
      "option" : "D",
      "text" : "Collaborating management"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships    ourselves    rather  than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need    to    generalize    the  marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What topic area within strategic management helps with the facilitation of a collaborative environment where stakeholders are heavily involved in a project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Creative"
    }, {
      "option" : "B",
      "text" : "Collaboration"
    }, {
      "option" : "C",
      "text" : "Customer-oriented"
    }, {
      "option" : "D",
      "text" : "Confirmation"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Ron Jeffries' three Cs for  user story definition are card, conversation, confirmation. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Select the response that holds one of Ron Jeffries three Cs used to help define user stories."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collaboration"
    }, {
      "option" : "B",
      "text" : "Honesty"
    }, {
      "option" : "C",
      "text" : "Trust"
    }, {
      "option" : "D",
      "text" : "Weary"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management   Institute.]   [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses,  which is NOT a community value per the  PMI agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Card,  collaboration, conformance"
    }, {
      "option" : "B",
      "text" : "Card,  collaboration, confirmation"
    }, {
      "option" : "C",
      "text" : "Card,  conversation, confirmation"
    }, {
      "option" : "D",
      "text" : "Collaboration, conformance, configurable"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Ron Jeffries' three Cs for user story definition are card, conversation, confirmation. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "What do the three Cs mean     with respect to user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Trust"
    }, {
      "option" : "B",
      "text" : "Collected"
    }, {
      "option" : "C",
      "text" : "Careful"
    }, {
      "option" : "D",
      "text" : "Commandeering"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage,     Openness,     Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Conversation"
    }, {
      "option" : "B",
      "text" : "Collaboration"
    }, {
      "option" : "C",
      "text" : "Collection"
    }, {
      "option" : "D",
      "text" : "Customer-focused"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Ron Jeffries' three Cs for user story definition are card, conversation, confirmation. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Select the response that holds one of Ron Jeffries three Cs used to help define user stories."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Competitiveness"
    }, {
      "option" : "B",
      "text" : "Introversion"
    }, {
      "option" : "C",
      "text" : "Intuitiveness"
    }, {
      "option" : "D",
      "text" : "Self determination"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Higgs & Dulewicz (1999) defines   emotional   intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4) Interpersonal sensitivity, 5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. What is one of the seven components of emotional intelligence as defined by Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cost acquisition system"
    }, {
      "option" : "B",
      "text" : "Complex adaptive system"
    }, {
      "option" : "C",
      "text" : "Constructive adaptive simulation"
    }, {
      "option" : "D",
      "text" : "Complex accrual system"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A complex adaptive system, or CAS, is a system composed of interacting, adaptive agents or components. The term is used in agile to remind practitioners that the development of a product is adaptive  in that previous interactions, events, decisions   influence   future  behavior. The term chaordic (a made up word blending chaotic and order) is sometimes used when describing CASs. Literature points to three key characteristics of chaordic projects: alignment and cooperation, emergence and self-organization, and learning and adaptation.  [Agile   Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Randy always likes to remind himself that the agile software project he is working on is like a CAS. What does CAS stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Comprehensive documentation"
    }, {
      "option" : "B",
      "text" : "Following a plan"
    }, {
      "option" : "C",
      "text" : "Individuals and interactions"
    }, {
      "option" : "D",
      "text" : "Contract negotiation"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary   values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Which response lists one of its primary values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Conceding"
    }, {
      "option" : "B",
      "text" : "Controlling"
    }, {
      "option" : "C",
      "text" : "Collaboration"
    }, {
      "option" : "D",
      "text" : "Compromise"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Key soft skills negotiation qualities for the effective implementation  and  practice  of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To update the obstacle information radiator."
    }, {
      "option" : "B",
      "text" : "To communicate with the team obstacles that collectively it may be able to resolve."
    }, {
      "option" : "C",
      "text" : "To provide rationale for project delays and false starts."
    }, {
      "option" : "D",
      "text" : "To place blame and let upper management know where inefficiencies exist."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The key characteristics of a healthy stand-up meeting include: peer pressure - the team is dependent upon each other so expectations of peers drives progress; fine-grained coordination - the team should understand the necessity for focus and working dependently; fine focus - the team  should  understand  the  need for brevity in the stand-up meeting so the team can be productive; daily commitment - the team should understand the value of daily commitments to each other and uphold those commitments; identification of obstacles - the team collectively  should be aware of each other's obstacles so that the team collectively can try to resolve them. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "Why does an agile practitioner during a stand-up meeting state current obstacles to project progress?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "2nd"
    }, {
      "option" : "B",
      "text" : "1st"
    }, {
      "option" : "C",
      "text" : "4th"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and apply the test, 4) Refactor the product code. An example may be that a user has to enter an age value.  A good test is to make sure the user data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would verify that entering a letter instead of a number would cause the program to cause an exception (i.e., v&v the test). The programmer would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product code is successful, the programmer would refactor  the product code to improve its design. Using these four steps iteratively ensures that programmers think   about how a software program might fail first and to build product code that is holistically being tested. This helps produce high quality code. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Xavier has just written production code and applied a test as part of the four step process of TDD; What step is Xavier performing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Personnel loss"
    }, {
      "option" : "B",
      "text" : "Configuration management"
    }, {
      "option" : "C",
      "text" : "Release management"
    }, {
      "option" : "D",
      "text" : "Version management"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The five core risk areas include: productivity variation (difference between planned and actual performance);       scope    creep (considerable additional requirements beyond initial     agreement); specification breakdown (lack of stakeholder    consensus      on requirements);  intrinsic  schedule flaw (poor estimates of task durations), personnel loss (the loss of human resources). [The Software Project Manager's Bridge to Agility. Michele Sliger, Stacia Broderick.] [Risk management]"
    },
    "question" : "Select the response that lists one of the five core risk areas that can impact a project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Milestones"
    }, {
      "option" : "B",
      "text" : "Work breakdown structure"
    }, {
      "option" : "C",
      "text" : "Product version"
    }, {
      "option" : "D",
      "text" : "Configuration plan"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Business case development is an important initial step in agile project management. The business case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment   and   expected return/payback. A business case articulates the why and how a   project will deliver value to a customer. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In agile,  a business  case  should include which of the following topics?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Configuring unit testing plans"
    }, {
      "option" : "B",
      "text" : "Helping developers to overcome obstacles, managing team interactions with product owners, customers, and stakeholders"
    }, {
      "option" : "C",
      "text" : "Authoring feature breakdown documentation"
    }, {
      "option" : "D",
      "text" : "Measuring task progress against task schedule"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "When conducting the exploring phase, project leaders assist developers by removing any obstacles or constraints that my impeded progress, and managing interaction with product owners, customers, and other stakeholders. [Agile Project Management: Creating Innovative Products      Ð      2nd      Edition.    Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "During the exploring phase of Highsmith's agile project management model, what goals do agile project leaders have?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Confirms the product meets specifications and requirements."
    }, {
      "option" : "B",
      "text" : "Helps ensure quality."
    }, {
      "option" : "C",
      "text" : "Confirms the product meets user needs."
    }, {
      "option" : "D",
      "text" : "Performed frequently."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need).  Sometimes  a  product  may  be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "Pick the response which is NOT a characteristic of the agile verification process."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A normal distribution"
    }, {
      "option" : "B",
      "text" : "A sigma distribution"
    }, {
      "option" : "C",
      "text" : "A skewed distribution"
    }, {
      "option" : "D",
      "text" : "A theta distribution"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Control limits - those which set an objective range to indicate whether a process is controlled or stabilized or defect free (e.g., within three sigmas of the mean) - may be used in an agile project. Generally, a control limit of three-sigma (s) is used on a Shewhart control  chart.  A  sigma  refers  to one standard deviation. So three sigmas indicates a limit three standard deviations away from the mean in both the positive and negative direction. This applies to normal data, where a normal distribution curve has been obtained. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 3]"
    },
    "question" : "When using three-sigma as a control limit range, what characteristic must the underlying data have?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Conflict assessment"
    }, {
      "option" : "B",
      "text" : "Conflict identification"
    }, {
      "option" : "C",
      "text" : "Conflict resolution"
    }, {
      "option" : "D",
      "text" : "Conflict validation"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are:          emotional          intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Select from the following a key soft skill negotiation quality."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1, 3, 5, 7, 9, 11, 13"
    }, {
      "option" : "B",
      "text" : "0, 1, 2, 3, 5, 8, 13"
    }, {
      "option" : "C",
      "text" : "0, 3, 7, 11, 15, 17, 21"
    }, {
      "option" : "D",
      "text" : "0, 1, 1, 2, 4, 8, 16"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Fibonacci sequence begins with 0 and 1 and every successive number is the sum of the previous two numbers. Therefore the Fibonacci sequence begins 0, 1, 1, 2, 3, 5, 8, 13, etc. In planning poker, a 1 is removed because it is redundant. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "In planning poker, a modified Fibonacci sequence is often used for the playing card values. Which of   the following sequences is the beginning of the modified Fibonacci sequence used for planning poker?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Confront the customer representative."
    }, {
      "option" : "B",
      "text" : "Confront Michael's project manager's boss."
    }, {
      "option" : "C",
      "text" : "Report the unethical and illegal conduct to the appropriate parties."
    }, {
      "option" : "D",
      "text" : "Confront his project manager."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The PMI Code of Ethics and Professional Conduct states that it is mandatory for a project manager to: inform yourself about and uphold the policies, rules, regulations, and laws that govern your work, including professional and volunteer activities; report unethical or illegal conduct to appropriate parties and, if necessary, to those affected by the misconduct; ensure that any allegations of misconduct or illegal activity are substantiated and file only complaints that are supported by facts; never take part or help someone else take part in illegal activities. [PMI Code of Ethics and    Professional    Conduct.   Project Management Institute.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Michael, in his review of  estimated user story points for the upcoming iteration, finds that the project  manager is artificially inflating the user story points to significantly lengthen the project period of performance in order to increase project revenue. It is a time and material contract and lengthening the period of performance would help boost Michael's parent company's profit. What should Michael do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adaptive leadership"
    }, {
      "option" : "B",
      "text" : "Agile leadership"
    }, {
      "option" : "C",
      "text" : "Constant leadership"
    }, {
      "option" : "D",
      "text" : "Collaborative leadership"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Release planning."
    }, {
      "option" : "B",
      "text" : "Definition of  the product vision"
    }, {
      "option" : "C",
      "text" : "Exploratory 360."
    }, {
      "option" : "D",
      "text" : "Iteration planning"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development.   James   Shore.]  [Agile analysis and design]"
    },
    "question" : "What typically occurs directly after an agile team and product owner build an initial product roadmap?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project risk and accompanying mitigation strategies"
    }, {
      "option" : "B",
      "text" : "Project schedule"
    }, {
      "option" : "C",
      "text" : "Constraints and quality drivers"
    }, {
      "option" : "D",
      "text" : "Project vision and scope"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The focus in the speculation phase is on estimating iteration and release plans, defining feature breakdown, developing a rough project plan, considering project risk and risk mitigation strategies, and estimating project costs. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "You are working on an agile team that's developing software for a major shipping company. The team has just entered Highsmith's agile project management speculation phase after completing the envisioning phase. In addition to estimating project costs, what else should be considered?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Continuous planning with the expectation that velocity will increase progressively as the project progresses."
    }, {
      "option" : "B",
      "text" : "Continuous planning with the expectation that story point values will decrease in relation to the steep learning curve of developers."
    }, {
      "option" : "C",
      "text" : "Continuous planning with the expectation that plans and details will inevitably change but become    more    refined    as  the project progresses."
    }, {
      "option" : "D",
      "text" : "Continuous planning with the expectation that estimates of task time will become more progressive as the project evolves."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Progressive elaboration is continuous planning with the expectation that project plans and details will change but become more refined as the project progresses. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Select  the response  that  best defines progressive elaboration."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Comprehensive documentation"
    }, {
      "option" : "B",
      "text" : "Processes and tools"
    }, {
      "option" : "C",
      "text" : "Responding to change"
    }, {
      "option" : "D",
      "text" : "Contract negotiation"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation,  3) customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Of the following, which response lists one of its primary values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Appropriate  processes and tools aid the development process"
    }, {
      "option" : "B",
      "text" : "Documentation supports working software and appropriate processes and tools aid the development process"
    }, {
      "option" : "C",
      "text" : " Products work  as intended because of frequent delivery iterations"
    }, {
      "option" : "D",
      "text" : " Contracts need  to  be negotiated and plans followed"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The agile secondary values include: documentation of software, processes and tools, contract negotiation, and following project plans. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a secondary agile value per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "There is no difference."
    }, {
      "option" : "B",
      "text" : "Actor descriptions will use photographs to provide further context and define several different people for one type of user, whereas persona descriptions typically are generic and concise."
    }, {
      "option" : "C",
      "text" : "Actor descriptions are typically much more detailed than persona descriptions."
    }, {
      "option" : "D",
      "text" : "Persona descriptions will use photographs to provide further context and define several different people for one type of user, whereas actor descriptions typically are generic and concise."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A persona is a notional user of the system under development. Being much more detailed than actors in use case modeling where generic user names are assigned (e.g., end user), personas try to elaborate on users with detailed descriptions to  provide context to the developers. Some personas have such notional details as name, address, age, income, likes and dislikes, and other specific details. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "How do  actors  - of  use case modeling  - and personas  - of  agile modeling - differ?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Serial"
    }, {
      "option" : "B",
      "text" : "Cooperative"
    }, {
      "option" : "C",
      "text" : "Active"
    }, {
      "option" : "D",
      "text" : "Collaborative"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "One communication  technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills.  [Coaching  Agile  Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "While Bernard is discussing to Stephanie his take on the most prominent risks the project is facing, Stephanie paraphrases what Bernard is saying  to  confirm  her  interpretation. What  type  of  listening technique is Lisa using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Seat by team member function"
    }, {
      "option" : "B",
      "text" : "Have plants, natural lighting, and comfortable seating available"
    }, {
      "option" : "C",
      "text" : "Have yearly, individual performance reviews"
    }, {
      "option" : "D",
      "text" : "Minimize team  member interaction"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily   stand-up   meeting   and    other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "What can an agile team do to foster an  innovative, collaborative,  and comfortable team space?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cost performance index"
    }, {
      "option" : "B",
      "text" : "Correlated performance indicator"
    }, {
      "option" : "C",
      "text" : "Cost performance indicator"
    }, {
      "option" : "D",
      "text" : "Cost parametric index"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value   (EV),   Cost   Variance   (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does CPI stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Raw data organized into information to show data access and modification dates."
    }, {
      "option" : "B",
      "text" : "A highly detailed section of the agile project management waterfall plan."
    }, {
      "option" : "C",
      "text" : "A schema for organizing information into related datum."
    }, {
      "option" : "D",
      "text" : "A visual representation of project-related data to illustrate project status."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An information radiator is a visual representation of project status data. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select the response that defines an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Productivity variation"
    }, {
      "option" : "B",
      "text" : "Cost variation"
    }, {
      "option" : "C",
      "text" : "Budget variation"
    }, {
      "option" : "D",
      "text" : "Schedule variation"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The five core risk areas include: productivity variation (difference    between    planned     and actual performance); scope creep (considerable additional requirements beyond initial  agreement); specification breakdown (lack of stakeholder    consensus   on requirements); intrinsic schedule flaw (poor estimates of task durations), personnel loss (the loss of human resources). [The Software Project Manager's Bridge to Agility. Michele Sliger, Stacia Broderick.] [Risk management]"
    },
    "question" : "Select the response that lists one of the five core risk areas that can impact a project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Value, cost, constraints"
    }, {
      "option" : "B",
      "text" : "Schedule, scope, constraints"
    }, {
      "option" : "C",
      "text" : "Value, quality, constraints"
    }, {
      "option" : "D",
      "text" : "Cost, quality, value"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The agile triangle includes value, quality, and constraints as its parameters.  [Agile   Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Erica is working for a kitchen tools manufacturing project, which is intended to make modern cooking ovens. This project is very important for the company as well as for Erica's career. In an effort to articulate agile best practices to upper management, which three parameters of the agile triangle will Erica emphasize?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Actual cost"
    }, {
      "option" : "B",
      "text" : "Average cost"
    }, {
      "option" : "C",
      "text" : "Analysis cost"
    }, {
      "option" : "D",
      "text" : "Abbreviated cost"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance      Index      (CPI),     and Schedule Performance Index (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does AC stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cost-to-schedule matrix"
    }, {
      "option" : "B",
      "text" : "Cost-to-value matrix"
    }, {
      "option" : "C",
      "text" : "Cost-to-constraint matrix"
    }, {
      "option" : "D",
      "text" : "Cost-to-risk matrix"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or   user   stories/features   in   terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value  linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-Agile Software Development:   Achieving responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self-disciplined; empowering the team   members   to   make    decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to  adapt  the  leadership  style  to   the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a method that is commonly used to help prioritize user stories."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Empowered teams take responsibility of the product and thus have a strong focus on delivering value."
    }, {
      "option" : "B",
      "text" : "Empowered   teams   remove themselves from  being responsible of product quality in order to reduce association with project failure."
    }, {
      "option" : "C",
      "text" : "Empowered teams need extensive management involvement in order to understand customer need"
    }, {
      "option" : "D",
      "text" : "Empowered teams adapt slowly to changing requirements and therefore can reduce scope- creep risk."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams.   Lyssa   Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Why is an empowered team considered an important team attribute in agile?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Setting  up  an  e-mail distribution list"
    }, {
      "option" : "B",
      "text" : "Setting  up  an  internal memorandum system"
    }, {
      "option" : "C",
      "text" : "Setting up a virtual team room"
    }, {
      "option" : "D",
      "text" : "Setting  up  a fax machine system"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially   on   a   world-wide    scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is one method that can be used to improve communication for a team that cannot be collocated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Customer"
    }, {
      "option" : "B",
      "text" : "Business analyst"
    }, {
      "option" : "C",
      "text" : "Product owner"
    }, {
      "option" : "D",
      "text" : "Project leader"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile    team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative    and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the   agile   values   and   principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'empowers the team to be self-organized and self-disciplined?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Couple programming"
    }, {
      "option" : "B",
      "text" : "Pare programming"
    }, {
      "option" : "C",
      "text" : "Pair programming"
    }, {
      "option" : "D",
      "text" : "Duo programming"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up     meetings,    iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed     Sidky.]     [Knowledge   and Skills: Level 1]"
    },
    "question" : "Select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SV = EV - PV"
    }, {
      "option" : "B",
      "text" : "SV = BAC - AC"
    }, {
      "option" : "C",
      "text" : "SV = PV - EV"
    }, {
      "option" : "D",
      "text" : "SV = BAC - PV"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). SV is the difference between what a project has earned to date and what   it was planned to earn to date (i.e., SV = EV - PV). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. How is  SV calculated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Courage"
    }, {
      "option" : "B",
      "text" : "Humble"
    }, {
      "option" : "C",
      "text" : "Openness"
    }, {
      "option" : "D",
      "text" : "Honesty"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is NOT a community value per the  PMI   agile   community   of    practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The decomposition of iterations into intervals that are in turn prioritized by value."
    }, {
      "option" : "B",
      "text" : "The decomposition of story points into intervals that are in turn prioritized by value."
    }, {
      "option" : "C",
      "text" : "The decomposition of user stories into tasks that are in turn prioritized by value."
    }, {
      "option" : "D",
      "text" : "The  decomposition  of release plans into  intervals that  are in turn prioritized by value."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user   stories   into   more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of  value-based decomposition and prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collaboration"
    }, {
      "option" : "B",
      "text" : "Card"
    }, {
      "option" : "C",
      "text" : "Creative"
    }, {
      "option" : "D",
      "text" : "Customer-driven"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Ron Jeffries' three Cs for user story definition are card, conversation, confirmation. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Select the response that holds one of Ron Jeffries three Cs used to help define user stories."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Square root  of  the sum of squares"
    }, {
      "option" : "B",
      "text" : "Square of the sum of squares"
    }, {
      "option" : "C",
      "text" : "Critical chain project management method (CCPM)"
    }, {
      "option" : "D",
      "text" : "Halving the sum of most likely estimates"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The agile practitioner should follow several rules of thumb when estimating a project buffer: 1) Only use a buffer if the project has more than 10 user stories, 2) The square root of the sum of squares method has shown to provide the most accurate buffer, 3) the estimate buffer should be at least 20% of the total project duration, 4) In the absence  of sufficient data. like worst case  scenario estimates, you can use the halving of most likely estimates to estimate a project buffer. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Of the three project buffer methods - square root of the sum of squares, critical chain project management method (CCPM), and halving the sum of most likely estimates - which typically provides the most adequate buffer"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Motivating the team"
    }, {
      "option" : "B",
      "text" : "Criticizing the team"
    }, {
      "option" : "C",
      "text" : "Restructuring the team"
    }, {
      "option" : "D",
      "text" : "Working the team"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked  on  jobs  well  done  and  also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jules, as an agile mentor, has been encouraging the team to spend some quality time together to build a sense of community. What is Jules doing when he provides this mentoring?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Affinity estimating"
    }, {
      "option" : "B",
      "text" : "Planning game"
    }, {
      "option" : "C",
      "text" : "Planning poker"
    }, {
      "option" : "D",
      "text" : "SMART"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product   backlogs.   Although  several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "What agile estimation technique is sometimes conducted in silence and particularly useful for quickly estimating the relative work effort of large product backlogs?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Crystal"
    }, {
      "option" : "B",
      "text" : "FDD"
    }, {
      "option" : "C",
      "text" : "Scrum"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "XP is generally considered to be the originator of user stories.  [User Stories Applied: For Agile Software Development. Mike Cohn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "User stories are a common artifact across many agile frameworks. Which framework can generally be credited with their origin?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Hasty"
    }, {
      "option" : "B",
      "text" : "Servant Leadership"
    }, {
      "option" : "C",
      "text" : "Curt"
    }, {
      "option" : "D",
      "text" : "Motivating"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Individuals and interactions"
    }, {
      "option" : "B",
      "text" : "Customer collaboration"
    }, {
      "option" : "C",
      "text" : "Responding to change"
    }, {
      "option" : "D",
      "text" : "Using working software as the primary measure of progress."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated  individuals.  Give  them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures,       requirements,      and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Working software"
    }, {
      "option" : "B",
      "text" : "Customer collaboration"
    }, {
      "option" : "C",
      "text" : "Responding to change"
    }, {
      "option" : "D",
      "text" : "Contract negotiation"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes    and    tools,    2)    working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Of the following, which response lists a secondary value?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Face-to-face communication whenever possible"
    }, {
      "option" : "B",
      "text" : "Delivering working software frequently"
    }, {
      "option" : "C",
      "text" : "Customer collaboration over contract negotiation"
    }, {
      "option" : "D",
      "text" : "Individuals  and interactions over processes and tools"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four values are: 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation,          3)         customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "Which of the following responses is NOT an Agile Manifesto value or principle regarding communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Theme parking garage"
    }, {
      "option" : "B",
      "text" : "Theme runway"
    }, {
      "option" : "C",
      "text" : "Story theme chart"
    }, {
      "option" : "D",
      "text" : "Parking lot chart"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A parking lot chart is an agile artifact used to organize and categorize user stories by theme. A parking lot chart typically includes the name  of the identified themes, the number of stories and story points it includes, and a progress chart to show the completion percentage of story  points. For example, a parking lot chart could have a theme of 'database' with 6 user stories worth 80 story points at a 50% completion. A 50% completion would indicate that 40 story points had been completed, but NOT necessarily that 3 stories had been completed because  not all stories are equivalent in effort. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Often times during release planning user stories are categorized and organized by theme. Which of the following agile artifact is often used to show organization and progress of user stories by theme?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extra time added to each time- boxed value for a task to account for delays, obstacles, and other unforeseen issues to help   predict an accurate project completion date."
    }, {
      "option" : "B",
      "text" : "Extra time added to the beginning of a project to account for team discovery"
    }, {
      "option" : "C",
      "text" : "Extra time added to the end of a project to account for delays, obstacles, and other unforeseen issues to help predict an accurate completion date."
    }, {
      "option" : "D",
      "text" : "Extra time added throughout a project to account for reflection workshops"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A project buffer is extra time added to the end of a project to account for delays, obstacles, and other unforeseen issues to help predict an accurate completion date. A project buffer can be estimated using several methods. Three commonly used methods are 1) square root of the sum of squares method, 2) Critical chain project management method  (CCPM), 3) halving the sum of most likely estimates. The square root of the sum of squares method involves finding a local safety for all tasks, squaring all the local safeties, summing these squares, and then finding the square root of the sum. The Critical chain project management method (CCPM) is the sum of half the local safeties of all tasks. The local safety is the difference between the  50% confidence   estimate   and   the    90% confidence estimate. The halving the sum of most likely estimates method involves adding all the most likely estimates and dividing by two. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What is a project buffer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The  net and gross work remaining"
    }, {
      "option" : "B",
      "text" : "The  actual  and ideal work remaining"
    }, {
      "option" : "C",
      "text" : "The estimated and ideal work remaining"
    }, {
      "option" : "D",
      "text" : "The  actual  and net work remaining"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A project burndown chart is an often used information radiator to show iteration progress. It charts two series: the actual work remaining and ideal/estimated work remaining. The vertical axis is the work unit (often story points or hours) and the horizontal axis is iteration duration (typically  in  number  of  days). The ideal/estimated work series is a straight, downward sloping line originating on the vertical axis at the value of work to be completed (e.g.,  20 story points) and extending to the horizontal axis (i.e., 0 story points) on the last day of the iteration. The actual series is dependent upon the agile team's productivity and the task complexity and is updated daily. The actual series is typically volatile and is not a straight line but ebbs and flows as the project team tackles the development process. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "On a burndown chart, two series are typically charted. Select the response that lists those two series (also referred to as lines)."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed unit of testing effort."
    }, {
      "option" : "B",
      "text" : "Dynamic unit of testing effort."
    }, {
      "option" : "C",
      "text" : "Dynamic unit of  development effort."
    }, {
      "option" : "D",
      "text" : "Fixed unit of development effort."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A story point is a fixed unit of development effort. It is used in the relative sizing of user stories to estimate work effort involved with development. Story points are not time-based, meaning  [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What is a story point?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Revenue retained through the development of new product features or services that prevent existing customers from stopping use of the existing product."
    }, {
      "option" : "B",
      "text" : "New revenue realized through the sales of products or services  to new customers."
    }, {
      "option" : "C",
      "text" : "Additional revenue realized through the sales of new product features or services to existing customers."
    }, {
      "option" : "D",
      "text" : "New revenue found in a hidden value stream."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Additional revenue is revenue realized through the sales of new product features or services to existing customers. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "In agile estimating  and planning, what is 'incremental' revenue?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A method to estimate time to market."
    }, {
      "option" : "B",
      "text" : "A method to estimate user story work effort."
    }, {
      "option" : "C",
      "text" : "A method to estimate customer reaction to product features."
    }, {
      "option" : "D",
      "text" : "Another name for planning poker."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product backlogs. Although several methods exist, the basic affinity estimating method involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development.   James   Shore.]  [Agile estimation]"
    },
    "question" : "What is affinity estimating?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using both estimate methods simultaneously in a project."
    }, {
      "option" : "B",
      "text" : "Using ideal days too early in a project"
    }, {
      "option" : "C",
      "text" : "Forgetting to  convert both methods into story velocity for   a common basis of estimation"
    }, {
      "option" : "D",
      "text" : "Using story points too early in a project"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Agile teams should agree to one method of estimation, either story points or ideal days, as both use different units of measurement and can lead to confusion. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "When estimating the relative work effort to develop user stories, agile teams have both ideal days and story points as a method for estimation. What should agile teams be weary of doing with these methods?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using story points"
    }, {
      "option" : "B",
      "text" : "Using decomposition"
    }, {
      "option" : "C",
      "text" : "Using velocity"
    }, {
      "option" : "D",
      "text" : "Using aggregation"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Agile teams typically use story points to estimate the relative size or effort of developing a user story [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "How can an agile team estimate the relative size of developing a user story?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "They are both methods used in agile to estimate task difficulty."
    }, {
      "option" : "B",
      "text" : "They are both methods used in agile to estimate risk."
    }, {
      "option" : "C",
      "text" : "They are both methods used in agile to estimate value."
    }, {
      "option" : "D",
      "text" : "They are both methods used in agile for relative sizing of the work effort involved for developing user stories."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Both planning poker and affinity estimation are agile techniques used to size the work effort of developing user stories. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation] 10. B - Estimating how many user story points a team can complete in a sprint/iteration should be based upon its previous iterations, if possible. If Kyle's team estimated 45 story points in its first sprint but completed only 30 story   points,   it   would   be   wise  to estimate no more than 30 for its next sprint/iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "How are planning poker and affinity estimating similar?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "45"
    }, {
      "option" : "B",
      "text" : "30"
    }, {
      "option" : "C",
      "text" : "50"
    }, {
      "option" : "D",
      "text" : "40"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Estimating how many user story points a team can complete in a sprint/iteration should be based upon its previous iterations, if possible. If Kyle's team estimated 45 story points in its first sprint but completed only 30 story   points,   it   would   be   wise  to estimate no more than 30 for its next sprint/iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Kyle's team just completed a sprint. The team had estimated that it could complete 45 story points, but only completed 30 story points in the sprint. How many story points would be a safe estimate for to estimate for the next sprint?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using exact time-boxing"
    }, {
      "option" : "B",
      "text" : "Using ideal days"
    }, {
      "option" : "C",
      "text" : "Using heuristics"
    }, {
      "option" : "D",
      "text" : "Using ideal velocity"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Instead of using story points, agile teams may estimate the relative sizes of user stories using ideal days. Ideal days represents the amount of days - uninterrupted by meetings, personal life, non-working days, or  any other delays, obstacles or distractions - that it would take a  single person to build, test, and release the user story, relative to other user stories     in     the     backlog.     [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Besides using story points to estimate the relative size of a user story, how else may an agile team estimate user story size?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Both during iteration planning and during the iteration itself"
    }, {
      "option" : "B",
      "text" : "Only during release planning"
    }, {
      "option" : "C",
      "text" : "During the iteration"
    }, {
      "option" : "D",
      "text" : "During iteration planning"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "It is appropriate to estimate tasks both during iteration planning and throughout the iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "When is it appropriate to estimate tasks for an iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "New  revenue found  in a hidden value stream."
    }, {
      "option" : "B",
      "text" : "Additional revenue realized through the sales of new product features or services to existing customers."
    }, {
      "option" : "C",
      "text" : "Revenue retained through the development of new product features or services that prevent existing customers from stopping use of the existing product."
    }, {
      "option" : "D",
      "text" : "New revenue realized  through the sales of products or services  to new customers."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "New revenue is revenue realized through the sales of products or services to new customers. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "In agile estimating and planning, what is 'new' revenue?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Texas Hold'Em"
    }, {
      "option" : "C",
      "text" : "Narrowband Delphi"
    }, {
      "option" : "D",
      "text" : "Delphi narrowband"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Planning poker is a common agile estimation technique used to estimate the relative point value of a user story. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Name an agile planning technique used to estimate the point value of a user story."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Affinity estimation"
    }, {
      "option" : "B",
      "text" : "Planning poker"
    }, {
      "option" : "C",
      "text" : "SMART"
    }, {
      "option" : "D",
      "text" : "Planning game"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What agile estimation technique is conducted using a deck of cards for quickly estimating the relative work effort of developing user stories in a product backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Working  software  over welcoming change"
    }, {
      "option" : "B",
      "text" : "Face-to-face communication whenever possible"
    }, {
      "option" : "C",
      "text" : "Individuals  and interactions over processes and tools"
    }, {
      "option" : "D",
      "text" : "Customer collaboration over contract negotiation"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four values are: 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "Which of the following responses is NOT an Agile Manifesto value or principle regarding communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product  owner incompatibilities"
    }, {
      "option" : "B",
      "text" : "Lessons learned from mistakes"
    }, {
      "option" : "C",
      "text" : "Customer inconsistencies in requirements"
    }, {
      "option" : "D",
      "text" : "The programmer who authored the most bugs"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "During reflection or retrospectives, an agile team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/team-assessment events, topics can include: lessons learned from successes and failures; team standards that worked, failed, or were not properly followed; and other areas of  improvement.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In a self-assessment or reflection event, what is a likely topic a team will focus on?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Team standards that worked"
    }, {
      "option" : "B",
      "text" : "Product owner risks"
    }, {
      "option" : "C",
      "text" : "The programmer who authored the most bugs"
    }, {
      "option" : "D",
      "text" : "Customer inconsistencies in requirements"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "During reflection or retrospectives, an agile team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/team-assessment events, topics can include: lessons learned from successes and failures; team standards that worked, failed, or were not properly followed; and other areas of  improvement.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In a self-assessment or reflection event, what is a likely topic a team will focus on?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who disregards any innovative thought that is outside the project scope."
    }, {
      "option" : "B",
      "text" : "Someone who promotes a competitive environment to increase efficiency among the team."
    }, {
      "option" : "C",
      "text" : "Someone who makes all team decisions without team consultation."
    }, {
      "option" : "D",
      "text" : "Someone who builds trust in the team and encourages it to explore new ideas and technology."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And   although   the   'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore   new   ideas   and   technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of    Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Bob has recently started an agile project where he is to be the project leader. What should Bob aspire to be as agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Customer value communication"
    }, {
      "option" : "B",
      "text" : "Customer quality communication"
    }, {
      "option" : "C",
      "text" : "Face-to-face communication"
    }, {
      "option" : "D",
      "text" : "Simplicity communication"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four values are: 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change,      3)      delivering     working software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "Before starting an agile project, Hank always likes his team to review the Agile Manifesto. One of his favorite principles regards the Agile Manifesto's preferred method of communication. Can you help Hank correctly identify the preferred communication method?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Customer-defined"
    }, {
      "option" : "B",
      "text" : "Team-defined"
    }, {
      "option" : "C",
      "text" : "ISO 9001-defined"
    }, {
      "option" : "D",
      "text" : "Project lead-defined"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the beginning of an effort and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote a self- disciplined environment. There is no 'one size fits all' standards definition  in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards  while  also  being  open    to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "CV = EV - AC"
    }, {
      "option" : "B",
      "text" : "CV = BAC - EV - AC"
    }, {
      "option" : "C",
      "text" : "CV = BAC - AC - EV"
    }, {
      "option" : "D",
      "text" : "CV = AC Ð EV"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index  (SPI). CV is the difference between what a project has earned to date and cost to date (i.e., CV = EV - AC). AC is the actual cost the project has incurred to date. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. How is CV calculated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That it would subtract value from the buyer's portfolio."
    }, {
      "option" : "B",
      "text" : "That it would neither add to nor subtract value from the buyer's portfolio."
    }, {
      "option" : "C",
      "text" : "That it would add value to the buyer's portfolio."
    }, {
      "option" : "D",
      "text" : "None of the above."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment or project. NPV is the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow is discounted back  to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets) , and Rt = the net cash inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "If the NPV of an investment is below zero, what does that indicate to the potential buyer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Kanban analysis"
    }, {
      "option" : "B",
      "text" : "Cycle retention"
    }, {
      "option" : "C",
      "text" : "Constructive planning"
    }, {
      "option" : "D",
      "text" : "Iteration planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,   demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iterative delivery"
    }, {
      "option" : "B",
      "text" : "Sprint delivery"
    }, {
      "option" : "C",
      "text" : "Incremental delivery"
    }, {
      "option" : "D",
      "text" : "Cyclical delivery"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are    successively    improved,    to    a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What delivery concept does agile pride itself on and having a definition of 'frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Daily task board update"
    }, {
      "option" : "B",
      "text" : "Daily risk meeting"
    }, {
      "option" : "C",
      "text" : "Daily stand-up meetings/Daily scrum"
    }, {
      "option" : "D",
      "text" : "Daily defect meeting"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The use of a stop watch is sometimes used in the daily stand-up meeting to ensure that the meeting is brief and productive. Typically, a stand-up meeting should last no longer than 15 minutes (i.e., a 15 minute timebox). [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "What daily meeting often uses timeboxing to ensure it lasts no longer than fifteen minutes?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Visual information input"
    }, {
      "option" : "B",
      "text" : "ESP"
    }, {
      "option" : "C",
      "text" : "Data logs"
    }, {
      "option" : "D",
      "text" : "E-mail"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Osmotic communication includes picking up sensory input of sound, sight or vision, smell and other shared  workspace environmental conditions. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What else besides sound input does osmotic communication include?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Improve  teamwork  and collaboration"
    }, {
      "option" : "B",
      "text" : "Meet expectations"
    }, {
      "option" : "C",
      "text" : "Decrease productivity"
    }, {
      "option" : "D",
      "text" : "Maintain velocity"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community,   2)   providing   feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What  is  one reason  to  have  a motivated team on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Manage idle time."
    }, {
      "option" : "B",
      "text" : "Manage risk  and reduce uncertainty."
    }, {
      "option" : "C",
      "text" : "Eliminate the need for further risk management."
    }, {
      "option" : "D",
      "text" : "Decrease the likelihood  of upgrade localization."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Risked-based spike is a risk management  technique  and  is   often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need to understand how  migrating from Windows 7 to Windows 8 may impact the look and feel of the interface. Risked-based  spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Randy is  in  the middle  of performing a risk-based spike task to understand how the upgrade to Windows 8 required by the customer will impact the user interface. What is one reason Randy would perform a risk-based spike task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Its  definition  of  delivery readiness."
    }, {
      "option" : "B",
      "text" : "Its definition of releasability."
    }, {
      "option" : "C",
      "text" : "Its  definition  of  done  in concert with the product owner"
    }, {
      "option" : "D",
      "text" : "Its definition of shipability."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Because a cornerstone of the scrum framework in agile is to 'always have a product that you could theoretically ship,' it is important for the team and product owner to have a definition of 'done' or what criteria is necessary to consider user features or functionality in a state of finality. [Coaching Agile Teams. Lyssa Adkins.] [Product quality]"
    },
    "question" : "What must a scrum team define before beginning a project so that it may know when a feature has been fully developed and in a state of readiness for shipping?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Improves development skills for junior software programmers"
    }, {
      "option" : "B",
      "text" : "Decreases team morale"
    }, {
      "option" : "C",
      "text" : "Improves team communication"
    }, {
      "option" : "D",
      "text" : "Increases competition among team members to improve productivity"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Information radiators improve team communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select  an  advantage of  using an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Decreases the need for testing"
    }, {
      "option" : "B",
      "text" : "Decreases the need for team communication and collaboration"
    }, {
      "option" : "C",
      "text" : "Supports the detection of early defects with any software integration."
    }, {
      "option" : "D",
      "text" : "Decreases the need for customer feedback"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "What is an advantage of continuous integration, as practiced in XP?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Retrospectives"
    }, {
      "option" : "B",
      "text" : "Defect inspection"
    }, {
      "option" : "C",
      "text" : "Introspectives"
    }, {
      "option" : "D",
      "text" : "Roadmap retrospective"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient and effective method of conveying information to and within  a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Test-driven development"
    }, {
      "option" : "B",
      "text" : "Defect reduction"
    }, {
      "option" : "C",
      "text" : "Focus on product value"
    }, {
      "option" : "D",
      "text" : "Using self-organizing teams."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority   is   to   satisfy   the  customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method  of  conveying  information  to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective,  then  tunes  and  adjusts   its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Initial velocity estimate"
    }, {
      "option" : "B",
      "text" : "Defect threshold"
    }, {
      "option" : "C",
      "text" : "Project standards"
    }, {
      "option" : "D",
      "text" : "Rate of return"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project will deliver value to a customer.      [Lean-Agile      Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In  agile,  a business  case  should include which of the following topics?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Large swaths of blank wall space devoid of project information"
    }, {
      "option" : "B",
      "text" : "Plants,  natural lighting, and comfortable seating"
    }, {
      "option" : "C",
      "text" : "Seating  by  team  member function"
    }, {
      "option" : "D",
      "text" : "Minimized  team  member interaction"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard     and     wall     space   for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important place that should foster effective communication. What is a guideline for promoting such an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Definition of  the product backlog."
    }, {
      "option" : "B",
      "text" : "Definition of  the product vision"
    }, {
      "option" : "C",
      "text" : "Definition of  the iteration duration."
    }, {
      "option" : "D",
      "text" : "Release planning."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a  product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development. James Shore.] [Agile analysis and design]"
    },
    "question" : "What typically occurs directly before an agile team and  product owner will work on developing an initial product roadmap?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Active"
    }, {
      "option" : "B",
      "text" : "Gesture"
    }, {
      "option" : "C",
      "text" : "Reactive"
    }, {
      "option" : "D",
      "text" : "Mime"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "One communication technique to reduce misunderstanding    and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Communicating using open ended questions, like 'What did you think of the  agile  seminar?'  instead  of closed questions, like 'Did you enjoy the agile seminar?' are encouraged to improve team collaboration. Which communication technique encourages using open ended questions?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Teams and interactions"
    }, {
      "option" : "B",
      "text" : "Delivering incremental change"
    }, {
      "option" : "C",
      "text" : "Delivering comprehensive documentation"
    }, {
      "option" : "D",
      "text" : "Delivering working software frequently."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business  people  and  developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances  agility.  10)   Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Delivering comprehensive documentation"
    }, {
      "option" : "B",
      "text" : "Delivering incremental change"
    }, {
      "option" : "C",
      "text" : "Ensuring that business people and developers hold daily retrospective meetings"
    }, {
      "option" : "D",
      "text" : "Ensuring that business people and developers work together."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority   is   to   satisfy   the  customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method  of  conveying  information  to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective,  then  tunes  and  adjusts   its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Empowered teams solve problems collectively and thus share a focus on delivering value"
    }, {
      "option" : "B",
      "text" : "Empowered teams remain inflexible to changing customer requirements and focus on delivering to specification."
    }, {
      "option" : "C",
      "text" : "Empowered teams need extensive management involvement in order to understand customer need"
    }, {
      "option" : "D",
      "text" : "Empowered teams remove themselves from  being responsible of product quality in order to reduce association with project failure."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Why is an empowered team considered an important team attribute in agile?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Time and cost"
    }, {
      "option" : "B",
      "text" : "Budget and cost"
    }, {
      "option" : "C",
      "text" : "Cost"
    }, {
      "option" : "D",
      "text" : "Budget and time"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an    initiation    phase;    fixing   scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with    award    fee).    [Agile    Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Gabe is the financial executive for an upcoming project that is slated to use agile. In terms of estimating time, budget,  and  cost  for an agile effort, what  does  Gabe  typically have defined?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project leader"
    }, {
      "option" : "B",
      "text" : "Product tester"
    }, {
      "option" : "C",
      "text" : "Product owner"
    }, {
      "option" : "D",
      "text" : "Customer"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And   although   the   'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore   new   ideas   and   technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of    Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person  in the agile framework 'inspires the team to be innovative and to  try new technologies?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Designing for the sub-system, deciding early and delivering on time"
    }, {
      "option" : "B",
      "text" : "Designing for the whole system (i.e., seeing the whole), deciding late and delivering fast"
    }, {
      "option" : "C",
      "text" : "Designing for the whole system, deciding late, and delivering once"
    }, {
      "option" : "D",
      "text" : "Designing holistically, deciding early and delivering on time"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The principles of lean software development are: Eliminate waste; Amplify learning; Decide as late as possible; Deliver as fast as possible; Empower the team; Build integrity in; See the whole. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Help Gilbert select key principles of lean software development."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Developer"
    }, {
      "option" : "B",
      "text" : "Project leader"
    }, {
      "option" : "C",
      "text" : "Tester"
    }, {
      "option" : "D",
      "text" : "Customer"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision  making.  Some  key   aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort;  communicate  and  endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'removes any obstacles the team faces in its path?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Designing, building, and testing of product features"
    }, {
      "option" : "B",
      "text" : "Facilitating project vision kaizen"
    }, {
      "option" : "C",
      "text" : "Developing risk  mitigation strategies"
    }, {
      "option" : "D",
      "text" : "Assessing project risk"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In the exploring phase, the agile team focuses on designing, building, and testing product  features. This occurs within useful increments  to the customer. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As an agile certified practitioner, Harry has just entered the exploring phase of Highsmith's agile project management model. What is Harry  and his team mostly performing during this phase?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Discuss"
    }, {
      "option" : "B",
      "text" : "Develop"
    }, {
      "option" : "C",
      "text" : "Distill"
    }, {
      "option" : "D",
      "text" : "Demo"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of  ATDD  with  its  four  steps  can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are.   3)   After   distillation,   the  team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "What  is  the second  step  of  the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using  a single  discipline  or expertise for brainstorming events"
    }, {
      "option" : "B",
      "text" : "Dismissing poor ideas at brainstorming events immediately"
    }, {
      "option" : "C",
      "text" : "Using  non-threatening and creative environments"
    }, {
      "option" : "D",
      "text" : "Using  a large number  of people for brainstorming events"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "As a project leader or scrum master, effective facilitation methods are critical for building a high- performance and motivated team. Facilitation  of  meetings,  discussions, demonstrations, etc., is a constant on an agile project. Some general facilitation methods include: using a small number of people for brainstorming events; hosting  events in a non-threatening/comfortable environment; having an agenda that is shared with the group ahead of time; using open-ended questions instead of closed-ended questions; including a diverse representation to gain a broader perspective of the topic.  [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Being a strong facilitator is required for a project leader or scrum master. Which of the following is a facilitation method used by a project leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Distill"
    }, {
      "option" : "B",
      "text" : "Demo"
    }, {
      "option" : "C",
      "text" : "Discuss"
    }, {
      "option" : "D",
      "text" : "Develop"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not.  2)  The  development  team  takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving   Enterprise   Agility.   Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "What is the first step of the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Develop"
    }, {
      "option" : "B",
      "text" : "Discuss"
    }, {
      "option" : "C",
      "text" : "Demo"
    }, {
      "option" : "D",
      "text" : "Distill"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer    or    business    stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have    been    developed,    the     team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "What is the third step of the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "MoSCoW"
    }, {
      "option" : "B",
      "text" : "SMART"
    }, {
      "option" : "C",
      "text" : "WIDETOM"
    }, {
      "option" : "D",
      "text" : "inVEsT"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are often prioritized with prioritization based on value and risk. Prioritization can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a technique used for value- based analysis?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Do less"
    }, {
      "option" : "B",
      "text" : "Do value first"
    }, {
      "option" : "C",
      "text" : "Do more"
    }, {
      "option" : "D",
      "text" : "Do continuous integration"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile and doing agile. Being agile includes focusing on cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several  activities  that  an  agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "According to Highsmith and his definition of adaptive leadership, what is one item a project leader can do for 'doing agile?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Business case"
    }, {
      "option" : "B",
      "text" : "Burndown chart"
    }, {
      "option" : "C",
      "text" : "Value stream map"
    }, {
      "option" : "D",
      "text" : "Task board"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project    will    deliver    value    to    a customer. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Jerry is reviewing an agile artifact that explains the why and how a  project will deliver value to a customer. Which artifact is Jerry most likely reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Accreditation compliance"
    }, {
      "option" : "B",
      "text" : "Regulatory compliance"
    }, {
      "option" : "C",
      "text" : "Fail-safe compliance"
    }, {
      "option" : "D",
      "text" : "Documentation compliance"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Although in agile project management, it is generally practiced to generate minimal documentation to support the project, some specific documents, like those required by regulatory bodies need to be created to comply with local and federal law. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.]   [Knowledge   and Skills: Level 3]"
    },
    "question" : "Jill and her agile team are authoring a document required  by local law regulations. This type of conformance is known as"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The management or facilitation of  a  work environment where all stakeholders are actively involved throughout the project."
    }, {
      "option" : "B",
      "text" : "The management or caging of stakeholder expectations to prevent scope creep."
    }, {
      "option" : "C",
      "text" : "The management or facilitation of  a  work environment where developers can assign tasks to stakeholders."
    }, {
      "option" : "D",
      "text" : "Managing the problems that stakeholders present throughout the project."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2)    We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly.   7)   Stakeholders   consist of real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Reba and the agile team she belongs to are having a discussion regarding 'stakeholder management.' What is 'stakeholder management?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Contracts need to be negotiated and plans followed"
    }, {
      "option" : "B",
      "text" : "Documentation supports working software and appropriate processes and tools aid the development process"
    }, {
      "option" : "C",
      "text" : "Appropriate processes and tools aid the development process"
    }, {
      "option" : "D",
      "text" : "Stakeholders must interact effectively to create business value"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile secondary values include: documentation of software, processes and tools, contract negotiation, and following project plans. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is NOT a secondary agile value per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "In progress"
    }, {
      "option" : "B",
      "text" : "Done"
    }, {
      "option" : "C",
      "text" : "To do"
    }, {
      "option" : "D",
      "text" : "Ready for testing"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Tasks that have not yet started should be located in the 'to do' column. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning,  monitoring, and adapting]"
    },
    "question" : "When working with a task board, in which column should a developer find a task that has NOT yet started?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "50%"
    }, {
      "option" : "B",
      "text" : "-67%"
    }, {
      "option" : "C",
      "text" : "-40%"
    }, {
      "option" : "D",
      "text" : "-50%"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $5,000; Cost: $10,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Done"
    }, {
      "option" : "B",
      "text" : "To do"
    }, {
      "option" : "C",
      "text" : "Ready for testing"
    }, {
      "option" : "D",
      "text" : "In progress"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Greg should place the task card in the 'ready for testing' column. All tasks must go through a testing or verification process to ensure quality is built into the development process. Typically, completed tasks are moved to the 'Ready for testing' column. Testing is then executed by the project testers and the customer. It is important to note that some tasks on the task board will not have specific verification or testing criteria. These tasks don't go in the 'Ready  for testing' column but still need to be verified and are often placed in a 'To verify' column. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning,  monitoring, and adapting]"
    },
    "question" : "Greg has just finished completed a task. He wants to update the team and other stakeholders about the progress of the task. In which column of the task board should Greg place the task card?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Incremental delivery"
    }, {
      "option" : "B",
      "text" : "Done done delivery"
    }, {
      "option" : "C",
      "text" : "Acceptance test delivery"
    }, {
      "option" : "D",
      "text" : "Model delivery"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery  of  working  products,  which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development.         James         Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Paul as the product owner, likes being able to provide constructive criticism to the agile team regarding its latest iteration of a product. Although Paul has other opportunities to provide feedback, this particular type occurs after the delivery of a new product associated with the end of a sprint or iteration. What type of delivery concept provides this type of customer feedback?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Defect technique"
    }, {
      "option" : "B",
      "text" : "Process analysis technique"
    }, {
      "option" : "C",
      "text" : "Done done technique"
    }, {
      "option" : "D",
      "text" : "Code refactoring technique"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements can be made. It is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Value  stream  mapping is  an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being silent."
    }, {
      "option" : "B",
      "text" : "Being  present and focusing your attention on the speaker."
    }, {
      "option" : "C",
      "text" : "Open ended questions."
    }, {
      "option" : "D",
      "text" : "Talking loudly."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4)  Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ask team members to cancel daily stand-up meetings in favor for a weekly two hour meeting."
    }, {
      "option" : "B",
      "text" : "Wait to handle any issues that take longer than a few minutes to discuss after the daily stand-up meeting has concluded."
    }, {
      "option" : "C",
      "text" : "Dissuade team members from sharing pertinent progress information to keep the meetings brief."
    }, {
      "option" : "D",
      "text" : "Downplay or ignore shared information that she feels is inconsequential so team members will, via osmotic communication, feel  disinclined  to  share  at daily stand-ups."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Issues that take longer than a few minutes to resolve in a daily stand-up meeting should be tabled and resolved between the appropriate parties after the daily stand-up meeting has concluded. This ensures that the meetings are brief and  productive. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "Joy, as an agile team leader, is noticing that her daily stand-up meetings are lasting well long of the suggested 15 minutes. What can she  do to ensure meetings stay brief and productive?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Model"
    }, {
      "option" : "B",
      "text" : "Wireframe"
    }, {
      "option" : "C",
      "text" : "Simulated"
    }, {
      "option" : "D",
      "text" : "Draft"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In the agile design process, prototypes help the customer understand current design state. Three common types of prototypes are HTML, paper (i.e., sketches), and wireframes. A wireframe is a sketch of a user interface, identifying its content, layout, functionality, is usually black and white, and excludes detailed pictures or graphics. A wireframe can be created on paper, whiteboards, or using software. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Frank is using a software tool to sketch a prototype of a web site for the customer to review. The prototype will include the layout, content, and some functionality. What type of prototype is Frank using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "HUP"
    }, {
      "option" : "B",
      "text" : "AUP"
    }, {
      "option" : "C",
      "text" : "XP"
    }, {
      "option" : "D",
      "text" : "DSDM"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "XP primary principles include: collective ownership, continuous integration, energized work, shared workspaces, and an on-site customer. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework emphasizes the importance of an 'on- site customer?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "As product owner, she can choose to pair program during the delivery demonstration to remove defects."
    }, {
      "option" : "B",
      "text" : " As  product owner, she can choose which developers are working on the project."
    }, {
      "option" : "C",
      "text" : "As product owner, she can refactor the code herself."
    }, {
      "option" : "D",
      "text" : "As product owner, she can review the state of the product  and provide feedback."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback   and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As a product owner, Hanna believes in the value of 'incremental delivery.' Why might Hanna see value in incremental delivery?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Before each iteration"
    }, {
      "option" : "B",
      "text" : "During an iteration"
    }, {
      "option" : "C",
      "text" : "During daily planning"
    }, {
      "option" : "D",
      "text" : "After each iteration"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Iteration planning occurs before every iteration [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "How often does iteration planning occur?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "During iteration planning"
    }, {
      "option" : "B",
      "text" : "During daily planning"
    }, {
      "option" : "C",
      "text" : "During closing"
    }, {
      "option" : "D",
      "text" : "During release planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Planning for a release occurs during release planning. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "When does planning for a release take place?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A  constraints-based analysis technique"
    }, {
      "option" : "B",
      "text" : "An IDEF-0 analysis technique"
    }, {
      "option" : "C",
      "text" : "A  value-based analysis technique"
    }, {
      "option" : "D",
      "text" : "A  quality-based analysis technique"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are    often prioritized with prioritization based on value and risk. Prioritization can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Hector is using a risk-to-value matrix technique to understand the value of each feature according to the customer. What is a risk-to-value matrix an example of?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session. "
    }, {
      "option" : "B",
      "text" : "Use closed-ended questions to keep on schedule. "
    }, {
      "option" : "C",
      "text" : "Having a multi- disciplinary/diverse group so that many different perspectives are available. "
    }, {
      "option" : "D",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have  an  engaging  and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand  -  Have  a multidisciplinary/diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "During the project vision workshop"
    }, {
      "option" : "B",
      "text" : "During iteration planning"
    }, {
      "option" : "C",
      "text" : "During reflection meetings"
    }, {
      "option" : "D",
      "text" : "During release planning"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An agile team creates the iteration backlog during iteration planning [The Art of Agile Development.         James         Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "When is an iteration backlog created?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Earned verification"
    }, {
      "option" : "B",
      "text" : "Earned variation"
    }, {
      "option" : "C",
      "text" : "Earned validation"
    }, {
      "option" : "D",
      "text" : "Earned value"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does EV stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Net present value (NPV)"
    }, {
      "option" : "B",
      "text" : "Budget at completion (BAC)"
    }, {
      "option" : "C",
      "text" : "Earned value (EV)"
    }, {
      "option" : "D",
      "text" : "Project budget (PB)"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). BAC is the total project budget. [Agile Estimating and Planning. Mike Cohn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What earned value management (EVM) variable captures the total project budget?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Video conferencing"
    }, {
      "option" : "B",
      "text" : "None"
    }, {
      "option" : "C",
      "text" : "Mail"
    }, {
      "option" : "D",
      "text" : "E-mail"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Video conferencing and instant messaging are technologies that can provide some level of osmotic communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What technology can facilitate some osmotic communication for team members that do NOT share the same workspace?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Postal mail"
    }, {
      "option" : "B",
      "text" : "Video conferencing"
    }, {
      "option" : "C",
      "text" : "Instant messaging"
    }, {
      "option" : "D",
      "text" : "E-mail"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Video conferencing, e-mail and instant messaging are technologies that can provide some level of communication in the absence of face- to-face communication. [Agile Software  Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Although  face-to-face communication is preferred in agile projects, other types of communication may substitute in the absence of collocated team members. Which of the following is NOT a satisfactory substitute   for face-to-face communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Prototyping"
    }, {
      "option" : "B",
      "text" : "Defect reduction plan"
    }, {
      "option" : "C",
      "text" : "Waterfalling"
    }, {
      "option" : "D",
      "text" : "E-mailing"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,   demonstration, evaluations, pair programming, unit testing,  continuous  integration,   daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collaboration intelligence"
    }, {
      "option" : "B",
      "text" : "Emotional adaptation"
    }, {
      "option" : "C",
      "text" : "Capitulation"
    }, {
      "option" : "D",
      "text" : "Collaboration"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership.   [Coaching   Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Of the following, which is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mentoring is unnecessary within agile project management."
    }, {
      "option" : "B",
      "text" : "Continuous and pervasive coaching and mentoring."
    }, {
      "option" : "C",
      "text" : "It varies depending on the needs of the team and size of theorganization."
    }, {
      "option" : "D",
      "text" : "Minimal to reduce distracting the development team."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of  coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is the perfect amount of coaching and mentoring for an agile team so that it may improve its performance?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A list of the product features  to be developed in a sprint."
    }, {
      "option" : "B",
      "text" : "A list of all product features to be developed in a release."
    }, {
      "option" : "C",
      "text" : "A list of the product features  to be developed in an iteration."
    }, {
      "option" : "D",
      "text" : "A list of possible product features to be developed in an iteration."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The product backlog is a comprehensive   list   of   all    product features to be developed in an iteration. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "What is a product backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cost"
    }, {
      "option" : "B",
      "text" : "Time and budget"
    }, {
      "option" : "C",
      "text" : "Time and cost"
    }, {
      "option" : "D",
      "text" : "Budget and cost"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes  it  difficult  to  estimate  a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "When estimating time, budget and cost for agile projects, what constraints are generally known by the customer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Delivering valuable chunks of product functionality, story definition and development, and customer acceptance of stories."
    }, {
      "option" : "B",
      "text" : "Delivering valuable chunks of untested code, expected task complexity, and customer acceptance of stories."
    }, {
      "option" : "C",
      "text" : "Average team velocity, financial calendar quarter schedule, and the build, test, design process."
    }, {
      "option" : "D",
      "text" : "Delivering valuable chunks of untested code, story  definition and development, and customer acceptance of stories."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "When defining the length of iterations, the team should consider how it will deliver valuable chunks of product functionality, the definition and  development  of  user  stories, and the acceptance of user stories by customers. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "When defining an iteration length, what details should a team focus on?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Miserly"
    }, {
      "option" : "B",
      "text" : "Moore's Law"
    }, {
      "option" : "C",
      "text" : "Measurable"
    }, {
      "option" : "D",
      "text" : "Mandatory"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The acronym SMART (specific, measurable, achievable, relevant, and timeboxed) helps the agile practitioner remember the characteristics of a well-defined task.  S Ð Specific tasks are ones that clearly contribute to the development of a user story. It should not be vague. M Ð Measurable tasks are ones that the team and customer can verify. A - Achievable     tasks     are     ones   that developers may realistically  implement and understand. R - Relevant tasks are ones that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "Jules is describing the SMART acronym used for task analysis in an agile seminar. What does the M stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Focus on business priorities"
    }, {
      "option" : "B",
      "text" : "Incremental  development of products and services"
    }, {
      "option" : "C",
      "text" : "Focus on customer value"
    }, {
      "option" : "D",
      "text" : "Use of baselines for schedule and budget control"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Key characteristics of agile project management include: continuous improvement, cross- functional  teams,  short  iterations,  an incremental approach, and business priorities and customer value. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is NOT a characteristic of agile project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product owner"
    }, {
      "option" : "B",
      "text" : "Business analyst"
    }, {
      "option" : "C",
      "text" : "Project leader"
    }, {
      "option" : "D",
      "text" : "Customer"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And   although   the   'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore   new   ideas   and   technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of    Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'empowers the team to make decisions collaboratively with the customer?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them. "
    }, {
      "option" : "B",
      "text" : "Encouraging criticism early and often to prevent poorly thought out ideas entering the conversation as technical debt. "
    }, {
      "option" : "C",
      "text" : "Hosting the meeting in the typical Monday morning conference room that is usually only available to certain team members. "
    }, {
      "option" : "D",
      "text" : "Having a single- discipline/homogenous group so that the team can communicate more effectively."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand   -  Have  a multidisciplinary/diverse team to get a broader perspective - Delay any criticism that may stifle idea generation.     [Agile    Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Nathan intends to schedule a brainstorming session  to  generate ideas that may help solve some of the team's current issues. Which of the following is a good brainstorming technique that Nathan should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Encouraging  customer collaboration"
    }, {
      "option" : "B",
      "text" : "Welcoming  processes and tools"
    }, {
      "option" : "C",
      "text" : "Encouraging working software"
    }, {
      "option" : "D",
      "text" : "Welcoming change."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks  to  a  couple  of  months,   with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Active listening"
    }, {
      "option" : "B",
      "text" : "Passive listening"
    }, {
      "option" : "C",
      "text" : "Engaged listening"
    }, {
      "option" : "D",
      "text" : "Focused listening"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "One communication technique to     reduce     misunderstanding    and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is a common communication technique that may help teams reduce miscommunication and misunderstanding?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ignoring lessons learned because they are unlikely to occur again"
    }, {
      "option" : "B",
      "text" : "Strict team oversight and delegation of tasks"
    }, {
      "option" : "C",
      "text" : "Employing the waterfall development method"
    }, {
      "option" : "D",
      "text" : "Conveying information to the customer about iteration progress"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Customer collaboration over contract negotiation as an agile value and focusing on satisfying the customer as an agile principle indicates that conveying  information to the customer about iteration progress is the best choice. The Agile Manifesto defines four values and 12 supporting  principles.  The  values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. Agile principles include 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) using working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "You have been tasked to serve as an agile project leader for a new online camp reservation system. What agile manifesto-influenced tactic will you apply as project leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ensure that  they  are comprehensive."
    }, {
      "option" : "B",
      "text" : "Ensure that  they  are substantiated."
    }, {
      "option" : "C",
      "text" : "Ensure that they are filed with the appropriate parties immediately."
    }, {
      "option" : "D",
      "text" : "Ensure that they are properly outlined."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The PMI Code of Ethics and Professional Conduct states that it is mandatory for a project manager to: inform yourself about and uphold the policies, rules, regulations, and laws that govern your work, including professional and volunteer activities; report unethical or illegal conduct to appropriate parties and, if necessary, to those   affected   by   the   misconduct; ensure that any allegations of misconduct or illegal activity are substantiated and file only complaints that are supported by facts; never take part or help someone else take part in illegal activities. [PMI Code of Ethics and Professional Conduct. Project Management Institute.] [Knowledge and Skills: Level 2]"
    },
    "question" : "According to the PMI Code, what should be done with any allegations of misconduct or illegal activity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Transparency"
    }, {
      "option" : "B",
      "text" : "Enthralled"
    }, {
      "option" : "C",
      "text" : "Flexible"
    }, {
      "option" : "D",
      "text" : "Endurance"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage,     Openness,     Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Card planning"
    }, {
      "option" : "B",
      "text" : "Planning poker"
    }, {
      "option" : "C",
      "text" : "Planning cards"
    }, {
      "option" : "D",
      "text" : "Planning game"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Planning poker is a popular agile game used to estimate the  relative work effort of developing a user story. Each team member has a deck of cards with various numbered values which he or she can draw from to 'play (showing one card)' to indicate an estimated point value of developing a user story. [Coaching Agile      Teams.      Lyssa      Adkins.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What popular agile game is available for a team that wants to estimate the relative effort of developing user stories using story points?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SMART"
    }, {
      "option" : "B",
      "text" : "Cano"
    }, {
      "option" : "C",
      "text" : "inVEsT"
    }, {
      "option" : "D",
      "text" : "Kano"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are often prioritized with prioritization based on value and risk. Prioritization can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James   R.   Trott.]   [Knowledge    and Skills: Level 2]"
    },
    "question" : "Select a technique used for value- based analysis?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By quality and cost"
    }, {
      "option" : "B",
      "text" : "By value and velocity"
    }, {
      "option" : "C",
      "text" : "By priority  and market research"
    }, {
      "option" : "D",
      "text" : "By velocity  and market research"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "When a team performs iteration planning, it prioritizes features or user stories to develop in the forthcoming iteration by priority and velocity. The most valuable user stories are typically developed first  and the team's estimated velocity  helps plan how many user stories or features should be developed in the iteration. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Nathan and his team are in the midst of iteration planning. How does the team prioritize and select the features to be developed in the forthcoming iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Take the mode as the estimate (2)."
    }, {
      "option" : "B",
      "text" : "Use 3.2 as the estimate."
    }, {
      "option" : "C",
      "text" : "Err on the side of caution and use 8 as the estimate."
    }, {
      "option" : "D",
      "text" : "Have Peter and Sue explain their votes and repeat the voting process."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1, 1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2, 3, 5, 8, 13, 20, 40, and 100). A planning   poker   meeting   works    as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is  consensus. The developer who owns the user story is typically given higher credence.     [Agile     Estimating    and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Peter, Jacob, Ralph, Brandy, and Sue have just voted in a planning  poker meeting. Peter voted a 1, Jacob a 2, Ralph a 3, Brandy a 2, and Sue an 8. What should the team do next?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Easy"
    }, {
      "option" : "B",
      "text" : "Error proof"
    }, {
      "option" : "C",
      "text" : "Erratum"
    }, {
      "option" : "D",
      "text" : "Estimable"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The acronym INVEST (independent, negotiable, valuable, estimable, small, and testable) helps the agile practitioner remember the characteristics of a good user story. I Ð Independent stories can be developed in any order and avoid dependencies which can make development more complex. N Ð Negotiable user stories mean that both the customer and developer should feel free to analyze and adapt a user story to meet customer needs. V Ð A valuable    user story describes how the product  feature will provide value to the customer. E Ð Estimable user stories are ones that developers can readily estimate the effort or duration required for developing them. S- Small user stories are ones that take about two to five days of work to implement. T - Testable user stories are ones that can be verified according to acceptance criteria to ensure value. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken   Schwaber.]  [Planning, monitoring, and adapting]"
    },
    "question" : "Ralph is describing the INVEST acronym used for user story development in an agile practitioner seminar. What does the E in INVEST stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A made up personality used for facilitating the daily stand-up meeting"
    }, {
      "option" : "B",
      "text" : "An assigned personality used in reflection workshops."
    }, {
      "option" : "C",
      "text" : "A notional user of the system under development."
    }, {
      "option" : "D",
      "text" : "A method to describe the customer's personality for the day so the team may adapt to his or her feedback in the most effective way"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A persona is a notional user of the system under development. Being much more detailed than actors in use case modeling where generic user names are assigned (e.g., end user), personas try to elaborate on users with detailed descriptions to  provide context    to    the    developers.   Some personas have such notional details as name, address, age, income, likes and dislikes, and other specific details. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "In agile modeling, what is a persona?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A set of related topics for the retrospective."
    }, {
      "option" : "B",
      "text" : "A set of related programmer tasks."
    }, {
      "option" : "C",
      "text" : "A  set of  related topics  for scrum review."
    }, {
      "option" : "D",
      "text" : "A set of related user stories."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A theme, in the context of agile development, is a set of related user stories. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What is a theme in the context of agile development?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Written  description; conversations; and testing criteria"
    }, {
      "option" : "B",
      "text" : "Spoken dialogue; written rationale; and done done criteria"
    }, {
      "option" : "C",
      "text" : "Spoken description;  written dialogue; and testing criteria"
    }, {
      "option" : "D",
      "text" : "Spoken   description; collaborative  dialogue; and testing criteria"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A user story is composed of the following  three  aspects:  1)  A written description of the story; 2) Conversations about the story (think verbal, rather than written here);   and, 3) Tests that convey when a story can be accepted or complete. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Of the following, select the response which holds the three aspects of a user story."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collaborate with the customer to clarify the user story."
    }, {
      "option" : "B",
      "text" : "Discuss  among the product development team."
    }, {
      "option" : "C",
      "text" : "Conduct several spike tasks."
    }, {
      "option" : "D",
      "text" : "Research the domain."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Because agile emphasizes customer collaboration, the team should simply collaborate with the customer to clarify the user story. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "During iteration planning the team is having a difficult time interpreting the customer's intent of the user story. What should the team do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Restructuring of test code to update unit test code without changing external behavior."
    }, {
      "option" : "B",
      "text" : "Restructuring of source  code to update external functionality and internal behavior."
    }, {
      "option" : "C",
      "text" : "Restructuring of source code to update external functionality without changing internal behavior."
    }, {
      "option" : "D",
      "text" : "Restructuring of source code to update internal code without changing external behavior."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Code refactoring is method of improving working source code to make it more efficient, readable, extensible, maintainable and less complex. Through refactoring one is able to restructure source code modifying internal code without changing the external behavior. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Agile analysis and design]"
    },
    "question" : "Code refactoring allows for"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Whiteboard"
    }, {
      "option" : "B",
      "text" : "Chart paper"
    }, {
      "option" : "C",
      "text" : "HTML or  other portable software solution"
    }, {
      "option" : "D",
      "text" : "Paper"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "HTML and other software based solutions are ideal for presenting prototypes to customers, especially when off site. Software based prototypes are dynamic, graphic capable, and portable. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Agile analysis and design]"
    },
    "question" : "The customer is off site this week but insists on seeing a working prototype of the design so that she may provide feedback. What is a suitable prototype method to use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The product list"
    }, {
      "option" : "B",
      "text" : "The product requirements"
    }, {
      "option" : "C",
      "text" : "The project plan"
    }, {
      "option" : "D",
      "text" : "The project schedule"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In agile, the story map is essentially the project plan. It orders the user stories/product features into logical themes to serve as a plan for development. [User Stories Applied: For Agile Software Development. Mike    Cohn.]    [Agile    analysis  and design]"
    },
    "question" : "What is the agile story map essentially equivalent to in traditional project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Continuous planning with the expectation that plans and  details will inevitably change but become more refined as the project progresses."
    }, {
      "option" : "B",
      "text" : "Continuous planning with the expectation that velocity will increase progressively as the project progresses."
    }, {
      "option" : "C",
      "text" : "Continuous planning with the expectation that estimates of task time will become more progressive as the project evolves."
    }, {
      "option" : "D",
      "text" : "Continuous planning with the expectation that story point values will decrease in relation to the steep learning curve of developers."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Progressive elaboration is continuous planning with the expectation that project plans and details will change but become more refined as the project progresses. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "In agile parlance, what  does progressive elaboration refer to?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Prototypes are not used in projects."
    }, {
      "option" : "B",
      "text" : "Prototypes are initial schedules used in a rolling wave plan."
    }, {
      "option" : "C",
      "text" : "Prototypes are relatively low cost, low risk methods to share a design concept for stakeholder feedback."
    }, {
      "option" : "D",
      "text" : "Prototypes are user stories in draft format awaiting acceptance to the product backlog."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Prototypes are low cost, low risk methods to portray a design idea to a customer in order to obtain feedback before development. Although time consuming and having cost, prototypes can help save later costs that may  occur if a design is not modeled beforehand to obtain feedback and  fails to meet customer expectations. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "What are prototypes and how are they used in projects?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Rolling wave planning involves planning for an entire release at the beginning of a project. Progressive elaboration assumes that while customer requirements may change, they will not impact the initial rolling wave plan. "
    }, {
      "option" : "B",
      "text" : "Rolling wave planning involves a retrospective review of plans from the previous two iterations. Momentum from these two iterations, typically interpreted as velocity, form a 'prediction  wave'  which  can  be used to plan the next iteration. Progressive elaboration assumes that the wave will grow in power as the project progresses."
    }, {
      "option" : "C",
      "text" : "Rolling wave planning involves planning in waves or phases. Only the next few iterations are planned in detail  and iterations more distant are planned only at a high-level. Progressive elaboration is continuous planning that assumes that details and requirements will be better refined later and will be incorporated   into   the   planning process at the appropriate time."
    }, {
      "option" : "D",
      "text" : "Rolling wave planning and progressive elaboration are both antiquated traditional project management planning techniques."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Rolling wave planning (or rolling look ahead planning) involves planning in waves or phases and is especially useful for large, complex projects. Only the next few iterations are planned in detail and iterations more  distant  are  planned  only  at    a high-level. Progressive elaboration is continuous planning that assumes that details and requirements will be better refined later and will be incorporated into the planning process at the appropriate time. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What is rolling wave planning and how does it relate to progressive elaboration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A camper can sign up for a trip."
    }, {
      "option" : "B",
      "text" : "A camper can navigate the webpage."
    }, {
      "option" : "C",
      "text" : "A camper can review a detailed trip itinerary."
    }, {
      "option" : "D",
      "text" : "A camper can cancel a trip."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The best answer is 'A camper can navigate the webpage' because it is an activity that has no clear end point. The other selections include activities that have a clear end point. [User Stories Applied: For Agile Software  Development.  Mike  Cohn.] [Agile analysis and design]"
    },
    "question" : "Of the following, which user story is NOT closed?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "TDD"
    }, {
      "option" : "B",
      "text" : "Crystal"
    }, {
      "option" : "C",
      "text" : "XP"
    }, {
      "option" : "D",
      "text" : "FDD"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Crystal development process is cyclical/iterative. Its  primary components are chartering, delivery cycles, and project wrap-up. Chartering involves creating a project charter, which can last from a few  days to a few weeks. Chartering consists of four activities: 1) Building the core project team, 2) performing an Exploratory 360¡ assessment, 3) fine tuning the methodology, and 3) building the initial project plan. [Agile Software Development: The Cooperative   Game   Ð   2nd   Edition. Alistair  Cockburn.]  [Agile  analysis and design]"
    },
    "question" : "In which agile project management methodology does chartering play a significant role?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To define  the core  project team "
    }, {
      "option" : "B",
      "text" : "To assess project soundness in terms of  business  value and feasibility "
    }, {
      "option" : "C",
      "text" : "To conduct an  introspective reflection on the team makeup "
    }, {
      "option" : "D",
      "text" : "To define  a project mission and vision"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The executive sponsor conducts the Exploratory 360¡ assessment to assess the business  case of the project. Several dimensions are explored:  business  value, requirements, domain area, and technology impacts. Based on the results the team adjusts the Crystal methodology to the need or, in some cases, the project may be cancelled if serious issues are discovered. [Agile Software Development: The Cooperative   Game   Ð   2nd   Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "What  is  the purpose of  the Exploratory 360 assessment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1 to 2 sprint"
    }, {
      "option" : "B",
      "text" : "1 to 2 iteration"
    }, {
      "option" : "C",
      "text" : "2 to 5 day"
    }, {
      "option" : "D",
      "text" : "15 days"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The ideal development duration range for a user story is 2 to 5 days. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What is the ideal duration range for developing a user story?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "MoSCoW"
    }, {
      "option" : "B",
      "text" : "MoSTyN"
    }, {
      "option" : "C",
      "text" : "MoNTO"
    }, {
      "option" : "D",
      "text" : "MoNTauK"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The MoSCoW technique is commonly used in agile to prioritize user stories and create a story  map. The MoSCoW technique prioritizes user stories into the following groups in  descending  order  of  priority:  M - Must have; S - Should have; C - Could have; W - Would have. Must have items are those product features which are absolutely essential to develop. Should have items are product features that are not essential but have significant business value. Could have items are product features that would add some business value. Would have items are product features that have marginal business value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Select  the technique that  is commonly used to create a story map?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Exactly one hour"
    }, {
      "option" : "B",
      "text" : "Less than two hours"
    }, {
      "option" : "C",
      "text" : "Between four hours and two days"
    }, {
      "option" : "D",
      "text" : "Five business days"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "User stories or features are first assigned to iterations during release planning. The user stories are features are then decomposed into tasks during iteration planning so that the tasks may be assigned to specific developers. To help manage planning and monitoring, a  rule  of  thumb  for  estimating   task duration is that each task should take approximately four hours to two days of development work. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Andy and his team are in the middle of iteration planning. The team has identified  from  one  user  story eight required tasks. Approximately how long should each task take to develop or execute?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Exclusive"
    }, {
      "option" : "B",
      "text" : "Participatory"
    }, {
      "option" : "C",
      "text" : "Inclusive"
    }, {
      "option" : "D",
      "text" : "Merit"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "To build trust among the team, agile believes heavily in participatory decision models where team members collaborate to make decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as      collective      ownership,      self-organization, and self-discipline. In collective ownership, the team members are equally responsible for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Henry and his agile team have just made a group decision about how many features to build, test, and integrate in the upcoming sprint. What type of decision making model is it when a team makes decisions collaboratively?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Comparing actual vs. planned work"
    }, {
      "option" : "B",
      "text" : "Detailed project planning"
    }, {
      "option" : "C",
      "text" : "Execution of the project plan"
    }, {
      "option" : "D",
      "text" : "Definition of  the business objectives"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Definition of business objectives occurs during the initiating phase in a traditional project management effort. [Manifesto for Agile Software Development.        Agile       Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What occurs during the initiating phase of traditional project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Exploring"
    }, {
      "option" : "B",
      "text" : "Speculating"
    }, {
      "option" : "C",
      "text" : "Adapting"
    }, {
      "option" : "D",
      "text" : "Closing"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Jim Highsmith's agile project management model consists of the following five phases: Envisioning, speculating, exploring, adapting, and closing. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the last phase of Jim Highsmith's agile project management model."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Envisioning"
    }, {
      "option" : "B",
      "text" : "Closing"
    }, {
      "option" : "C",
      "text" : "Exploring"
    }, {
      "option" : "D",
      "text" : "Initiating"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile project management phases, in sequence, are: Envisioning, speculating, exploring, adapting, closing. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : " Which is NOT a phase of Highsmith's agile project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Kanban communication"
    }, {
      "option" : "B",
      "text" : "Extra sensory perception"
    }, {
      "option" : "C",
      "text" : "Osmotic communication"
    }, {
      "option" : "D",
      "text" : "Chaordic communication"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated   team  members unconsciously. By sharing the same work environment, team members are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework    that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd   Edition.   Alistair  Cockburn.] [Communications]"
    },
    "question" : "Peter and Zach work together on an agile project as software developers. Because Peter and Zach are collocated they are often aware of each other's daily progress without speaking directly to one another. What are Peter and Zach benefiting from?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Static systems development method (SSDM)"
    }, {
      "option" : "B",
      "text" : "Extreme systems development method (XSDM)"
    }, {
      "option" : "C",
      "text" : "Dynamic  systems development method (DSDM)"
    }, {
      "option" : "D",
      "text" : "Dynamic product development method (DPDM)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Scrum is a framework that strives to facilitate the development of complex products quickly and efficiently, the adaptation of changing requirements, the delivery of working products incrementally. Scrum development includes three major phases: pre-game, game, and post- game. Scrum emphasizes the use of product and sprint backlogs, iterative development (termed 'sprints'), daily stand-up meetings (termed 'scrums'), sprint reviews (demos) and reflection, and  the  use  of  information  radiators such as task boards and burndown charts. [Ken Schwaber. Agile Project Management with Scrum. Chapter 1.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Frank is using an agile framework that emphasizes using a strict business perspective. Which framework is Frank most likely using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A translator."
    }, {
      "option" : "B",
      "text" : "A task driver."
    }, {
      "option" : "C",
      "text" : "An enabler."
    }, {
      "option" : "D",
      "text" : "An interpreter."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Servant leadership has its roots with an essay written in 1970 by Robert K Greenleaf. Greenleaf defined servant leaders as humble stewards devoted to their company and work to serve their peers, teams, and  customers. In a self-organizing team, a servant leader, as Greenleaf defined it, is ideal as the team leader is an enabler, listening to the agile team's needs,     removing     obstacles,     and providing tools or other support to promote high productivity. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Servant leadership is a desirable feature for a team leader in agile. What is the best short description of servant leadership?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "As a straight, downward sloping line"
    }, {
      "option" : "B",
      "text" : "Typically as a non-linear line that reflects the ebbs and flows of development"
    }, {
      "option" : "C",
      "text" : "As a curved, downward sloping line"
    }, {
      "option" : "D",
      "text" : "As a straight, upward sloping line"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A project burndown chart is an often used information radiator to show iteration progress. It charts two series: the actual work remaining and ideal/estimated work remaining. The vertical axis is the work unit (often story points or hours) and the horizontal axis is iteration duration (typically in number of days). The ideal/estimated work series is a straight,     downward     sloping    line originating on the vertical axis at the value of work to be completed (e.g.,  20 story points) and extending to the horizontal axis (i.e., 0 story points) on the last day of the iteration. The actual series is dependent upon the agile team's productivity and the task complexity and is updated daily. The actual series is typically volatile and is not a straight line but ebbs and flows as the project team tackles the development process. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "On a burndown chart, how does the charted 'actual work accomplished' series appear?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme  software development"
    }, {
      "option" : "B",
      "text" : "Kaizen value development"
    }, {
      "option" : "C",
      "text" : "Lean software development"
    }, {
      "option" : "D",
      "text" : "Extreme  unified process (EUP)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Agile project management places strong emphasis on 'continuous improvement.'   Continuous improvement processes are built into the agile methodology, from customers providing feedback after each iteration to the team reserving time to reflect on its performance through retrospectives after each iteration. Ongoing unit and integration testing and keeping up with technological/industry developments also play a part in the continuous improvement process. Continuous improvement is also a key principle in the lean methodology, where a focus of removing waste from the value stream is held. [The Art of Agile Development.         James         Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which framework often leveraged in agile heavily emphasizes continuous improvement?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Simple unified process (SUP)"
    }, {
      "option" : "B",
      "text" : "Extreme unified process (EUP)"
    }, {
      "option" : "C",
      "text" : "Agile unified process (AUP)"
    }, {
      "option" : "D",
      "text" : "Adapted  unified process (AdUP)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Agile Unified Process (AUP) is a simplified version of the Unified Process, or UP (UP itself is a more detailed framework for iterative and incremental software development). AUP simplifies UP for the agile framework. AUP projects use four phases: 1) inception, 2) elaboration, 3) construction, and 4) transition. At the end of each short iteration, the team delivers a working product. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair  Cockburn.]  [Knowledge  and Skills: Level 2]"
    },
    "question" : "Which framework uses the following four phases: 1. inception,  2. elaboration, 3. construction, 4. transition?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "ToRonTO"
    }, {
      "option" : "B",
      "text" : "BoSToN"
    }, {
      "option" : "C",
      "text" : "MoSCoW"
    }, {
      "option" : "D",
      "text" : "HaMBurG"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The MoSCoW technique is commonly used in agile to prioritize user stories and create a story  map. The MoSCoW technique prioritizes user stories into the following groups in descending order of priority: M - Must have; S - Should have; C - Could have; W - Would have. Must have items are those product features which are absolutely essential to develop. Should have items are product features that are not essential but have significant business value. Could have items are product features that    would add some business value. Would have items are product features that have marginal business value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Perry is about to prioritize user stories to develop a story map with her agile team. What technique is commonly used to do so?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Face-to-face communication whenever possible  and continuous improvement"
    }, {
      "option" : "B",
      "text" : "Face-to-face communication whenever possible and self- organizing teams"
    }, {
      "option" : "C",
      "text" : "Individuals and interactions over processes and tools, and customer collaboration over contract negotiation"
    }, {
      "option" : "D",
      "text" : "Face-to-face  communication whenever possible and ensuring that business people and developers work together"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four values are: 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation,   and   4)   responding    to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly   reflecting   on   how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "Two of the Agile Manifesto's four core values cover communication values. Select these values from the list."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Specification of iterations and release plans"
    }, {
      "option" : "B",
      "text" : "Detailed project plan"
    }, {
      "option" : "C",
      "text" : "Project vision, scope and requirements, and project schedule"
    }, {
      "option" : "D",
      "text" : "Feature breakdown structure"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The focus in the envisioning phase is on project vision, scope (and requirements), project schedule, and assembling a project team. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Chris is serving as a scrum master for a local software company. In the envisioning phase of Jim Highsmith's agile project management  model, Chris and his team will focus on which of the following items?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Half  the  squared  sum  of the 50% confidence estimate for all tasks"
    }, {
      "option" : "B",
      "text" : "Sum the 50% confidence estimate for all tasks"
    }, {
      "option" : "C",
      "text" : "Half the sum of the total safety time for all the tasks in a project"
    }, {
      "option" : "D",
      "text" : "Find the square root of half the 50% confidence estimate for all tasks"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A project buffer is extra time added to the end of a project to account for delays, obstacles, and other unforeseen issues to help predict an accurate completion date. A project buffer can be estimated using several methods. Three commonly used methods are 1) square root of the sum of squares method, 2) Critical chain project management method  (CCPM), 3) halving the sum of most likely estimates . The square root of the sum of squares method involves finding a local safety for all tasks, squaring all the local safeties, summing these squares, and then finding the square root of the sum. The Critical chain project management method (CCPM) is the sum of half the local safeties   of all tasks. The local safety is the difference between the  50% confidence estimate and the 90% confidence estimate. The halving the sum of most likely estimates method involves adding all the most likely estimates and dividing by two. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Select the correct definition of the Critical chain project management method (CCPM) used in estimating a project buffer."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fine-grained coordination, a fine focus, lengthy discussion"
    }, {
      "option" : "B",
      "text" : "Fine-grained coordination, a fine focus, and daily commitment"
    }, {
      "option" : "C",
      "text" : "Fine-grained coordination, daily commitment, and short iterations"
    }, {
      "option" : "D",
      "text" : "Fine-grained coordination, peer pressure, and a safety net"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The key characteristics of a healthy stand-up meeting include: peer pressure - the team is dependent upon each other so expectations of peers drives progress; fine-grained coordination    -    the    team     should understand the necessity for focus and working dependently; fine focus - the team should understand the need for brevity in the stand-up meeting so the team can be productive; daily commitment - the team should understand the value of daily commitments to each other and uphold those commitments; identification of obstacles - the team collectively  should be aware of each other's obstacles so that the team collectively can try to resolve them. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "A healthy stand-up  meeting has several characteristics. Select the response that lists a majority of these characteristics."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Tailorable"
    }, {
      "option" : "B",
      "text" : "Firm"
    }, {
      "option" : "C",
      "text" : "Set"
    }, {
      "option" : "D",
      "text" : "Inelastic"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the  beginning of an effort and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote   a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and    strive    to    conform    to   those standards while also being open to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "First find the 90% confidence level value of all tasks. Next, sum the square of these values. Finally, find the square root of the sum."
    }, {
      "option" : "B",
      "text" : "First find the 10% confidence level value of all tasks. Next, sum the square of these values. Finally, find the square root of the sum."
    }, {
      "option" : "C",
      "text" : "First find the local pessimum value of all tasks. Next, sum the square of these values. Finally, find the square root of the sum."
    }, {
      "option" : "D",
      "text" : "First find the local safety value of all tasks. Next, sum the square of these values. Finally, find the square root of the sum."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A project buffer is extra time added to the end of a project to account for delays, obstacles, and other unforeseen issues to help predict an accurate completion date. A project buffer can be estimated using several methods. Three commonly used methods are 1) square root of the sum of squares method, 2) Critical chain project management method  (CCPM), 3) halving the sum of most likely estimates . The square root of the sum of squares method involves finding a local safety for all tasks, squaring all the local safeties, summing these squares, and then finding the square root  of  the  sum.  The  Critical   chain project management method (CCPM) is the sum of half the local safeties of all tasks. The local safety is the difference between the  50% confidence estimate and the 90% confidence estimate. The halving the sum of most likely estimates method involves adding all the most likely estimates and dividing by two. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Define Cohn's square root of the sum of squares method that is often used to calculate a project buffer."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Static"
    }, {
      "option" : "B",
      "text" : "Fixed"
    }, {
      "option" : "C",
      "text" : "Adaptable"
    }, {
      "option" : "D",
      "text" : "Rigid"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the  beginning   of   an   effort   and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote   a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards while also being open to adapting those standards throughout the project to optimize performance and delivered value. Project  standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed"
    }, {
      "option" : "B",
      "text" : "Static"
    }, {
      "option" : "C",
      "text" : "Rigid"
    }, {
      "option" : "D",
      "text" : "Adjustable"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the  beginning   of   an   effort   and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote   a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards while also being open to adapting those standards throughout the project to optimize performance and delivered value. Project  standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed, flexible or accept"
    }, {
      "option" : "B",
      "text" : "Fixed, flexible or closed"
    }, {
      "option" : "C",
      "text" : "Fixed, formed, or closed"
    }, {
      "option" : "D",
      "text" : "Fixed, floating, or accept"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The project trade-off matrix classifies the constraints of scope, schedule, and cost as fixed, flexible, or accept.   [Agile   Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Planning, monitoring, and adapting]"
    },
    "question" : "How does the project trade-off matrix  classify the constraints of scope, cost, and schedule?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed-value"
    }, {
      "option" : "B",
      "text" : "Fixed-cost"
    }, {
      "option" : "C",
      "text" : "Fixed-budget and fixed- schedule"
    }, {
      "option" : "D",
      "text" : "Fixed-price"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but  before  a  project  will  commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Highsmith has indicated that a particular type of contract is suitable for  the  agile  method.  Which  type of contract does Highsmith indicate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "General service for the initial phase with fixed-price contracts for successive phases; cost- reimbursable/time and materials; not-to-exceed with fixed-fee"
    }, {
      "option" : "B",
      "text" : "General service for the initial phase with fixed-price contracts for successive phases; cost- reimbursable/time and materials; fixed-price"
    }, {
      "option" : "C",
      "text" : "Fixed-price; cost- reimbursable/time and materials; not-to-exceed with fixed-fee"
    }, {
      "option" : "D",
      "text" : "General service for the initial phase with fixed-price contracts for successive phases; fixed- price; not-to-exceed with fixed- fee"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Fixed-price contracts, although typical of traditional projects where scope is defined ahead of time, are not well suited for agile. When scope is fixed it can deter a team from exploring out-of-scope solutions that may add value to the product. Contracts   suited   for   agile   include: general service for the initial phase with fixed-price contracts for successive phases; cost-reimbursable/ time and materials; not-to-exceed with fixed-fee; and a combination with incentives. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Select  the response  that    lists contract  types   suited  for agile development."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Setting a range of acceptable story points that the team may accomplish within a set time period."
    }, {
      "option" : "B",
      "text" : "Setting a range of acceptable tasks that the team may accomplish within a set time period."
    }, {
      "option" : "C",
      "text" : "Setting an estimated and realistic duration for how long a task will take to perform."
    }, {
      "option" : "D",
      "text" : "Setting a strict, time requirement for the duration  of task performance."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Timeboxing is a realistic estimate or expectation of how long an action, task, or event will take to perform. Some tasks cannot be performed in the initial timeboxed estimate  and  are  good  candidates for reevaluation and possibly further decomposition into more tasks. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Define the concept of 'timebox' as used in task definition."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed-budget"
    }, {
      "option" : "B",
      "text" : "Fixed-schedule"
    }, {
      "option" : "C",
      "text" : "Fixed-price"
    }, {
      "option" : "D",
      "text" : "Fixed-budget and fixed-schedule"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost.  Generally  speaking,  the  budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price  contracts  for  iterations  or  user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "According to Highsmith, the agile project management approach is suitable for what type of contract?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Leading the team"
    }, {
      "option" : "B",
      "text" : "Motivating the team"
    }, {
      "option" : "C",
      "text" : "Criticizing the team"
    }, {
      "option" : "D",
      "text" : "Reforming the team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations.   Some   simple   steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills:   Level 1]"
    },
    "question" : "Jill, as project lead, has been using mentoring to help coach her team to improve its performance. What is Jill doing when she provides mentoring?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A measure of the number of user story points or stories completed per iteration. "
    }, {
      "option" : "B",
      "text" : "A measure of the number of user story points planned per release. "
    }, {
      "option" : "C",
      "text" : "A measure of the number of user story points planned for an iteration."
    }, {
      "option" : "D",
      "text" : "A measure of the number of user story points completed per day."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Velocity is a measure of the number of user story points or stories completed by a team per iteration. An agile team can use its previous  velocity recordings as a method of estimating how many user story points it may complete in the next iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Select  the best  definition  of velocity."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Time and cost"
    }, {
      "option" : "B",
      "text" : "Cost"
    }, {
      "option" : "C",
      "text" : "Budget and cost"
    }, {
      "option" : "D",
      "text" : "Budget and time"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Time, budget, and cost estimation is an important knowledge and  skill  area  of  agile.  According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements  are  agreed  upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Harry is the financial executive for an upcoming project that is slated to use agile. In terms of estimating time, budget, and cost for an agile effort, what does Harry typically have defined?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Defect reduction"
    }, {
      "option" : "B",
      "text" : "Regularly reflection on how to become more effective."
    }, {
      "option" : "C",
      "text" : "Focus on product value"
    }, {
      "option" : "D",
      "text" : "Test-driven development"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated  individuals.  Give  them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures,       requirements,      and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration planner"
    }, {
      "option" : "B",
      "text" : "Product owner"
    }, {
      "option" : "C",
      "text" : "Customer"
    }, {
      "option" : "D",
      "text" : "Project leader"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project  leader  method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined;    empowering    the   team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating  effectively; and,  be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'ensures that all stakeholders, including business managers and developers, are collaborating effectively?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Focusing your full attention on a speaker."
    }, {
      "option" : "B",
      "text" : "Focusing your full attention to any inconsistencies in the speaker's argument."
    }, {
      "option" : "C",
      "text" : "Focusing your full attention on what to say next in the conversation."
    }, {
      "option" : "D",
      "text" : "Focusing your full attention on environmental surroundings."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being  present  and  focusing   your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses best defines active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Following a plan"
    }, {
      "option" : "B",
      "text" : "Working software"
    }, {
      "option" : "C",
      "text" : "Comprehensive documentation"
    }, {
      "option" : "D",
      "text" : "Processes and tools"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with    primary    values     superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Of the following, which response  lists one of its primary values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Face-to-face communication whenever possible"
    }, {
      "option" : "B",
      "text" : "Osmotic communication"
    }, {
      "option" : "C",
      "text" : "Near Field Communication"
    }, {
      "option" : "D",
      "text" : "Group-think communication"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four  values  are:  1)  individuals    and interactions  over  processes  and tools, 2) working software over comprehensive documentation, 3) customer collaboration over contract negotiation, and 4) responding to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining    a    constant    pace     of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "The Agile Manifesto includes 12 principles. Which selection is the correct  principle  outlining  the  Agile Manifesto's communication preference?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Regulatory compliance"
    }, {
      "option" : "B",
      "text" : "Forced compliance"
    }, {
      "option" : "C",
      "text" : "Documentation compliance"
    }, {
      "option" : "D",
      "text" : "Certification compliance"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Although in agile project management, it is generally practiced to generate minimal documentation to support the project, some specific documents, like those required by regulatory bodies need to be created to comply  with  local  and  federal   law. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Chris is  reviewing a long, descriptive document about his agile project that is required by local regulations. This type of conformance to local law is known as"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Interpersonal gamesmanship"
    }, {
      "option" : "B",
      "text" : "Influence"
    }, {
      "option" : "C",
      "text" : "Fortitude"
    }, {
      "option" : "D",
      "text" : "Emotional numbness"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Higgs & Dulewicz (1999) defines emotional intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4) Interpersonal sensitivity, 5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. Which of the following is one of the seven components of emotional intelligence as defined by Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "From the fact that team members must stand-up to challenges presented to them in the previous sprint"
    }, {
      "option" : "B",
      "text" : "From the fact that all team members are encouraged to physically stand-up during the meeting to ensure for the meeting's efficiency."
    }, {
      "option" : "C",
      "text" : "From the fact that a team member must physically stand-up when called upon by the project leader to present yesterday's progress."
    }, {
      "option" : "D",
      "text" : "From the fact that team members must stand-up or present exploratory ideas to the team to determine project feasibility"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The term 'stand-up' originates from the fact that ALL team members are encouraged to stand during the meeting to promote meeting  efficiency. The theory is that by physically standing no one will get comfortable enough to waste valuable time. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "Where does the agile methodology technique of 'stand-up' meeting get its name?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Entropic communication"
    }, {
      "option" : "B",
      "text" : "Osmotic communication"
    }, {
      "option" : "C",
      "text" : "Chaordic communication"
    }, {
      "option" : "D",
      "text" : "Active listening"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated   team  members unconsciously. By sharing the same work environment, team members  are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Henry and Vicky are developers on an agile project. Many times Vicky is aware of Henry's daily situation without speaking directly with him and can help him problem solve if needed. What are Henry and Vicky benefiting from?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Function points"
    }, {
      "option" : "B",
      "text" : "Use case points"
    }, {
      "option" : "C",
      "text" : "Task points"
    }, {
      "option" : "D",
      "text" : "Story points"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Agile teams typically use story points to estimate the relative size or effort of developing a user story [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Kyle and his agile team have taken a user story that it estimates to be of average difficulty to develop and assigned it a value of 10; Now Kyle and his team must estimate the relative size or effort of other user stories in  the backlog relative to this average user story. What unit is the value of 10 most likely in?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "General service contract for the initial phase with separate fixed-schedule contracts for each iteration."
    }, {
      "option" : "B",
      "text" : "General service contract for the initial phase with separate fixed-price contracts for each iteration."
    }, {
      "option" : "C",
      "text" : "Specific service contract for the initial phase with separate fixed-price contracts for each iteration."
    }, {
      "option" : "D",
      "text" : "Specific service contract for the initial phase with separate fixed-schedule  contracts  for each iteration."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency  to  provide  improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products      Ð      2nd      Edition.    Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select from the following types of contracts, the one most suited for the agile framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who constantly criticizes team members so that they are aware of their defects  and can improve their performance."
    }, {
      "option" : "B",
      "text" : "Someone who inspires  the team to focus on customer and product quality and value through an open and transparent development environment where the team is self-organizing and self-disciplined."
    }, {
      "option" : "C",
      "text" : "Someone that drives the team to maximum and unsustainable performance levels to exceed customer expectations."
    }, {
      "option" : "D",
      "text" : "Someone who inspires the team to focus on schedule, cost, and scope in a top-down, decision making  development environment."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership   and   responsibility   of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate  the  product  vision  to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Quimby has recently started an agile project where she is to be the project leader. What should Quimby aspire to be as agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The project roadmap."
    }, {
      "option" : "B",
      "text" : "The project vision."
    }, {
      "option" : "C",
      "text" : "The project charter."
    }, {
      "option" : "D",
      "text" : "The project data sheet."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A project charter provides a brief overview of product functionality and serves as a guide for testers performing exploratory testing. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "What project artifact is helpful for testers performing an exploratory test? The artifact gives a brief overview of product functionality."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Both strategies involve writing unit tests that never fail to help software development."
    }, {
      "option" : "B",
      "text" : "They are one and the same strategy, but called by different names based on the agile framework being used."
    }, {
      "option" : "C",
      "text" : "Both strategies involve writing product code before test code."
    }, {
      "option" : "D",
      "text" : "Both strategies involve writing test code before product code."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the   user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business   stakeholders   for  feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "How are test-driven development and  acceptance  test-driven development similar?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "At least once per day"
    }, {
      "option" : "B",
      "text" : "Once per iteration"
    }, {
      "option" : "C",
      "text" : "Once per release"
    }, {
      "option" : "D",
      "text" : "Immediately before release"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "An XP project typically integrates code at least once per day. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "How  often is  code  typically integrated on an XP effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A team defined term that indicates when a user story point is completed."
    }, {
      "option" : "B",
      "text" : "A team defined term that indicates when a project is successfully completed."
    }, {
      "option" : "C",
      "text" : "A team and product owner defined term that indicates when  a feature or product is considered to be completed and ready for shipping."
    }, {
      "option" : "D",
      "text" : "A team defined term that indicates when a scrum has completed for the day."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Because a cornerstone of the scrum framework in agile is to 'always have a product that you could theoretically ship,' it is important for the team and product owner to have   a definition of 'done' or what criteria is necessary to consider user features or functionality in a state of finality. [Coaching Agile Teams. Lyssa Adkins.] [Product quality]"
    },
    "question" : "Select the best definition 'done.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because of its tendency to release working products in short time increments, verification and validation take place frequently."
    }, {
      "option" : "B",
      "text" : "Because of its tendency to reuse old programming software, verification and validation take place frequently."
    }, {
      "option" : "C",
      "text" : "Because  customer requirements are constantly changing, frequent verification and validation is the only means to ensure the work breakdown structure."
    }, {
      "option" : "D",
      "text" : "Because working products are released only at the end of a project, verification  and validation take place frequently."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story)  and  validation  is the confirmation that a product behaves as desired (i.e., meets the customer's need). Sometimes a product may be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "In agile, what is meant by frequent verification and validation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having integrated  but incomplete units of source code."
    }, {
      "option" : "B",
      "text" : "Having a working product ready to ship at any time."
    }, {
      "option" : "C",
      "text" : "Having semi-working functionality at any time."
    }, {
      "option" : "D",
      "text" : "Having integrated but untested source code."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Being continuously integrated theoretically means having a working product ready to ship at any time. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Being  continuously  integrated theoretically means"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Refactor testing"
    }, {
      "option" : "B",
      "text" : "Exploratory testing"
    }, {
      "option" : "C",
      "text" : "Assimilation testing"
    }, {
      "option" : "D",
      "text" : "Interface testing"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Regular exploratory testing is encouraged to improve  product quality. Typically, exploratory testing is performed on completed product software to test the system design for any bugs and to identify any new features that may add value to the customer. Exploratory testing should cover what a developer is unable to anticipate through the course  of normal unit testing. A project charter  is often used as a general overview of the product that exploratory testers use for testing guidance. [The Art of Agile Development.  James  Shore.] [Product quality]"
    },
    "question" : "Kyle is performing a type of test that is done throughout an agile project and on the completed product. In his testing, Kyle is trying to uncover any software bugs or system design faults that may not have been identified in typical unit testing. What type of testing is Kyle performing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Top-down design"
    }, {
      "option" : "B",
      "text" : "Test-design development"
    }, {
      "option" : "C",
      "text" : "Test-driven development"
    }, {
      "option" : "D",
      "text" : "Test-driven design"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Test-driven development, or TDD, is an agile methodology that has software developers develop automated software tests before developing software that implements product features. This helps ensure quality as each bit of feature software is tested individually to remove bugs and improve performance before it is integrated with the final product. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "What does TDD stand for in agile parlance?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Because the iteration ended before the programmers could get the desired excitability for the feature."
    }, {
      "option" : "B",
      "text" : "Because extreme excitement is not easily testable."
    }, {
      "option" : "C",
      "text" : "Because the programmers failed to read the story card properly."
    }, {
      "option" : "D",
      "text" : "Because the product owner changed her mind."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The BEST answer is because the acceptance criteria is too vague (remember the T of INVEST for defining good user stories) and cannot be easily tested. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "A product owner specifies in acceptance criteria that a user feature provide extreme excitement to the end user. However, when reviewing the feature in the sprint demo, the product owner complains the feature does not provide the extreme excitement she wanted. Why might this type of reaction occur?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Unit and spike"
    }, {
      "option" : "B",
      "text" : "Exploratory and spike"
    }, {
      "option" : "C",
      "text" : "Unit and exploratory"
    }, {
      "option" : "D",
      "text" : "Unit and integration"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The commit build process includes both unit and integration testing. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "The commit build process includes what type of testing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Immediately."
    }, {
      "option" : "B",
      "text" : "At the end of the release."
    }, {
      "option" : "C",
      "text" : "At iteration intervals to synchronize  configuration management."
    }, {
      "option" : "D",
      "text" : "At the end of the sprint."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The  extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Following the XP principle of continuous integration, when is completed code integrated into the code base?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "At the end of the release."
    }, {
      "option" : "B",
      "text" : "At the end of the sprint."
    }, {
      "option" : "C",
      "text" : "At iteration intervals to synchronize  configuration management."
    }, {
      "option" : "D",
      "text" : "Immediately."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The extreme programming (XP) principle of continuous integration  is  that  code  is  integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Jerry on an XP influenced agile team has just completed coding a new feature. When should he integrate the new code into the code base?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Supports rapid delivery  of working software"
    }, {
      "option" : "B",
      "text" : "Decreases the need for testing"
    }, {
      "option" : "C",
      "text" : "Decreases  the need  for customer feedback"
    }, {
      "option" : "D",
      "text" : "Decreases the need for team communication and collaboration"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built,   tested,   and   completed.   Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "What is an advantage of continuous integration, as practiced in XP?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Verify and validate  that  the test fails"
    }, {
      "option" : "B",
      "text" : "Write product code and apply the test"
    }, {
      "option" : "C",
      "text" : "Refactor the product code"
    }, {
      "option" : "D",
      "text" : "Write test code that will fail"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and apply the test, 4) Refactor the product code. An example may be that a user has to enter an age value. A good test is to make sure the user  data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would verify that entering a letter instead of a number would cause the program to cause an exception (i.e., v&v the test). The programmer would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product code is successful, the programmer would refactor  the product code to improve its design. Using   these   four   steps    iteratively ensures that programmers think about how a software program might fail first and to build product code that is holistically being tested. This helps produce high quality code. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "TDD has four basic steps. What is the first step in TDD?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Both strategies involve using an inversion model to refactor old software code."
    }, {
      "option" : "B",
      "text" : "Both techniques involve using a cyclical, four-step process."
    }, {
      "option" : "C",
      "text" : "Both strategies are for the Visual Basic programming language only."
    }, {
      "option" : "D",
      "text" : "Both strategies are for the C# programming language only."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative  cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That  is,  what  the  acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "Sarah is explaining to Hanson the similarities between test-driven development and acceptance test- driven development. Can you help  her identify a similarity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fixed-cost"
    }, {
      "option" : "B",
      "text" : "General service contract for the initial phase with separate fixed-schedule contracts for each user story."
    }, {
      "option" : "C",
      "text" : "Time-and-vendor"
    }, {
      "option" : "D",
      "text" : "Not-to-exceed with fixed-fee"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule    because    changing    scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract   for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select from the following types of contracts, the one most suited for the agile framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Generating insights"
    }, {
      "option" : "B",
      "text" : "Creating a safe  environment that is open and honest"
    }, {
      "option" : "C",
      "text" : "Deciding what to do"
    }, {
      "option" : "D",
      "text" : "Gathering data"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Setting the stage for a retrospective means creating a safe environment that is open and honest. [Agile  Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "In a retrospective, a good  facilitator always remembers to 'set the stage.' What does set the stage mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Refactoring the team"
    }, {
      "option" : "B",
      "text" : "Guiding the team"
    }, {
      "option" : "C",
      "text" : "Reforming the team"
    }, {
      "option" : "D",
      "text" : "Motivating the team"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring  and  coaching;  where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jules, as an agile mentor, has been empowering the team to make many key decisions. What is Jules doing when he provides this empowerment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A team that relies on external leadership to show it the path forward."
    }, {
      "option" : "B",
      "text" : "A team that is told what to do and how to do it."
    }, {
      "option" : "C",
      "text" : "A team that takes ownership of a product and is collectively responsible for its delivery."
    }, {
      "option" : "D",
      "text" : "A team that solves problems through the use of  market research."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the best definition of an 'empowered team.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Hank is not hurting the team's progress, but, in fact, improving it by comprehensively covering all pertinent talking points of the stand-up meeting."
    }, {
      "option" : "B",
      "text" : "Hank should open first with the discussion regarding technical obstacles as this is what will impact team performance the most."
    }, {
      "option" : "C",
      "text" : "Hank should start first with what he plans to achieve before the next meeting before discussing what he has achieved since the last meeting."
    }, {
      "option" : "D",
      "text" : "Hank is spending too much time discussing the obstacles he is facing with the team. The team should confront Hank that any obstacles that cannot be discussed in a few minutes should be tabled for later discussion with the appropriate stakeholders."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Issues that take longer than a few minutes to resolve in a daily stand-up meeting should be tabled and resolved between the appropriate parties after the daily stand-up meeting has concluded. This ensures that the meetings   are   brief   and  productive. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "It is Hank's turn in the daily stand- up meeting. He starts reviewing what he has achieved since the last meeting, continues with what he plans to achieve before the next meeting, and then rambles for 15 minutes about the minutiae of technical obstacles to his progress. How is Hank hurting the agile team's progress?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having a single- discipline/homogenous group so that the team can communicate more effectively."
    }, {
      "option" : "B",
      "text" : "Having a multi- disciplinary/diverse group so that many different perspectives are available."
    }, {
      "option" : "C",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    }, {
      "option" : "D",
      "text" : "Delaying any criticism that may hamper idea generation."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that  Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Delaying any criticism that may hamper idea generation."
    }, {
      "option" : "B",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    }, {
      "option" : "C",
      "text" : "Having a multi- disciplinary/diverse group so that many different perspectives are available."
    }, {
      "option" : "D",
      "text" : "Ignore team members that she feels provide little value."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may   stifle   idea   generation.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having a multi- disciplinary/diverse group so that many different perspectives are available."
    }, {
      "option" : "B",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    }, {
      "option" : "C",
      "text" : "Delaying any criticism that may hamper idea generation."
    }, {
      "option" : "D",
      "text" : "Split the team into competitive factions to promote a sense of urgency."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism   that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having a single- discipline/homogenous group so that the team can communicate more effectively."
    }, {
      "option" : "B",
      "text" : "Leaving participants in the dark until the day of the meeting to add an element of surprise."
    }, {
      "option" : "C",
      "text" : "Encouraging criticism early and often to prevent poorly thought out ideas entering the conversation as technical debt."
    }, {
      "option" : "D",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse    team    to    get    a     broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : " As agile team leader, Nathan intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is a good brainstorming technique that Nathan should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session."
    }, {
      "option" : "B",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    }, {
      "option" : "C",
      "text" : "Hosting the meeting in a neutral and comfortable environment."
    }, {
      "option" : "D",
      "text" : "Picking  a reserved  team member as facilitator."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Stacey intends to schedule a brainstorming session to  generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming   technique   that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Hosting the meeting in  a neutral and   comfortable environment."
    }, {
      "option" : "B",
      "text" : "Allow only the dominant personalities to contribute."
    }, {
      "option" : "C",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session."
    }, {
      "option" : "D",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule,   and   what   ground    rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Having fine-grained coordination during a stand-up meeting indicates that the team understands how important it is to have a sharp,  interdependent focus for the duration of the meeting."
    }, {
      "option" : "B",
      "text" : "Having fine-grained coordination during a stand-up meeting indicates that each team member is solely focused on his or her own obstacles and uninterested in other team members' progress or obstacles."
    }, {
      "option" : "C",
      "text" : "Having fine-grained coordination during a stand-up meeting indicates a lack of defects and well tested and integrated code."
    }, {
      "option" : "D",
      "text" : "Having fine-grained coordination during a stand-up meeting is a false indicator of a healthy stand-up meeting. The team should have a broad focus to remain open to innovative ideas from other sectors of industry."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The key characteristics of a healthy stand-up meeting include: peer pressure - the team is dependent upon each other so expectations of peers drives progress; fine-grained coordination - the team should understand the necessity for focus  and working dependently; fine focus - the team should understand the need for brevity in the stand-up meeting so the team can be productive; daily commitment - the team should understand the value of daily commitments to each other and uphold those commitments; identification of obstacles - the team collectively  should be aware of each other's obstacles so that the team collectively can try to resolve them. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "As an agile certified practitioner, Roger extols the virtue of fine-grained communication in the daily stand-up meeting. How is fine-grained communication an indicator of a healthy stand-up meeting?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A constraints-based analysis technique"
    }, {
      "option" : "B",
      "text" : "A priority-based  analysis technique"
    }, {
      "option" : "C",
      "text" : "A value-based analysis technique"
    }, {
      "option" : "D",
      "text" : "An WIDETOM analysis technique"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are often prioritized with prioritization based on value and risk. Prioritization can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Henry is using the MoSCoW technique to understand the value of each feature according to  the customer. What is MoSCoW an example of?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Guiding a team or person to improve performance."
    }, {
      "option" : "B",
      "text" : "Helping a person or team collaborate with one another."
    }, {
      "option" : "C",
      "text" : "Helping a person or team prioritize features in the backlog."
    }, {
      "option" : "D",
      "text" : "Helping a person or team come up with new ideas."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Coaching   and   mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of coaching and mentoring?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Helping a person or team improve performance and reach goals."
    }, {
      "option" : "B",
      "text" : "Helping a person or team communicate with one another."
    }, {
      "option" : "C",
      "text" : "Helping a person or team prioritize features in the backlog."
    }, {
      "option" : "D",
      "text" : "Helping a person or team come up with new ideas."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals.  [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of coaching and mentoring?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Both are methods to confirm product quality. Verification confirms the product meets specified requirements. Validation confirms the product meets the holistic intent of the customer."
    }, {
      "option" : "B",
      "text" : "Both are methods to confirm product quality. Verification confirms the product meets specified requirements. Validation confirms the product meets the holistic intent of the customer."
    }, {
      "option" : "C",
      "text" : "Both are methods to increase product value. Verification confirms new features to be added. Validation confirms the new features were built correctly."
    }, {
      "option" : "D",
      "text" : "Both are methods to confirm product scope. Verification confirms product features are in scope.   Validation   confirms   no product features are out of scope."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the   customer's   need).   Sometimes a product may be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated.   [Agile   Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "Pick the response that best compares and contrasts verification and validation."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Helping a person or team come up with new ideas."
    }, {
      "option" : "B",
      "text" : "Helping a person or team prioritize features in the backlog."
    }, {
      "option" : "C",
      "text" : "Providing guidance and direction to a person or group in an effort to improve performance."
    }, {
      "option" : "D",
      "text" : "Helping a person or team work together effectively."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic     goals.     [Coaching    Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of coaching and mentoring?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Helps  facilitate  iteration development."
    }, {
      "option" : "B",
      "text" : "Helps  facilitate  prioritization of features."
    }, {
      "option" : "C",
      "text" : "Helps  facilitate  reflection meetings."
    }, {
      "option" : "D",
      "text" : "Helps facilitate daily stand-up meetings."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative   work   effort   (e.g.,  planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development. James Shore.] [Agile analysis and design]"
    },
    "question" : "Christy is confused about the purpose of a product roadmap. She asks Thomas, her project manager, to identify a benefit of a product roadmap to help her understand a product roadmaps purpose. Select the benefit of a product roadmap."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "B",
      "text" : "Symptom and solution"
    }, {
      "option" : "C",
      "text" : "Coaching and meeting"
    }, {
      "option" : "D",
      "text" : "Consolidating and mentoring"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile    has    a    value    of  continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile      Teams.      Lyssa      Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Susan is concerned with the recent stagnant performance of her agile team. She believes it to be highly capable  but  the  team  seems to be lacking a desire to improve. What  agile knowledge and skill technique might Susan consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and meeting"
    }, {
      "option" : "B",
      "text" : "Profiteering and gamesmanship"
    }, {
      "option" : "C",
      "text" : "Consolidating and mentoring"
    }, {
      "option" : "D",
      "text" : "Coaching and mentoring"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile  team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Clare is concerned with the recent stagnant performance of her agile team. She believes it to be highly capable but the team does not seem to be focused on improving over its current level. What agile knowledge and skill technique might Clare consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "High-level project scope, multiple iterations of product development, teams are self- organizing, extensive customer involvement"
    }, {
      "option" : "B",
      "text" : "High-level project scope, multiple iterations of product development, teams are delegated tasks from the top-down, extensive customer involvement"
    }, {
      "option" : "C",
      "text" : "High-level project scope, multiple iterations of product development, teams are self- organizing, minimized customer involvement"
    }, {
      "option" : "D",
      "text" : "High-precision project scope, multiple iterations of product development,    teams    are   self-organizing, extensive customer involvement"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Agile project management differs fundamentally from traditional project  management  in  the following ways: High-level project scope, multiple iterations of product development, teams are self- organizing, extensive customer involvement. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "According to Highsmith, Agile project management differs from traditional project management in  what four fundamental ways?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "High-value, high-risk"
    }, {
      "option" : "B",
      "text" : "Low-value, high-risk"
    }, {
      "option" : "C",
      "text" : "High-value, low-risk"
    }, {
      "option" : "D",
      "text" : "Low-value, low-risk"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A risk-adjusted backlog is a product backlog organized by taking into account risk. Risk can be estimated as the product of severity/consequence and likelihood. User stories can also be positioned on  a risk-to-value matrix to help prioritize them in the backlog. The risk-to-value matrix is a chart with four quadrants. Along the horizontal axis is value in ascending order. Along the vertical axis is risk in ascending order. A user story that is high risk and high value is located in the top-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk  and low value is located in the lower- left corner. Typically a team will prioritize high-value, low-risk user stories first, followed by high-value, high-risk   user   stories,   followed  by low-value, low-risk user stories, followed by low-value, high-risk user stories. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "A risk-to-value chart may be used to help prioritize user stories in the product backlog. Select the type of user-story that is typically given low priority in the backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Hold a Kaizen event."
    }, {
      "option" : "B",
      "text" : "Hold a risk-mitigation reflection workshop."
    }, {
      "option" : "C",
      "text" : "Hold a value stream mapping event."
    }, {
      "option" : "D",
      "text" : "Perform  risk-based  spike tasks."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Risked-based spike is a risk management technique and is often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need to understand how  migrating from Windows 7 to Windows 8 may impact the look and feel of the interface.        Risked-based        spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Theresa and her agile team are planning an iteration that holds several tasks with high risk. What is one method that Theresa and her team can use to reduce risk?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Two-card poker"
    }, {
      "option" : "C",
      "text" : "Affinity poker"
    }, {
      "option" : "D",
      "text" : "Hold'Em poker"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an  identical  deck  of  planning   poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected   a   card,   everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "If an agile team is 'playing' a game of poker for estimation, what game is  it mostly playing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Capturing and mentoring"
    }, {
      "option" : "B",
      "text" : "Incentive and profit"
    }, {
      "option" : "C",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "D",
      "text" : "Coaching and mobilizing"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve    performance    and   achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Esther is concerned with the recent stagnant performance of her agile team. She believes it to be highly capable but the team is stuck at an average level of performance. What agile knowledge and skill technique might Esther consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Hosting the meeting in a neutral and comfortable environment."
    }, {
      "option" : "B",
      "text" : "Encouraging criticism early and often to prevent poorly thought out ideas entering the conversation as technical debt."
    }, {
      "option" : "C",
      "text" : "Delaying any criticism that may hamper idea generation."
    }, {
      "option" : "D",
      "text" : " Having an engaging and experienced facilitator lead the brainstorming session."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may   stifle   idea   generation.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Trust that the team will be self-organizing and facilitate the event itself."
    }, {
      "option" : "B",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session."
    }, {
      "option" : "C",
      "text" : "Delaying any criticism that may hamper idea generation."
    }, {
      "option" : "D",
      "text" : "Hosting the meeting in a neutral and comfortable environment."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism   that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Stacey intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A measure of the number of user story points or stories completed per iteration."
    }, {
      "option" : "B",
      "text" : "A measure of the number of user story points completed per release."
    }, {
      "option" : "C",
      "text" : "A measure of the number of user story points completed per day."
    }, {
      "option" : "D",
      "text" : "A measure of the number of iteration plans completed  per iteration."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Velocity is a measure of the number of user story points or stories completed per iteration. An agile team can use its previous velocity values as a method of estimating how many user story points it may complete in the  next iteration. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "A common metric used in agile is velocity. What is velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Encouraging criticism early and often to prevent poorly thought out ideas entering the conversation as technical debt."
    }, {
      "option" : "B",
      "text" : "Having a multi- disciplinary/diverse group so that many different perspectives are available."
    }, {
      "option" : "C",
      "text" : "Picking a reserved team member as facilitator."
    }, {
      "option" : "D",
      "text" : "Hosting the meeting in the typical Monday morning conference room that is usually only available to certain team members."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Nathan intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is a good brainstorming technique that Nathan should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "How to stop the customer from changing requirements"
    }, {
      "option" : "B",
      "text" : "How to encourage team members to work overtime to maintain project schedule"
    }, {
      "option" : "C",
      "text" : "How to reinforce successful practices"
    }, {
      "option" : "D",
      "text" : "How to discourage any newly tried successful practice that the team did not agree to during project chartering"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "During reflection an agile team takes a break after completing an iteration to pause and contemplate about its performance. Topics include: lessons learned from successes and failures, such as programming  methods that were highly efficient or inefficient; how to reinforce successful practices, such as new testing standard practices; how to discourage negative practices, like straying from team approved coding standards in order to make an iteration deadline. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "What types of topics does an agile team cover when it performs reflection?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project leader"
    }, {
      "option" : "B",
      "text" : "Scrum member"
    }, {
      "option" : "C",
      "text" : "Business analyst"
    }, {
      "option" : "D",
      "text" : "Product owner"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a   leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish    the    overall    objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'empowers the team to work collaboratively?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Practicing agile and playing agile"
    }, {
      "option" : "B",
      "text" : "Living agile and breathing agile"
    }, {
      "option" : "C",
      "text" : "Being agile and doing agile"
    }, {
      "option" : "D",
      "text" : "Thinking agile and living agile"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile and doing agile. Being agile includes focusing on cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "Victor, as an agile leader, practices with an adaptive leadership style.  What are the two dimensions Highsmith uses to define adaptive leadership?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Passive listening"
    }, {
      "option" : "B",
      "text" : "Engaged listening"
    }, {
      "option" : "C",
      "text" : "Active listening"
    }, {
      "option" : "D",
      "text" : "Focused listening"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "One communication  technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills.  [Coaching  Agile  Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is a common communication  technique that may help teams improve their collaboration and understanding?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Finish the user story over the weekend or other downtime."
    }, {
      "option" : "B",
      "text" : "Collaborate with the customer to determine if and when the user story should be completed."
    }, {
      "option" : "C",
      "text" : "Remove the user story from the project."
    }, {
      "option" : "D",
      "text" : "Immediately add the user story to the top of the next iteration's backlog."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The team should meet with the customer to determine if and when the use story should be completed. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Harry's agile team failed to complete a user story in its most recent iteration. What should Harry and his team do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By relation to product feature"
    }, {
      "option" : "B",
      "text" : "By priority"
    }, {
      "option" : "C",
      "text" : "By authoring date"
    }, {
      "option" : "D",
      "text" : "By logical sequence  and dependency"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Various grouping methods are used to organize user stories. Typical methods are: 1) Relation to a product feature (e.g., all user stories that interact with the database), 2) By logical sequence and dependency (e.g., Group 1 must be developed before Group 2 because of technological dependency), 3) By priority based on customer value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Which of the following is NOT a typical grouping of user stories for purposes of organization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "In iteration review meetings"
    }, {
      "option" : "B",
      "text" : "In a release plan"
    }, {
      "option" : "C",
      "text" : "In formal risk review meetings"
    }, {
      "option" : "D",
      "text" : "In a retrospective"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Unlike traditional project management methods that  evaluate risk and variance and trends in formal meetings, agile incorporates risk analysis and variance and trend analysis into iteration review meetings. Risk and variance and trend analysis may   be   performed   in   agile   using information radiators, like a risk burndown chart, and the use of traditional earned value management (EVM) to measure cost and schedule variance (CV and SV, respectively). [Agile Estimating and Planning. Mike Cohn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "How may variance and trend analysis be incorporated into an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To do"
    }, {
      "option" : "B",
      "text" : "Done"
    }, {
      "option" : "C",
      "text" : "In progress"
    }, {
      "option" : "D",
      "text" : "Ready for testing"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The 'done' column holds tasks that have been completely developed, tested or verified, and integrated into the product and require no further attention. The 'done' column should not hold incomplete tasks, but ones  that are truly completed. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Greg is pleased when the customer and project testers test his most recently developed feature, find that it passes acceptance criteria, and integrate it into the product. In which column should Greg now place the associated task card?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "No more than one."
    }, {
      "option" : "B",
      "text" : "No more than two."
    }, {
      "option" : "C",
      "text" : "No more than eight."
    }, {
      "option" : "D",
      "text" : "No more than four."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is also referred to as work in process (WIP). WIP is material or parts that have started production but are not yet a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain.    One    way    of    reducing inventory is to reduce the WIP at individual machines or servers by only moving as fast as your slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that can develop a certain amount of features. In this analogy, the WIP limit is equivalent to the sprint backlog. By maintaining a WIP limit equal to the sprint backlog, no features should be incomplete at the sprint review. [Lean- Agile        Software        Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "If an agile team sets a feature  WIP limit of four for its sprint, how many features may be simultaneously developed during the sprint?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "In the demo step of the ATDD process, the agile team demonstrates the product to business stakeholders who, in turn, provide feedback on how close the team is to 'done.'"
    }, {
      "option" : "B",
      "text" : "In the discuss step of the ATDD process, developers and business stakeholders explore expected behavior of the user story. If the behavior is met, the user story is 'done.'"
    }, {
      "option" : "C",
      "text" : "In the develop step of the ATDD process, developers develop the expected behavior of the product with the intent of meeting the acceptance criteria. At this point, the user story is 'done.'"
    }, {
      "option" : "D",
      "text" : "In the distill step of the ATDD process, developers and business stakeholders identify acceptance criteria for a user story. If the acceptance criteria are well- defined, the user story is 'done.'"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and  4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code    to    implement    the     product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "How  does  acceptance test-driven software help define 'done?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "In the discuss step of the ATDD process, developers and business stakeholders explore expected behavior of the user story. If the behavior is met, the user story is 'done.'"
    }, {
      "option" : "B",
      "text" : "In the demo step of the ATDD process, the agile team demonstrates the product to business stakeholders who, in turn, provide feedback on  whether the team is to 'done.'"
    }, {
      "option" : "C",
      "text" : "In the develop step of the ATDD process, developers develop the expected behavior of the product with the intent of meeting the acceptance criteria. At this point, the user story is 'done.'"
    }, {
      "option" : "D",
      "text" : "In the distill step of the ATDD process, developers and business stakeholders identify acceptance criteria for a user story. If the acceptance criteria are well- defined, the user story is 'done.'"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors   that   the  intende software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed)  means  for  a  user    story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "Jane is explaining to her agile team that only the customer can define  when the team is 'done' with a user story. Which process step of ATDD is where the team will find out if it is 'done?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Working  as  a team  to overcome conflict."
    }, {
      "option" : "B",
      "text" : "Working individually to achieve objectives."
    }, {
      "option" : "C",
      "text" : "Working and communicating as a team to achieve objectives."
    }, {
      "option" : "D",
      "text" : "Working  independently to achieve personal goals."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Collaboration is a key soft skill negotiation skill. It involves working  in groups to create ideas, solve problems, and produce solutions. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following best defines collaboration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The  facilitation  of  resolving conflict among team members."
    }, {
      "option" : "B",
      "text" : "The facilitation of acceptance test-driven development conflicts."
    }, {
      "option" : "C",
      "text" : "The facilitation of test-driven development conflicts."
    }, {
      "option" : "D",
      "text" : "The  facilitation  of  resolving conflicting code integration."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Conflict resolution is a key  soft skill negotiation skill. It involves applying proper leadership techniques to resolve and diffuse any conflict between team members or other stakeholders. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following best defines conflict resolution?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being aware and in control of your emotions."
    }, {
      "option" : "B",
      "text" : "Being  aware of  team members' emotions."
    }, {
      "option" : "C",
      "text" : "Being aware of your emotions."
    }, {
      "option" : "D",
      "text" : "Being  in  control of  team members' emotions."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Having a high emotional intelligence means self-awareness, control over your own emotions, and being attentive to other team members' emotions. A high emotional intelligence allows team members to collaborate effectively. [Coaching Agile   Teams.   Lyssa   Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is the best definition of emotional intelligence?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Self determination"
    }, {
      "option" : "B",
      "text" : "Self-awareness"
    }, {
      "option" : "C",
      "text" : "Introversion"
    }, {
      "option" : "D",
      "text" : "Competitiveness"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Higgs & Dulewicz (1999) defines emotional intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4) Interpersonal sensitivity, 5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. Which of the following is one of the seven components of  emotional intelligence  as  defined by  Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adaptive agility and anticipatory agility"
    }, {
      "option" : "B",
      "text" : "Being  agile and practicing agile"
    }, {
      "option" : "C",
      "text" : "Being agile and doing agile"
    }, {
      "option" : "D",
      "text" : "Adaptive agility and prescriptive agility"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile   and   doing   agile.   Being agile includes focusing on cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "According to Highsmith, what two dimensions  help  define  'adaptive leadership?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Resolving team member and customer communication issues."
    }, {
      "option" : "B",
      "text" : "Resolving conflict among team members."
    }, {
      "option" : "C",
      "text" : "Removing problematic team members."
    }, {
      "option" : "D",
      "text" : "Resolving  issues  of  standard compliance among team members."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Conflict resolution is a key soft skill negotiation skill. It involves applying proper leadership techniques to   resolve   and   diffuse   any conflict between team members or other stakeholders. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following best defines conflict resolution?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Leaders  manage  teams and teams manage principles."
    }, {
      "option" : "B",
      "text" : "Leaders manage teams under established principles."
    }, {
      "option" : "C",
      "text" : "Teams manage principles and leaders."
    }, {
      "option" : "D",
      "text" : "Leaders manage principles and principles manage teams."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In high performance teams, leaders manage the principles and principles manage the teams. [Becoming Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Soft skills negotiation]"
    },
    "question" : "Which of the following summarizes principles, leadership, and teams in the agile framework?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Holding reflection workshops to remove any obstacles from team processes and practices."
    }, {
      "option" : "B",
      "text" : "Holding discussions to come to agreement between two  or more parties."
    }, {
      "option" : "C",
      "text" : "Having the customer define expectations of software deliverables."
    }, {
      "option" : "D",
      "text" : "Adapting to change in team dynamics through constant collaboration."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Negotiation is a key soft skill negotiation skill. It involves discussion or   conversation   to   work   towards a common understanding between two parties. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following best defines negotiation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through  the  strict adherence of e-mail for communication."
    }, {
      "option" : "B",
      "text" : "Through  isolation of  team members."
    }, {
      "option" : "C",
      "text" : " Through the use of pair programming. "
    }, {
      "option" : "D",
      "text" : "Through the seating of team members by function."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Pair programming is an effective method for improving team collaboration. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Soft skills negotiation]"
    },
    "question" : "What is one effective way to improve collaboration in an agile effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Listening to your team and providing it with the support it needs to be productive."
    }, {
      "option" : "B",
      "text" : "Leading team members by example."
    }, {
      "option" : "C",
      "text" : "Removing the customer as an obstacle to the development team."
    }, {
      "option" : "D",
      "text" : "Listening to your customer and translating requirements into specifications."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Servant leadership has its roots with an essay written in 1970 by Robert K Greenleaf. Greenleaf defined servant   leaders   as   humble stewards devoted to their company and work to serve their peers, teams, and  customers. In a self-organizing team, a servant leader, as Greenleaf defined it, is ideal as the team leader is an enabler, listening to the agile team's needs, removing obstacles, and providing tools or other support to promote high productivity. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is the best definition of servant leadership?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being aware of and in control of team members' emotions."
    }, {
      "option" : "B",
      "text" : "Being aware and in control of your emotions and aware of your team members' emotions."
    }, {
      "option" : "C",
      "text" : "Being aware of your  emotions and aware of  team  members' emotions."
    }, {
      "option" : "D",
      "text" : "Being  aware of  team members' emotions."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Having a high emotional intelligence means self-awareness, control over your own emotions, and being attentive to other team members' emotions. A high emotional intelligence allows team members to collaborate effectively. [Coaching Agile   Teams.   Lyssa   Adkins.] [Soft skills negotiation]"
    },
    "question" : "Rachel is explaining the concept of emotional intelligence to key stakeholders. Which of the following  is the best definition of emotional intelligence?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being  aware of  team members' emotions."
    }, {
      "option" : "B",
      "text" : "Being aware of your emotions."
    }, {
      "option" : "C",
      "text" : "Being  in  control of  team members' emotions."
    }, {
      "option" : "D",
      "text" : "Being aware and in control of your emotions."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Having a high emotional intelligence means self-awareness, control over your own emotions, and being attentive to other team members' emotions. A high emotional intelligence allows team members to collaborate effectively. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "High emotional intelligence is a desired quality in an agile team member. Which response is the best definition of emotional intelligence?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It encourages motivation."
    }, {
      "option" : "B",
      "text" : "It promotes  effective collaboration."
    }, {
      "option" : "C",
      "text" : "It eliminates the likelihood of overworked team members."
    }, {
      "option" : "D",
      "text" : "It ensures having  passionate team members."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Having a high emotional intelligence means self-awareness, control over your own emotions, and being attentive to other team members' emotions. A high emotional intelligence allows team members to collaborate effectively. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Why is having a high emotional intelligence a desired quality of an agile team member?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It helps facilitate  effective collaboration."
    }, {
      "option" : "B",
      "text" : "It helps instill passion among team members."
    }, {
      "option" : "C",
      "text" : "It helps facilitate  team reflection."
    }, {
      "option" : "D",
      "text" : "It eliminates the likelihood of overworked team members."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Having a high emotional intelligence means self-awareness, control over your own emotions, and being attentive to other team members' emotions. A high emotional intelligence  allows  team  members to collaborate effectively. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Rachel, as scrum master, is explaining the need for high emotional intelligence among team members. Why is high emotional intelligence desired?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being attentive to the needs of the scrum master."
    }, {
      "option" : "B",
      "text" : "Being  aware of  team members' emotions."
    }, {
      "option" : "C",
      "text" : "Being attentive to the needs of your team."
    }, {
      "option" : "D",
      "text" : "Being attentive to the needs of the product owner."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Servant leadership has its roots with an essay written in 1970 by Robert K Greenleaf. Greenleaf defined servant leaders as humble stewards devoted to their company and work to serve their peers, teams, and  customers. In a self-organizing team, a servant leader, as Greenleaf defined it, is ideal as the team leader is an enabler, listening to the agile team's needs, removing obstacles, and providing  tools  or  other  support    to promote high productivity."
    },
    "question" : "Henry is explaining the concept of servant leadership to key stakeholders. Which of the following is the best definition of servant leadership?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "On the product data sheet"
    }, {
      "option" : "B",
      "text" : "On the back of user story cards"
    }, {
      "option" : "C",
      "text" : "In the user  story Excel database"
    }, {
      "option" : "D",
      "text" : "On the user story acceptance criteria information radiator"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "During release planning, acceptance criteria are typically recorded on the backs of user story cards. Agile team testers will use this acceptance criteria in their verification tests. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "In release planning, where does an agile team typically record acceptance criteria for a user story?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Incentive compliance"
    }, {
      "option" : "B",
      "text" : "Organization compliance"
    }, {
      "option" : "C",
      "text" : "Facility compliance"
    }, {
      "option" : "D",
      "text" : "Commissioned compliance"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Compliance with a company's code of ethics and professional  conduct is standard practice in agile. [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Yvonne and her agile team have just been hired by an independent company to develop a cutting edge software project. Yvonne and her team should comply with the organization's code of ethics and conduct. What is this type of compliance known as?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration"
    }, {
      "option" : "B",
      "text" : "Increment"
    }, {
      "option" : "C",
      "text" : "Sprint"
    }, {
      "option" : "D",
      "text" : "Demo / demonstration"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built    into the   agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,  demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Feedback techniques are ubiquitous in agile projects. Select the response which lists a feedback technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration"
    }, {
      "option" : "B",
      "text" : "Release planning"
    }, {
      "option" : "C",
      "text" : "Increment"
    }, {
      "option" : "D",
      "text" : "Sprint"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,   demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment,  feedback  is   essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ernie knows that feedback techniques are ubiquitous in agile projects. Which of the following lists an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Incremental planning"
    }, {
      "option" : "B",
      "text" : "Integer planning"
    }, {
      "option" : "C",
      "text" : "Iteration planning"
    }, {
      "option" : "D",
      "text" : "Interval planning"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined   teams,   collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg    Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a technique that  promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Command"
    }, {
      "option" : "B",
      "text" : "Managerial"
    }, {
      "option" : "C",
      "text" : "Participatory"
    }, {
      "option" : "D",
      "text" : "Individual"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "To build trust among the team, agile believes heavily in participatory decision models where team members collaborate to make decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as collective ownership, self- organization, and self-discipline. In collective ownership, the team members  are  equally  responsible  for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "When agile team  members make decisions  collaboratively and   take ownership of  a product,  what  is  the decision model known as?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Responding to change"
    }, {
      "option" : "B",
      "text" : "Comprehensive documentation"
    }, {
      "option" : "C",
      "text" : "Working software"
    }, {
      "option" : "D",
      "text" : "Individuals and interactions"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software  over comprehensive documentation, 3) customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four  Agile Manifesto values  to  her co-workers. Of the following, which response lists a secondary value?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Infinity estimation"
    }, {
      "option" : "C",
      "text" : "Poker affinity"
    }, {
      "option" : "D",
      "text" : "Affinity estimation"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop  a  user  story.  At  a  planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort     by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Wendy has been given a deck of cards for an upcoming agile   planning meeting. In the meeting Wendy is to use the cards for estimating the work effort involved with developing user stories. What agile estimation technique is Wendy applying?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Poker affinity"
    }, {
      "option" : "B",
      "text" : "Planning poker"
    }, {
      "option" : "C",
      "text" : "Infinity estimation"
    }, {
      "option" : "D",
      "text" : "Affinity estimating"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for  large product backlogs. Although several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "Peter is estimating the relative work effort of user stories at a meeting. The meeting is taking place in a large conference room with a  Fibonacci scale attached to the wall. A facilitator asks the participants to size their user stories by attaching them to appropriate places on the scale using their best judgment. This estimation is performed mostly in silence. What  type of estimation technique is Peter using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Stiff"
    }, {
      "option" : "B",
      "text" : "Inflexible"
    }, {
      "option" : "C",
      "text" : "Unbending"
    }, {
      "option" : "D",
      "text" : "Evolving"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "All agile efforts have    project and quality standards that the team defines collaboratively at the  beginning of an effort and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote  a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards  while  also  being  open    to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fluid"
    }, {
      "option" : "B",
      "text" : "Inflexible"
    }, {
      "option" : "C",
      "text" : "Stiff"
    }, {
      "option" : "D",
      "text" : "Unbending"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "All agile efforts have    project and quality standards that the team defines collaboratively at the  beginning of an effort and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote  a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team should define which project and quality standards it should hold itself against and strive to conform to those standards  while  also  being  open    to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the best adjective that describes an agile team's project and quality standards."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration speculation"
    }, {
      "option" : "B",
      "text" : "Information burnup"
    }, {
      "option" : "C",
      "text" : "Information burndown"
    }, {
      "option" : "D",
      "text" : "Reflection"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "During reflection an agile team takes a break after completing an iteration to pause and contemplate about its performance. Topics include: lessons learned from successes and failures, such as programming  methods that were highly efficient or inefficient; how to reinforce successful practices, such as new testing standard practices; how to discourage negative practices, like straying from team approved coding standards in order to make an iteration deadline. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Barry and his agile team just completed an iteration. The team has reserved a block of time to devote to reviewing its performance in the iteration. What is this agile principle called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collaboration management"
    }, {
      "option" : "B",
      "text" : "Information flow management"
    }, {
      "option" : "C",
      "text" : "Communications management"
    }, {
      "option" : "D",
      "text" : "Marketing"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders  in  a  timely  manner,   3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:   Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also  use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Denise is concerned about how effective her agile team is at communicating with key stakeholders. What is the agile knowledge and skill area that concerns itself with communications among team members and stakeholders?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Information radiators allow key information to be obscured from the customer."
    }, {
      "option" : "B",
      "text" : "Information radiators allow only the project leader to review project status."
    }, {
      "option" : "C",
      "text" : "Information radiators allow only certain team members to review project status."
    }, {
      "option" : "D",
      "text" : "Information radiators allow all team  members  and  stakeholders to review project status."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Information radiators reduce lengthy communication, allow for all team members and stakeholders to review project status throughout a project, and reduce the need of other more time-consuming communication methods, like emails or  memorandums.       [Agile      Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Jack is explaining the advantages of using information radiators to a new agile recruit. Help Jack select an advantage of using an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "$202"
    }, {
      "option" : "B",
      "text" : "$0"
    }, {
      "option" : "C",
      "text" : "($202)"
    }, {
      "option" : "D",
      "text" : "$2,000"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment or project. NPV is the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow  is  discounted  back to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it   indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the Net Present Value of the following investment candidate. The initial investment cost is $1,00. The discount rate is 10%. At the end of year 1, $150 is expected. At the end of year 2, $300 is expected. At the end of year 3, $550 is expected."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "($5,000)"
    }, {
      "option" : "B",
      "text" : "$5,000"
    }, {
      "option" : "C",
      "text" : "$0"
    }, {
      "option" : "D",
      "text" : "$10,000"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative  market rate is 2%. The IRR being larger than the comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Consider the following EVM scenario and calculate the CV. The team is on week 30 of a 100 week project. Its BAC is $100,000 and AC  is $15,00. The team estimates it is 20% complete overall and has an EV of $20,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "10%"
    }, {
      "option" : "B",
      "text" : "20%"
    }, {
      "option" : "C",
      "text" : "15.00%"
    }, {
      "option" : "D",
      "text" : "-20%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike  NPV which is a dollar amount (i.e., a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative  market rate is 2%. The IRR being larger than the comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the IRR for the following one year investment. The initial investment cost is $60. The expected income in year 1 is $720."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "7.38%"
    }, {
      "option" : "B",
      "text" : "15%"
    }, {
      "option" : "C",
      "text" : "10%"
    }, {
      "option" : "D",
      "text" : "5%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Information radiators reduce lengthy communication, allow for all team members and stakeholders to review project status throughout a project, and reduce the need of other more time-consuming communication methods, like emails or  memorandums. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Calculate the IRR for the following one year investment. The initial investment cost is $40. The expected income in year 1 is $440."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Information radiators increase the  need  for  other  more lengthy forms of communication, like e- mail, so promote more team communication."
    }, {
      "option" : "B",
      "text" : "Information radiators improve coding compliance."
    }, {
      "option" : "C",
      "text" : "Information radiators decrease the need for other more lengthy forms of communication, like e- mail."
    }, {
      "option" : "D",
      "text" : "Information radiators decrease the need for continuous integration."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Information radiators reduce lengthy communication, allow for all team members and stakeholders to review   project   status   throughout   a project, and reduce the need of other more time-consuming communication methods, like emails or  memorandums. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "David is explaining the advantages of using information radiators to a new agile recruit. Help David select an advantage of using an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Information radiators decrease coding defects."
    }, {
      "option" : "B",
      "text" : "Information radiators simplify communication."
    }, {
      "option" : "C",
      "text" : "Information radiators increase coding compliance."
    }, {
      "option" : "D",
      "text" : "Information radiators decrease the need for unit testing."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation      of      team     members; reduction   of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Kyle is explaining the advantages of using information radiators to a new agile recruit. Help Kyle select an advantage of using an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Infrequent updates of information radiators"
    }, {
      "option" : "B",
      "text" : "Fluorescent lighting"
    }, {
      "option" : "C",
      "text" : "Use of headphones so developers can drown out background noise"
    }, {
      "option" : "D",
      "text" : "Reduction of non-essential noise and distractions"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated    team    members    is     an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction  of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important place that should foster effective communication. Of the following, which is a guideline for promoting such an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Use of headphones so developers can drown out background noise"
    }, {
      "option" : "B",
      "text" : "Fluorescent lighting"
    }, {
      "option" : "C",
      "text" : "Infrequent updates of information radiators"
    }, {
      "option" : "D",
      "text" : "Pairing or sharing workstations"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated    team    members    is     an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction  of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important place that should foster effective communication. What is a guideline for promoting such   an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Chartering,  delivery  cycles, wrap-up"
    }, {
      "option" : "B",
      "text" : "Negotiating, delivering, closing"
    }, {
      "option" : "C",
      "text" : "Initiating, developing, closing"
    }, {
      "option" : "D",
      "text" : "Envisioning, speculating, adapting"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Crystal is a family of methodologies for a flexible and lightweight approach to software development. The family of methodologies is color coded to differentiate its members (e.g., clear, yellow, orange, red.) The color chosen depends on the level of effort required. On one end of the spectrum is crystal clear, which is for smaller efforts, while crystal red is for larger efforts. Regardless of color, the crystal framework is cyclical and has three fundamental processes: chartering, delivery cycles, and wrap-up. Crystal chartering includes building the team, doing   an   Exploratory   360, defining standards of practice for the team, and building the project plan. In the delivery cycle, the crystal team iteratively develops, integrates, tests, and releases the product in iterations that last from one week to two months. Like other agile frameworks, crystal includes collaborative events, like stand-up meetings and reflective improvement workshops. In wrap-up the team concludes the project and holds a completion ritual where the team reflects on the entire project. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What  are the three fundamental processes in the crystal framework?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Pair programming"
    }, {
      "option" : "B",
      "text" : "In-stream refactoring"
    }, {
      "option" : "C",
      "text" : "Negative feedback loop"
    }, {
      "option" : "D",
      "text" : "Kanban filtering"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process  in  the  future.  Agile feedback techniques include prototyping, simulation,  demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Negative feedback loop"
    }, {
      "option" : "B",
      "text" : "In-stream refactoring"
    }, {
      "option" : "C",
      "text" : "Kanban filtering"
    }, {
      "option" : "D",
      "text" : "Unit testing"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,   demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because    agile    prides    itself    on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "B",
      "text" : "Envisioning and elaborating"
    }, {
      "option" : "C",
      "text" : "Incentive and profit"
    }, {
      "option" : "D",
      "text" : "Coaching and mobilizing"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for  more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "An agile team has decided to use an experienced agile practitioner and facilitator to help it reach an improved level of performance. What knowledge and skill area  is  this  practitioner providing to the team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Intrepid"
    }, {
      "option" : "B",
      "text" : "Cautious"
    }, {
      "option" : "C",
      "text" : "Vision"
    }, {
      "option" : "D",
      "text" : "Nurturing"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community          Charter.         Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is a community value per the PMI agile community of  practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Over-zealous"
    }, {
      "option" : "B",
      "text" : "Over-production"
    }, {
      "option" : "C",
      "text" : "Over-precipitate"
    }, {
      "option" : "D",
      "text" : "Over-puncture"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Value stream mapping is a lean manufacturing analysis technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities   for   process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T -   transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste within the process. Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise   Agility.   Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to  identify  areas of  waste that exist in the process. The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the O  in WIDETOM stand for with respect  to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Empathy"
    }, {
      "option" : "B",
      "text" : "Clairvoyance"
    }, {
      "option" : "C",
      "text" : "Self-awareness"
    }, {
      "option" : "D",
      "text" : "Intrepidness"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Higgs & Dulewicz (1999) defines emotional intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4) Interpersonal sensitivity, 5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. What is one of the seven components of emotional intelligence as defined by Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Intrinsic budgeting flaw"
    }, {
      "option" : "B",
      "text" : "Intrinsic productivity flaw"
    }, {
      "option" : "C",
      "text" : "Intrinsic costing flaw"
    }, {
      "option" : "D",
      "text" : "Intrinsic schedule flaw"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The five core risk areas include:  productivity variation (difference between planned and  actual performance); scope creep (considerable additional requirements beyond initial  agreement); specification breakdown (lack of stakeholder    consensus   on requirements); intrinsic schedule flaw (poor estimates of task durations), personnel loss (the loss of human resources). [The Software Project Manager's Bridge to Agility. Michele Sliger, Stacia Broderick.] [Risk management]"
    },
    "question" : "Select the response that lists one of the five core risk areas that can impact a project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "INVEST"
    }, {
      "option" : "B",
      "text" : "MoCWoS"
    }, {
      "option" : "C",
      "text" : "MoSCoW"
    }, {
      "option" : "D",
      "text" : "SMART"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "An agile team must always face    the    prioritization    of  product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into    'Must    have,'    'Should  have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value  matrix  can  be  used.   A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy     Beaver,     James     R.    Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select a method used in agile for the purpose of prioritization."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "At the beginning of an effort"
    }, {
      "option" : "B",
      "text" : "After the first iteration"
    }, {
      "option" : "C",
      "text" : "During the first retrospective workshop"
    }, {
      "option" : "D",
      "text" : "After the first release"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "All agile efforts have project and quality standards that the team defines collaboratively at the  beginning of an effort and refines collaboratively throughout the effort. Project and quality standards help an agile team with team cohesion and provide a structure, albeit one that can adapt as the project evolves, to promote   a  self-disciplined environment. There is no 'one size fits all' standards definition in agile; because every project is different, it has been shown that the team    should define which project and quality standards it should hold itself against and strive to conform to those standards while also being open to adapting those standards throughout the project to optimize performance and delivered value. Project standards can range from where the daily stand- up meeting is located and how long each participant has to share his or her progress and challenges to highly specific software coding styles, methods for test-driven development, and what the team's definition of 'done-done' means. [Agile Software Development:  The  Cooperative Game Ð 2nd   Edition.   Alistair  Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "When is the best time for an agile team to define the project and quality standards it will use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Collocating the team"
    }, {
      "option" : "B",
      "text" : "Isolating  team  members for focus"
    }, {
      "option" : "C",
      "text" : "Criticizing  team  members openly"
    }, {
      "option" : "D",
      "text" : "Promoting competition"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Building a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is self-organized and self-disciplined, and is collocated. Several management techniques can be used to build or foster     a     high-performance     team environment, some techniques include: removing obstacles that slow down a team's performance, having high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice or technique she can use to build a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It does not and should not be expected to change."
    }, {
      "option" : "B",
      "text" : "It becomes less defined as the project progresses."
    }, {
      "option" : "C",
      "text" : "It evolves to capture the most recent requirements of the customer."
    }, {
      "option" : "D",
      "text" : "It is static with requirements remaining fixed until the release."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The product backlog is a comprehensive list of all product features to be developed in an iteration. It is an evolving document and changes to adapt to customer requirements.       As       the      project progresses, project features in the backlog become better defined as the customer understands product need more completely. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "How does  a product backlog change over a project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It does not reduce bottlenecks. Bottlenecks are an inevitable byproduct of any manufacturing system."
    }, {
      "option" : "B",
      "text" : "Through root cause analysis using 5Y"
    }, {
      "option" : "C",
      "text" : "By being a just-in-time scheduling system."
    }, {
      "option" : "D",
      "text" : "Through weekly kaizen events."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Kanban is a just-in-time (JIT) scheduling system for inventory control. Production processes only execute if there is a demand signal for the part being processed. Carefully controlling inventory in this manner ensures that no machine is    producing unnecessary/unordered parts. A machine will only send a demand signal if it has the capacity to perform the manufacturing immediately. Therefore, inventory (or WIP) will not backup or bottleneck at machines because the demand signal for inventory is highly controlled and based on processing speeds and absolute need. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning,  monitoring, and adapting]"
    },
    "question" : "How does the lean manufacturing concept of kanban reduce the impact of work in process bottlenecks?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It helps the team predict duration of the daily stand-up meetings during the iteration."
    }, {
      "option" : "B",
      "text" : "It helps the team predict customer value."
    }, {
      "option" : "C",
      "text" : "It helps the team determine how many user stories may be developed in the forthcoming iteration."
    }, {
      "option" : "D",
      "text" : "It helps the team predict task durations or timeboxing values."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The team uses its velocity     to pick the number of user stories to develop in the upcoming iteration. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "How does velocity play into the iteration plan?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "T-shirt estimating"
    }, {
      "option" : "B",
      "text" : "Affinity estimating"
    }, {
      "option" : "C",
      "text" : "Relative estimating"
    }, {
      "option" : "D",
      "text" : "Infinity estimating"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product backlogs. Although several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "Gerald, an agile developer, is at a planning event where the relative  effort of developing user stories of a large product backlog is to be estimated. The team is to assign user stories to various t-shirt sizes (small, medium, large, extra-large) that indicate the development effort. The planning event is efficient and the user stories are estimated quickly. What type of planning event is Gerald most likely attending?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Rolling wave planning"
    }, {
      "option" : "B",
      "text" : "Progressive wave planning"
    }, {
      "option" : "C",
      "text" : "Progressive elaboration"
    }, {
      "option" : "D",
      "text" : "Release planning"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Rolling wave planning (or rolling look ahead planning) involves planning in waves or phases and is especially useful for large, complex projects. Only the next few iterations are planned in detail and iterations more  distant  are  planned  only  at    a high-level. Progressive elaboration is continuous planning that assumes that details and requirements will be better refined later and will be incorporated into the planning process at the appropriate time. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "If Lyle's agile team only plans for two to three iterations and keeps iterations further removed loosely planned. What type of planning technique is Lyle's agile team using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It is reviewed by the customer."
    }, {
      "option" : "B",
      "text" : "It is postfactored to add extra lines of code for redundancy."
    }, {
      "option" : "C",
      "text" : "It is extensively tested."
    }, {
      "option" : "D",
      "text" : "It is converted to the target environment coding language."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the  entire  system  is  built  and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "In the XP principle of continuous integration, what happens with new code before it is integrated into the production code base?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It serves as a binding contract for the project stakeholders' legal department."
    }, {
      "option" : "B",
      "text" : "It serves as a rigid specification  of  all  activities and product features."
    }, {
      "option" : "C",
      "text" : "It serves as a highly detailed requirements document."
    }, {
      "option" : "D",
      "text" : "It serves as a cursory artifact  to describe features and delivery deadlines, but does not include detailed tasks, activities, or processes.Value Based Prioritization Exam"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile project plan serves an initial outline to describe general features and capabilities and includes a rough project schedule to forecast milestones; however, an agile project plan is constantly changing and expected to change as customer requirements evolve."
    },
    "question" : "What  role  does  the project plan serve in the agile method?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A  feature that  has minimal NPV and a marketable IRR."
    }, {
      "option" : "B",
      "text" : "A  feature that  is  relatively simple and will return value."
    }, {
      "option" : "C",
      "text" : "A feature that returns the most value to a customer."
    }, {
      "option" : "D",
      "text" : "A  feature that  has minimal IRR and a marketable NPV."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A Minimal Marketable Feature (MMF) is a software feature or  product feature that is both minimal and marketable. 'Minimal' taking the meaning of simple and small or not complex. 'Marketable' taking the meaning of having some value, whether  it  is  revenue  generating or cost saving, that can be marketed or sold. [The Art of Agile Development. James Shore.] [Value based prioritization]"
    },
    "question" : "Which of the following best defines Minimally Marketable Feature (MMF)?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Prioritization of features based on product owner affinity."
    }, {
      "option" : "B",
      "text" : "Prioritization of features based on shareholder-value."
    }, {
      "option" : "C",
      "text" : "Prioritization of features based on product owner need."
    }, {
      "option" : "D",
      "text" : "Prioritization of features based on customer-value."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Customer-value prioritization is a method for relative prioritization of product features based on customer- value for ordering the product backlog. When ordering the product backlog, it is also important to consider other aspects (e.g., associated risk, dependencies, etc.,) of features. [The Art of Agile Development. James Shore.] [Value based prioritization]"
    },
    "question" : "Which of the following best defines customer-value prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A metric used to evaluate the speed of an investment."
    }, {
      "option" : "B",
      "text" : "A metric used to evaluate the profitability of an investment."
    }, {
      "option" : "C",
      "text" : "A metric used to evaluate the velocity of an investment."
    }, {
      "option" : "D",
      "text" : "A metric used to evaluate the interest of an investment."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment or project. NPV is the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow is discounted back  to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Select the best  definition  of  net present value (NPV)."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Pair programming assignments"
    }, {
      "option" : "B",
      "text" : "Velocity"
    }, {
      "option" : "C",
      "text" : "Return on investment"
    }, {
      "option" : "D",
      "text" : "Quality control"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "One of the key responsibilities of the product owner is the return on investment. [Coaching Agile Teams. Lyssa Adkins.] [Value based prioritization]"
    },
    "question" : "Which  of  the following is  a key responsibility  of  the product owner according to the scrum philosophy?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The ordering of a list of items based on a project-manager's definition of priority."
    }, {
      "option" : "B",
      "text" : "The ordering of a list of items based on NPV."
    }, {
      "option" : "C",
      "text" : "The ordering of a list of items based on NPV."
    }, {
      "option" : "D",
      "text" : "The ordering of a list of items based on a team-defined definition of priority."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Relative ranking/prioritization involves ordering a list of items (e.g., user stories, epics, tasks, defects, etc.,) based on a team-defined definition of priority. [The Art of Agile Development.   James   Shore.] [Value based prioritization]"
    },
    "question" : "Which of the following best defines relative ranking/prioritization?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A metric used to evaluate the speed of an investment."
    }, {
      "option" : "B",
      "text" : "A metric used to evaluate the efficiency of an investment."
    }, {
      "option" : "C",
      "text" : "A metric used to evaluate the velocity of an investment."
    }, {
      "option" : "D",
      "text" : "A metric used to evaluate the interest of an investment."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Select the best definition of return on investment (ROI)."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "75"
    }, {
      "option" : "B",
      "text" : "-150"
    }, {
      "option" : "C",
      "text" : "150"
    }, {
      "option" : "D",
      "text" : "125%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $25,000;  Cost: $10,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A metric used to evaluate the interest of an investment"
    }, {
      "option" : "B",
      "text" : "A metric used to evaluate the capacity of an investment"
    }, {
      "option" : "C",
      "text" : "A metric used to evaluate the measure of an investment"
    }, {
      "option" : "D",
      "text" : "A metric used to evaluate the profitability of an investment."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude)  value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative market rate is 2%. The IRR being larger than the  comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Which of the following best defines the Internal Rate of Return (IRR)?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Minimally Advertised Feature (MAF)"
    }, {
      "option" : "B",
      "text" : "Minimally Marketable Feature (MMF)"
    }, {
      "option" : "C",
      "text" : "Simple Value Feature (SVF)"
    }, {
      "option" : "D",
      "text" : "Small Value Feature (SVF)"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A Minimal Marketable Feature (MMF) is a software feature or  product feature that is both minimal and marketable. 'Minimal' taking the meaning of simple and small or not complex. 'Marketable' taking the meaning of having some value, whether it is revenue generating or cost saving, that can be marketed or sold. [The Art of Agile Development. James       Shore.]       [Value       based"
    },
    "question" : "When performing value based prioritization, what is the term for a product feature that is relatively simple or small and is expected to return value."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "10%"
    }, {
      "option" : "B",
      "text" : "15%"
    }, {
      "option" : "C",
      "text" : "5%"
    }, {
      "option" : "D",
      "text" : "7.38%"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative  market rate is 2%. The IRR being larger than the comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the IRR for the following one year investment. The initial investment cost is $50. The expected income in year 1 is $550."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "8%"
    }, {
      "option" : "B",
      "text" : "9%"
    }, {
      "option" : "C",
      "text" : "10%"
    }, {
      "option" : "D",
      "text" : "5.00%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike  NPV which is a dollar amount (i.e., a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative  market rate is 2%. The IRR being larger than the comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Based on the following IRRs, and based on IRR alone without considering other financial metrics, which of the following investments would you pick first to pursue?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "80% of value-focused market research can be explained by 20% of the target population."
    }, {
      "option" : "B",
      "text" : "80% of the value derives from 20% of the work."
    }, {
      "option" : "C",
      "text" : "80% of defects occur during the first 20% of the total project schedule."
    }, {
      "option" : "D",
      "text" : "20% of the value derives from 80% of the work."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The pareto rule stipulates that 80% of value derives from 20% of the work. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value based prioritization]"
    },
    "question" : "According to the pareto rule:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Value, risk, and difficult"
    }, {
      "option" : "B",
      "text" : "Value, cost, and difficult"
    }, {
      "option" : "C",
      "text" : "Value, risk, and expedienc"
    }, {
      "option" : "D",
      "text" : "Value, cost, and risk"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value, cost, and risk are key elements to consider when prioritizing user stories. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "What are the key elements considered when prioritizing user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "15"
    }, {
      "option" : "B",
      "text" : "5"
    }, {
      "option" : "C",
      "text" : "7.38"
    }, {
      "option" : "D",
      "text" : "10%"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  internal  rate  of   return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative  market rate is 2%. The IRR being larger   than   the   comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the IRR for the following one year investment. The initial investment cost is $50. The expected income in year 1 is $550."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "50%"
    }, {
      "option" : "B",
      "text" : "33%"
    }, {
      "option" : "C",
      "text" : "-50%"
    }, {
      "option" : "D",
      "text" : "0%"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for    the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $10,000;  Cost: $10,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It serves as a method to track team defects."
    }, {
      "option" : "B",
      "text" : "It serves as an archive for the user stories."
    }, {
      "option" : "C",
      "text" : "It serves as a prototype to facilitate customer feedback."
    }, {
      "option" : "D",
      "text" : "It serves as a decision gate for the customer to approve or disapprove moving to the next project phase."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In the agile design process, prototypes help the customer understand current design state. Three common types of prototypes are HTML, paper (i.e., sketches), and wireframes. A wireframe is a sketch of a user interface, identifying its content, layout,  functionality,  is  usually black and white, and excludes detailed pictures or graphics. A wireframe can be created on paper, whiteboards, or using software. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What does a wireframe help an agile team accomplish?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "It tries to reduce WIP."
    }, {
      "option" : "B",
      "text" : "It tries to completely eliminate WIP."
    }, {
      "option" : "C",
      "text" : "It tries to  steadily  increase WIP."
    }, {
      "option" : "D",
      "text" : "It tries to  exponentially increase WIP."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Like lean, agile efforts try to reduce WIP to a manageable and sustainable level. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Taking a cue from lean, what does agile do with respect to WIP?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Independent"
    }, {
      "option" : "B",
      "text" : "Incremental"
    }, {
      "option" : "C",
      "text" : "Iteration"
    }, {
      "option" : "D",
      "text" : "Innovative"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The acronym INVEST (independent, negotiable, valuable, estimable, small, and testable) helps the agile practitioner remember the characteristics of a good user story. I Ð Independent stories can be developed in any order and avoid dependencies which can make development more complex. N Ð Negotiable user stories mean that both the customer and developer should feel free to analyze and adapt a user story to meet customer needs. V Ð A valuable user story describes how the product  feature will provide value to the customer. E Ð Estimable user stories are  ones  that  developers  can  readily estimate the effort or duration required for developing them. S- Small user stories are ones that take about two to five days of work to implement. T - Testable user stories are ones that can be verified according to acceptance criteria to ensure value. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken   Schwaber.]  [Planning, monitoring, and adapting]"
    },
    "question" : "Ralph is describing the INVEST acronym used for user story development in an agile practitioner seminar. What does the I in INVEST stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product backlog"
    }, {
      "option" : "B",
      "text" : "Task backlog"
    }, {
      "option" : "C",
      "text" : "Sprint backlog"
    }, {
      "option" : "D",
      "text" : "Iteration backlog"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The product backlog is a comprehensive list of all product features to be developed in an iteration.  It  is  an  evolving document and changes to adapt to customer requirements. As the project progresses, project features in the backlog become better defined as the customer understands product need more completely. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "Which agile document holds a list of all product features to be developed in the project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Incremental delivery"
    }, {
      "option" : "B",
      "text" : "Iteration delivery"
    }, {
      "option" : "C",
      "text" : "Demo delivery"
    }, {
      "option" : "D",
      "text" : "Daily stand-up delivery"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are    successively    improved,    to    a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Gerald, as the product owner,likes being able to provide immediate feedback to the agile team regarding the latest iteration of a product. Although Gerald has other opportunities to provide feedback, this particular type occurs at frequent, set intervals. What type of delivery concept provides this type of customer feedback?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "DSDM"
    }, {
      "option" : "B",
      "text" : "Lean"
    }, {
      "option" : "C",
      "text" : "Scrum"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Extreme programming (XP) uses the planning game to prioritize features based on user stories and release requirements. [The Art of  Agile Development. James Shore.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework uses the planning game to prioritize features based on user stories and release requirements?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Value stream mapping"
    }, {
      "option" : "B",
      "text" : "Kanban board"
    }, {
      "option" : "C",
      "text" : "Iteration plan"
    }, {
      "option" : "D",
      "text" : "Product roadmap"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements can be made. It is an example     of     a     process    analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which of the following is a process analysis technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Process analysis technique"
    }, {
      "option" : "B",
      "text" : "Iteration plan"
    }, {
      "option" : "C",
      "text" : "Product roadmap"
    }, {
      "option" : "D",
      "text" : "Kanban board"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements  can  be  made.  It  is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Ethan and his team are using a value stream map to identify waste and opportunities for improvement in a business process. Value stream mapping is an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product roadmap"
    }, {
      "option" : "B",
      "text" : "Kanban board"
    }, {
      "option" : "C",
      "text" : "Process analysis technique"
    }, {
      "option" : "D",
      "text" : "Iteration plan"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where    waste    occurs    and     where improvements can be made. It is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Ethan and his team just highlighted two processes that each have a lead time an order of magnitude more than any other processes in the system. When an agile team uses value stream mapping like Ethan's team it is an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sprint planning"
    }, {
      "option" : "B",
      "text" : "Crystal planning"
    }, {
      "option" : "C",
      "text" : "Iteration planning"
    }, {
      "option" : "D",
      "text" : "Release planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Release planning helps the customer and agile team determine what should be developed during each project timeframe or phase, and   when a product will ideally be ready for release. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Which level of agile planning helps estimate when a product will be ready for release?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Kanban management"
    }, {
      "option" : "B",
      "text" : "Constraint management"
    }, {
      "option" : "C",
      "text" : "Stakeholder management"
    }, {
      "option" : "D",
      "text" : "Negotiation management"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs.     6)     We     need      intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What topic area within strategic management helps with the facilitation of a collaborative environment where stakeholders are engaged?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iterative delivery"
    }, {
      "option" : "B",
      "text" : "Sprint delivery"
    }, {
      "option" : "C",
      "text" : "Just-in-time delivery"
    }, {
      "option" : "D",
      "text" : "Incremental delivery"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide        updated       requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the type of delivery most associated with agile."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Its definition of done."
    }, {
      "option" : "B",
      "text" : "Its definition of closing."
    }, {
      "option" : "C",
      "text" : "Its definition of completion."
    }, {
      "option" : "D",
      "text" : "Its definition of conclusion."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Because a cornerstone of the scrum framework in agile is to 'always have a product that you could theoretically ship,' it is important for the team and product owner to have   a definition of 'done' or what criteria is necessary to consider user features or functionality in a state of finality. [Coaching Agile Teams. Lyssa Adkins.] [Product quality]"
    },
    "question" : "What must a scrum team and product owner define so that it may know when a user story has been completed?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Its  definition  of  done  in concert with the product owner"
    }, {
      "option" : "B",
      "text" : "Its definition of finalization."
    }, {
      "option" : "C",
      "text" : "Its definition of acceptance."
    }, {
      "option" : "D",
      "text" : "Its definition of decision gates."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Because a cornerstone of the scrum framework in agile is to 'always have a product that you could theoretically ship,' it is important for the team and product owner to have a definition of 'done' or what criteria is necessary to consider user features or functionality in a state of finality. [Coaching Agile Teams. Lyssa Adkins.] [Product quality]"
    },
    "question" : "What must a scrum team define to help it identify when a user story has been completed?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Meet expectations"
    }, {
      "option" : "B",
      "text" : "Decrease working hours"
    }, {
      "option" : "C",
      "text" : "Maintain velocity"
    }, {
      "option" : "D",
      "text" : "Exceed expectations"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored  or  coached  to  improve   in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What  is  one reason  to  have  a motivated team on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Economy of scale"
    }, {
      "option" : "B",
      "text" : "3Y"
    }, {
      "option" : "C",
      "text" : "Meta-analysis"
    }, {
      "option" : "D",
      "text" : "Be kind, rewind"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that    an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select  a  common  agile problem-solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Lead time delivery"
    }, {
      "option" : "B",
      "text" : "Reflection delivery"
    }, {
      "option" : "C",
      "text" : "Incremental delivery"
    }, {
      "option" : "D",
      "text" : "JIT delivery"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental  delivery  is  the   frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally.    [The    Art    of  Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Opie, as the product owner, likes being able to review a new version of  a    working    product    at    set,  short intervals. What type of delivery concept provides this type of customer feedback?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product roadmap"
    }, {
      "option" : "B",
      "text" : "Product backlog"
    }, {
      "option" : "C",
      "text" : "Business case"
    }, {
      "option" : "D",
      "text" : "Kanban board"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project will deliver value to a customer. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What  agile  artifact  outlines   the project's milestones?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sprint delivery"
    }, {
      "option" : "B",
      "text" : "Incremental delivery"
    }, {
      "option" : "C",
      "text" : "Kanban delivery"
    }, {
      "option" : "D",
      "text" : "Iterative delivery"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Help Jill select the correct agile delivery concept where a product is delivered   and   demonstrated   at    set intervals to  the product owner to receive feedback?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration poker"
    }, {
      "option" : "B",
      "text" : "Scrum poker"
    }, {
      "option" : "C",
      "text" : "Kanban poker"
    }, {
      "option" : "D",
      "text" : "Sprint poker"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique  for  a  relative  estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.). A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort     by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What is another name for planning poker?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Lack of an onsite agile mentor or coach or promoter."
    }, {
      "option" : "B",
      "text" : "Lack of  a proper  portfolio analysis."
    }, {
      "option" : "C",
      "text" : "Lack of an onsite development strategy."
    }, {
      "option" : "D",
      "text" : "Lack of  an  onsite  software protocol."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The top 12 causes of agile failure (failure modes) according to Aaron Sanders: 1. A checkbook commitment    doesn't    automatically cause organizational change or  support. 2. Culture doesn't support change. 3. Culture does not have retrospectives or performs them poorly. 4. Standards and quality are lost in a race to project closing. 5.  Lack of collaboration in planning. 6. None or too many Product Owners. 7. Poor project leadership or scrum master that doesn't place trust in the team and allow it to be self-organizing and self-disciplined. 8. No  on-site agile promoter or coach. 9. Lack of a well built, high-performance team. 10. Accrued technical debt if strict testing standards are not upheld. 11. Culture maintains     traditional     performance appraisals where individuals are honored  and  the  team  aspect  is lost. 12. A reversion to the traditional or 'old-way' of doing business occurs because change is hard. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Not all agile efforts succeed the first time, what is a common cause of failure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Lack of the adopting culture to support strict top-down decision making approaches."
    }, {
      "option" : "B",
      "text" : "Lack of the adopting culture to support a waterfall development method."
    }, {
      "option" : "C",
      "text" : "Lack of the adopting culture to support change."
    }, {
      "option" : "D",
      "text" : "Lack of the adopting culture to support strict  requirements management definition."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The top 12 causes of agile failure (failure modes) according to Aaron Sanders: 1. A checkbook commitment doesn't automatically cause organizational change or  support. 2. Culture doesn't support change. 3. Culture does not have retrospectives     or     performs    them poorly. 4. Standards and quality are lost in a race to project closing. 5.  Lack of collaboration in planning. 6. None or too many Product Owners. 7. Poor project leadership or scrum master that doesn't place trust in the team and allow it to be self-organizing and self-disciplined. 8. No  on-site agile promoter or coach. 9. Lack of a well built, high-performance team. 10. Accrued technical debt if strict testing standards are not upheld. 11. Culture maintains traditional performance appraisals where individuals are honored  and  the  team  aspect  is lost. 12. A reversion to the traditional or 'old-way'   of   doing   business occurs because change is hard. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Not all agile efforts succeed the first time, what is a common cause   of failure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Small"
    }, {
      "option" : "B",
      "text" : "Extra large"
    }, {
      "option" : "C",
      "text" : "Medium"
    }, {
      "option" : "D",
      "text" : "Large"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The reference point user story for planning poker is typically a medium or average size user story. Estimators can use the reference point to make relative estimations. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Often during planning poker, the agile team begins with a reference point user story as a basis for subsequent estimates. What size of user story is typically used as a reference point?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Small  effort: crystal clear; Large effort: crystal red"
    }, {
      "option" : "B",
      "text" : "Either family  member  is appropriate."
    }, {
      "option" : "C",
      "text" : "Large  effort: crystal clear; Small effort: crystal red"
    }, {
      "option" : "D",
      "text" : "Small effort: crystal red; Large effort: crystal clear"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Crystal is a family of methodologies for a flexible and lightweight    approach    to    software development. The family of methodologies is color coded to differentiate its members (e.g., clear, yellow, orange, red.) The color chosen depends on the level of effort required. On one end of the spectrum is crystal clear, which is for smaller efforts, while crystal red is for larger efforts. Regardless of color, the crystal framework is cyclical and has three fundamental processes: chartering, delivery cycles, and wrap-up. Crystal chartering includes building the team, doing an Exploratory 360, defining standards of practice for the team, and building the project plan. In the delivery    cycle,    the    crystal    team iteratively develops, integrates, tests, and releases the product in iterations that last from one week to two months. Like other agile frameworks, crystal includes collaborative events, like stand-up meetings and reflective improvement workshops. In wrap-up the team concludes the project and holds a completion ritual where the team reflects on the entire project. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Match the most appropriate crystal family member to the notional project efforts. A) Crystal clear, B) Crystal red; 1) Small effort, 2) Large effort"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Motivating"
    }, {
      "option" : "B",
      "text" : "Adaptability"
    }, {
      "option" : "C",
      "text" : "Transparency"
    }, {
      "option" : "D",
      "text" : "Leading Change"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are   community values of the PMI agile community of practice community charter: Vision, Servant Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a community value per the  PMI agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Budget and cost"
    }, {
      "option" : "B",
      "text" : "Time and cost"
    }, {
      "option" : "C",
      "text" : "Time and budget"
    }, {
      "option" : "D",
      "text" : "Cost"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method,      whereby      it     welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead,   other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ursula is the financial executive for an upcoming project that is slated  to use agile. In terms of estimating time, budget, and cost for an agile effort, what does Ursula typically have defined?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and root  cause analysis"
    }, {
      "option" : "B",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "C",
      "text" : "Knowledge  building  and mentoring"
    }, {
      "option" : "D",
      "text" : "Symptom and solution"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only     for     particularly   challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Luna is concerned with the recent stagnant performance of her agile team. She believes it to be highly capable but in need of some outside, unbiased direction. What agile knowledge and skill technique might Luna consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Feature Driven Development"
    }, {
      "option" : "B",
      "text" : "Kanban Visual Management"
    }, {
      "option" : "C",
      "text" : "Lean Software Development"
    }, {
      "option" : "D",
      "text" : "Crystal"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Reflective improvement workshops are a cornerstone of the Crystal methodology. While all agile methodologies incorporate reflection into their standard practices, Crystal terms the practice 'reflective improvement      workshops.'     [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Ursula and her team are scheduled to  hold  a reflective  improvement workshop the next business day. Which agile project management methodology is the team most likely applying?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Lean software development"
    }, {
      "option" : "B",
      "text" : "Toyota Production  System (TPS)"
    }, {
      "option" : "C",
      "text" : "Lean thinking"
    }, {
      "option" : "D",
      "text" : "Lean manufacturing"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Common frameworks or methodologies used within agile include: scrum, extreme programming (XP), lean software development, crystal, feature driven development (FDD), dynamic systems development method (DSDM), agile unified process (AUP). [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select  a common  agile framework/methodology."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Hosting the meeting in a neutral and comfortable environment."
    }, {
      "option" : "B",
      "text" : "Picking a reserved team member as facilitator."
    }, {
      "option" : "C",
      "text" : "Having a single-discipline/ homogenous group so that the team can communicate more effectively."
    }, {
      "option" : "D",
      "text" : "Leaving participants in the dark until the day of the meeting to add an element of surprise."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken    Schwaber.]    [Knowledge    and Skills: Level 1]"
    },
    "question" : "As  agile team  leader, Nathan intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is a good brainstorming technique that Nathan should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being agile and doing agile"
    }, {
      "option" : "B",
      "text" : "Thinking agile and practicing agile"
    }, {
      "option" : "C",
      "text" : "Coaching agile and practicing agile"
    }, {
      "option" : "D",
      "text" : "Living agile and breathing agile"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile and doing agile. Being agile includes focusing on cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "Jake, as an agile leader, knows that adaptive leadership is an important leadership quality. What are the two dimensions Highsmith uses to define adaptive leadership?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Day stories"
    }, {
      "option" : "B",
      "text" : "Ideal story days"
    }, {
      "option" : "C",
      "text" : "Story points"
    }, {
      "option" : "D",
      "text" : "Ideal days"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Instead of using story points, agile teams may estimate the relative sizes of user stories using ideal days. Ideal days represents the amount of days - uninterrupted by meetings, personal life, non-working days, or  any other delays, obstacles or distractions - that it would take a  single person to build, test, and release the user story, relative to other user stories in the backlog. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Hank is estimating how many days it will take him as an agile developer  to build, test, and release a user story without any interruptions relative to other user stories in the backlog. What agile estimation method is Hank using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Devil's advocate"
    }, {
      "option" : "B",
      "text" : "Double coincidence of want"
    }, {
      "option" : "C",
      "text" : "Cause factoring"
    }, {
      "option" : "D",
      "text" : "Localization"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken    Schwaber.]    [Knowledge    and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The  use of  cubicle walls to give privacy"
    }, {
      "option" : "B",
      "text" : "Non-opening windows"
    }, {
      "option" : "C",
      "text" : "Dedicated  wall  space for information radiators"
    }, {
      "option" : "D",
      "text" : "Loud background noise"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings;   pairing   workstations;  and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important  place that  should  foster effective communication. Of the following, which is a guideline for promoting such an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Low-value, low-risk"
    }, {
      "option" : "B",
      "text" : "High-value, low-risk"
    }, {
      "option" : "C",
      "text" : "High-value, high-risk"
    }, {
      "option" : "D",
      "text" : "Low-value, high-risk"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A risk-adjusted backlog is a product backlog organized by taking into account risk. Risk can be estimated as the product of severity/consequence and likelihood. User stories can also be positioned on  a risk-to-value matrix to help prioritize them in the backlog. The risk-to-value matrix is a chart with four quadrants. Along  the  horizontal  axis  is  value in ascending order. Along the vertical axis is risk in ascending order. A user story that is high risk and high value is located in the top-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk  and low value is located in the lower- left corner. Typically a team will prioritize high-value, low-risk user stories first, followed by high-value, high-risk user stories, followed by low-value, low-risk user stories, followed by low-value, high-risk user stories.       [The       Art       of     Agile Development. James Shore.] [Risk management]"
    },
    "question" : "A risk-to-value chart may be used to help prioritize user stories in the product backlog. Select the type of user-story that is typically given top priority in the backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Crystal"
    }, {
      "option" : "B",
      "text" : "Scrum"
    }, {
      "option" : "C",
      "text" : "Agile unified process (AUP)"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Scrum emphasizes, in part, the following principles: always have a product you can theoretically ship, speak a common language, and continuously test the product as you build it. [Agile Project Management with Scrum. Ken Schwaber.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework emphasizes that the team should speak a common language?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Makes  it  easy  for all team members to track progress"
    }, {
      "option" : "B",
      "text" : "Makes  communication less time consuming"
    }, {
      "option" : "C",
      "text" : "Increases  the efficiency  of software developers"
    }, {
      "option" : "D",
      "text" : "Improves team communication"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Information radiators do not increase the efficiency of software developers.   The   use   of information radiators on an agile project offer several advantages. They reduce lengthy communication, allow for all team members and stakeholders to review project status throughout a project, and reduce the need of other more time-consuming communication methods, like emails or  memorandums. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select the response that is NOT an advantage of  using an  information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Chaordic communication"
    }, {
      "option" : "B",
      "text" : "Active listening"
    }, {
      "option" : "C",
      "text" : "Osmotic communication"
    }, {
      "option" : "D",
      "text" : "Entropic communication"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Osmotic communication is a concept of communication where information      is      shared     between collocated  team  members unconsciously. By sharing the same work environment, team members are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework    that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "After weeks of sharing the same office space and having desks that are collocated, it's almost as if Bob, an agile developer, can understand Rick, an agile colleague, without having to speak with him directly. What type of communication are Rick and Bob benefiting from?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A risk-based decision model"
    }, {
      "option" : "B",
      "text" : "A participatory decision model"
    }, {
      "option" : "C",
      "text" : "A preemptive decision model"
    }, {
      "option" : "D",
      "text" : "An assessment decision model"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "To build trust among the team, agile believes heavily in participatory decision models where team members collaborate      to      make     decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as collective ownership, self- organization, and self-discipline. In collective ownership, the team members are equally responsible for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Value stream mapping, where an agile team and customer chart processes and activities of a value stream to identify waste and makes collaborative decisions on which waste areas to focus on for improvement, is an example of:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Making sure the development team strictly adheres to the  project plan."
    }, {
      "option" : "B",
      "text" : "Providing an environment where team members make all the decisions."
    }, {
      "option" : "C",
      "text" : "Providing a non-collaborative environment."
    }, {
      "option" : "D",
      "text" : "Providing coaching."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment;   where   the   team    is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In agile and other project management styles, team motivation is a critical factor for success. What is one method to improve team motivation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Contingency"
    }, {
      "option" : "B",
      "text" : "Reserve"
    }, {
      "option" : "C",
      "text" : "Spike"
    }, {
      "option" : "D",
      "text" : "B plan"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A contingency activity is an activity ready for implementation to reduce risk impact should a risk occur. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "What type of activity does a team have on the ready should a risk happen to strike?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A burndown chart is not used to manage risks on an agile project. Instead it is used to chart the   progress   of   a   team    with respect to completing assigned work."
    }, {
      "option" : "B",
      "text" : "A manager may use a risk burndown chart by taking the team's risk burndown velocity and forecasting when all risks will be completely mitigated."
    }, {
      "option" : "C",
      "text" : "A manager may use a risk burndown chart by taking the team's risk burndown velocity and forecasting when all risks will be completely eliminated."
    }, {
      "option" : "D",
      "text" : "A manager may use a burndown chart to determine whether a team is under or over committing to an iteration base on the team's velocity prediction."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A project manager may use a burndown chart and a team's   velocity to make sure the team is not under or over committing to an iteration. A sustainable pace of development is an important facet of agile project planning and risk management. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "How might a manager use a burndown chart and team velocity to manage risks with respect to a sustainable pace of development?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "During the retrospective."
    }, {
      "option" : "B",
      "text" : "After a release."
    }, {
      "option" : "C",
      "text" : "After  an  iteration  during  an iteration review meeting."
    }, {
      "option" : "D",
      "text" : "After release planning."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A risk audit is typically performed in the iteration review  after each  iteration. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "When is  a risk  audit typically performed on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Severity graph"
    }, {
      "option" : "B",
      "text" : "Severity burndown graph"
    }, {
      "option" : "C",
      "text" : "Risk burndown graph"
    }, {
      "option" : "D",
      "text" : "Impact graph"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A risk burndown chart is a   risk management technique used to track project risk over time. It allows stakeholders to quickly review project risk management performance (e.g., increasing, decreasing, and by how much) over time. Severity (a product of impact and probability) is charted along the vertical axis with time on the horizontal axis. Impact typically takes a value from 0 to 5 in increasing order of risk and probability/likelihood typically takes a value from 0 to 5 in increasing order of probability. In this example, the worst severity a risk could have is 25 (5 x 5 = 25) and the least harmful severity a risk could  have    is    0.    The    agile    team and customer/product owner identifies its risks and assigns severity values in a risk register and tracks those values over time. Ideally, risk severity will decrease over time. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "James and his agile team are reviewing a chart that shows the risk severity over time of their current project. What information radiator is James looking at?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By relative market share"
    }, {
      "option" : "B",
      "text" : "By relative complexity"
    }, {
      "option" : "C",
      "text" : "By relative risk"
    }, {
      "option" : "D",
      "text" : "By relative  temporal complexity"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A risk-adjusted backlog is a product backlog organized by taking into account risk. Risk can be estimated as the product of severity/consequence and likelihood. User stories can also be positioned on  a risk-to-value matrix to help prioritize them in the backlog. The  risk-to-value matrix is a chart with four quadrants. Along the horizontal axis is value in ascending order. Along the vertical axis is risk in ascending order. A user story that is high risk and high value is located in the top-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk and high value is located in the lower-right corner. A user story that is low risk  and low value is located in the lower- left corner. Typically a team will prioritize high-value, low-risk user stories first, followed by high-value, high-risk user stories, followed by low-value,     low-risk     user    stories, followed by low-value, high-risk user stories. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Besides prioritizing a backlog in terms of relative value, how else is it commonly prioritized?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A risk-based burnup chart."
    }, {
      "option" : "B",
      "text" : "A burndown chart."
    }, {
      "option" : "C",
      "text" : "A  risk-adjusted burndown chart."
    }, {
      "option" : "D",
      "text" : "A burnup chart."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A risk-based burnup chart tracks targeted and actual product delivery progress and also includes estimates of how likely the team is to achieve targeted value adjusted for risk. Typically, risk is shown as three different levels: best-case; most likely; and worst-case. For example, if you have a 10 iteration project and the team's current velocity is 10 story points, you can portray the chance    of completing 100 story points (most likely case), the chance of completing 80 story points (worst-case), and the chance of completing 120 story points (best-case). In this way, the stakeholders get a feel for the range of risk. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Rupert is reviewing a chart that shows different expectations of story point completion for an entire project based on risk. What is Rupert reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using project burndown charts where Ron and Peter can   review who has completed the most story points."
    }, {
      "option" : "B",
      "text" : "Using risk based task estimates to determine whose approach introduces the least amount of risk."
    }, {
      "option" : "C",
      "text" : "Using spike solutions where Ron and Peter each explore their respective solution to evaluate efficacy."
    }, {
      "option" : "D",
      "text" : "Using collective ownership coding where Ron and Peter code on solution together integrating both ideas."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A spike solution is a simple software program used to explore and evaluate potential solutions. Ron and Peter can both develop spike solutions to help form their debate. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Two software developers, Ron and Peter, are having a disagreement about the best way to approach a technical problem. What is an appropriate agile methodology for exploring potential solutions?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk mitigation involves making risks transparent so that it is evident to all stakeholders  when a project will become intractable."
    }, {
      "option" : "B",
      "text" : "Risk mitigation involves reducing the impact of risks whether or not they occur."
    }, {
      "option" : "C",
      "text" : "Risk mitigation involves eliminating risks completely."
    }, {
      "option" : "D",
      "text" : "Risk mitigation involves containing and transferring risk to low value features."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Generally, risk mitigation is thought of as the reduction of the impact whether or not the risk occurs. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Risks are common to all projects big and small. What can be said of risk mitigation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "At the end of a release"
    }, {
      "option" : "B",
      "text" : "During release planning"
    }, {
      "option" : "C",
      "text" : "At the end of an iteration"
    }, {
      "option" : "D",
      "text" : "Continuously"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Risk is continuously monitored on an agile project through  information radiators, daily stand-up meetings, iteration reviews, and iteration retrospectives. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "What is  the frequency of  risk management on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "An exploratory task conducted immediately  before  another task that holds uncertainty to reduce risk."
    }, {
      "option" : "B",
      "text" : "An exploratory task conducted immediately  before  a questionable user story to determine its feasibility."
    }, {
      "option" : "C",
      "text" : "A potentially risky task conducted with extreme  caution to determine market feasibility."
    }, {
      "option" : "D",
      "text" : "An exploratory task conducted immediately   before   an   epic to decompose it  into  more manageable development sizes."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Risked-based spike is a risk management technique and is often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need to understand how  migrating from Windows 7 to Windows 8 may impact the look and feel of the interface. Risked-based  spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Choose  the best  definition  of  a risk-based spike task."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Qualitative and quantitative"
    }, {
      "option" : "B",
      "text" : "Mitigative"
    }, {
      "option" : "C",
      "text" : "Quantitative"
    }, {
      "option" : "D",
      "text" : "Qualitative"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile methodology generally deals with qualitative risks. NOT quantitative. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "What  type  of  risk  is  generally managed in the agile methodology?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through team building exercises."
    }, {
      "option" : "B",
      "text" : "Through information radiators, daily stand-up meetings, iteration reviews, and iteration retrospectives"
    }, {
      "option" : "C",
      "text" : "Through comprehensive documentation."
    }, {
      "option" : "D",
      "text" : "Risk is  not monitored and controlled on agile projects."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The BEST answer is through information radiators, daily stand-up meetings, iteration reviews, and iteration retrospectives. In other  words, risk is monitored  and controlled throughout an agile project and in many different ways. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "How is  risk  monitored and controlled in agile projects?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration slip"
    }, {
      "option" : "B",
      "text" : "Failure to adapt"
    }, {
      "option" : "C",
      "text" : "Scope creep"
    }, {
      "option" : "D",
      "text" : "Backlog creep"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The five core risk areas include: productivity variation (difference between planned and  actual performance); scope creep (considerable additional requirements beyond initial agreement); specification breakdown (lack of stakeholder    consensus on requirements); intrinsic schedule flaw (poor estimates of task durations), personnel loss (the loss of human resources). [The Software Project Manager's Bridge to Agility. Michele Sliger, Stacia Broderick.] [Risk management]"
    },
    "question" : "Select the response that lists one of the five core risk areas that can impact a project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A chart that tracks risk impact over time."
    }, {
      "option" : "B",
      "text" : "A  chart that  tracks  risk management over time."
    }, {
      "option" : "C",
      "text" : "A  chart that  tracks  risk severity over time."
    }, {
      "option" : "D",
      "text" : "A  chart that  tracks  risk severity over time."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A risk burndown chart is a risk management technique used to track project risk over time. It allows stakeholders to quickly review project risk management performance (e.g., increasing, decreasing, and by how much) over time. Severity (a product of impact and probability) is charted along the vertical axis with time on the horizontal axis. Impact typically takes a value from 0 to 5 in increasing order of risk and probability/likelihood typically takes a value from 0 to 5 in increasing order of probability. In this example, the worst severity a risk could have is 25 (5 x 5 = 25) and the least   harmful   severity   a   risk could have is 0. The agile team and customer/product owner identifies its risks and assigns severity values in a risk register and tracks those values over time. Ideally, risk severity will decrease over time. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Which of the following is the best definition of a risk burndown graph?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To convey  to  the product owner the extreme complexity  of the user story."
    }, {
      "option" : "B",
      "text" : "To understand the impacts of the high risk tasks."
    }, {
      "option" : "C",
      "text" : "To understand the nature of the development team when performing under risk."
    }, {
      "option" : "D",
      "text" : "To convey to the scrum master the extreme complexity of the user story."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Risked-based spike is a risk management technique and is often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need   to   understand   how  migrating from Windows 7 to Windows 8 may impact the look and feel of the interface. Risked-based  spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Mark is reviewing the upcoming user stories for the next iteration. He notices that there will be a few tasks with high uncertainty Why might  Mark want to use risk-based spike tasks in this scenario?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Making sure the development team strictly adheres to the  project plan."
    }, {
      "option" : "B",
      "text" : "Empowering the team to make many important decisions."
    }, {
      "option" : "C",
      "text" : "Providing an authoritative leadership where all decisions are made for the team."
    }, {
      "option" : "D",
      "text" : "Providing an environment where team members make all the decisions."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality   time   together;   where   team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In agile and other project management styles, team motivation is a  critical  factor  for  success.  What is one method  to  improve team motivation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "25%"
    }, {
      "option" : "B",
      "text" : "30%"
    }, {
      "option" : "C",
      "text" : "20%"
    }, {
      "option" : "D",
      "text" : "40%"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude)  value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative market rate is 2%. The IRR being larger than the  comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the IRR for the following one year investment. The initial investment cost is $30. The expected income in year 1 is $390."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "-50%"
    }, {
      "option" : "B",
      "text" : "-33%"
    }, {
      "option" : "C",
      "text" : "33%"
    }, {
      "option" : "D",
      "text" : "20%"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for    the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $10,000;  Cost: $15,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Providing an environment where team members make all the decisions."
    }, {
      "option" : "B",
      "text" : "Empowering the team."
    }, {
      "option" : "C",
      "text" : "Making sure the development team strictly adheres to the  project plan."
    }, {
      "option" : "D",
      "text" : "Providing strong leadership and making all decisions so the team can focus on productivity."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring  and  coaching;  where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In agile and other project management styles, team motivation is a critical factor for success. What is one method to improve team motivation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Managing communication between    all    stakeholders   and team members to promote effective conveyance of necessary information."
    }, {
      "option" : "B",
      "text" : "Managing communication between a few key stakeholders  to promote effective conveyance of necessary information."
    }, {
      "option" : "C",
      "text" : "Managing communication between the team to reduce team conflict and inefficiencies."
    }, {
      "option" : "D",
      "text" : "Managing communication between the team and stakeholders to prevent development delays."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Effective communication is a cornerstone of agile.  Communication is  the  act  of  transferring information among various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information.    This    includes     status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:  Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this    is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of communications management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration delivery"
    }, {
      "option" : "B",
      "text" : "Defect reduction delivery"
    }, {
      "option" : "C",
      "text" : "Prototype delivery"
    }, {
      "option" : "D",
      "text" : "Incremental delivery"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer  can  review  the  product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Mike, as the product owner, likes being able to provide immediate feedback to the agile team regarding the latest version of a product. Although Mike has other opportunities to provide feedback, like in the daily stand-up meeting and during iteration planning, this particular type occurs after the delivery of a new product which occurs at frequent, set intervals. What type of delivery concept  provides     this     type     of   customer feedback?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Developing task  timebox estimates."
    }, {
      "option" : "B",
      "text" : "Managing pair  programming assignments."
    }, {
      "option" : "C",
      "text" : "Managing team conflict."
    }, {
      "option" : "D",
      "text" : "Writing  well-defined  user stories."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The best role for a customer in XP of the available choices is to write well-defined user stories. [User Stories Applied:       For       Agile     Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "In XP, the best role for the customer is which of the following?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Facilitating active participation of stakeholders."
    }, {
      "option" : "B",
      "text" : "Assigning tasks and other activities to stakeholders."
    }, {
      "option" : "C",
      "text" : "Managing the number of requirement changes requested by stakeholders."
    }, {
      "option" : "D",
      "text" : "Managing the problems that stakeholders present throughout the project."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder  interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who    are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills:   Level 1]"
    },
    "question" : "Which of the following is the best definition  of  'stakeholder management?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Assigning responsibilities to stakeholders. "
    }, {
      "option" : "B",
      "text" : "The fostering of a collaborative environment where stakeholders actively participate. "
    }, {
      "option" : "C",
      "text" : "Managing the number of scope changes requested by stakeholders."
    }, {
      "option" : "D",
      "text" : "Managing the myriad problems that stakeholders present throughout the project."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2)    We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly.   7)   Stakeholders   consist of real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Peter, as project leader, has spoken with his agile team about 'stakeholder management.' What is 'stakeholder management?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ignoring it to bring it up at the next sprint review."
    }, {
      "option" : "B",
      "text" : "Marking it on the risk register."
    }, {
      "option" : "C",
      "text" : "Immediately creating a contingency plan and adding it to the contingency plan document."
    }, {
      "option" : "D",
      "text" : "Immediately calling it to the team's attention to discuss its impact."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The BEST answer is to bring the newly identified risk to the team's attention and to discuss its impact. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "If a project team member identifies a new risk, what is a good next step?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Inventory management"
    }, {
      "option" : "B",
      "text" : "Dynamic management"
    }, {
      "option" : "C",
      "text" : "Communications management"
    }, {
      "option" : "D",
      "text" : "Materials flow management"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several         definitions         regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:   Managing communications to satisfy the requirements  and  resolve  issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Adrienne is concerned about her agile team's communication with key stakeholders. What is the agile knowledge and skill area that concerns itself with effective communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Minimum marketable feature (MMF)"
    }, {
      "option" : "B",
      "text" : "Zero"
    }, {
      "option" : "C",
      "text" : "Minimum threshold value"
    }, {
      "option" : "D",
      "text" : "Maximum threshold value"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude) value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate   an IRR   to be 13%   for   an investment while a  comparative market   rate is 2%. The   IRR   being larger than the comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "What  is  the objective value of NPV when finding the IRR?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Make sure to have"
    }, {
      "option" : "B",
      "text" : "Must have"
    }, {
      "option" : "C",
      "text" : "May have"
    }, {
      "option" : "D",
      "text" : "Might have"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The MoSCoW technique is commonly used in agile to prioritize user stories and create a story  map. The MoSCoW technique prioritizes user stories into the following groups in descending order of priority: M - Must have; S - Should have; C - Could have; W - Would have. Must have items are those product features which are   absolutely   essential   to develop. Should have items are product features that are not essential but have significant business value. Could have items are product features that would add some business value. Would have items are product features that have marginal business value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What does the M stand for in the user prioritization technique called MoSCoW?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Meet expectations"
    }, {
      "option" : "B",
      "text" : "Maintain velocity"
    }, {
      "option" : "C",
      "text" : "Improve productivity"
    }, {
      "option" : "D",
      "text" : "Decrease productivity"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong     productivity,     and     exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What  is  one reason  to  have  a motivated team on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Scrum planning"
    }, {
      "option" : "B",
      "text" : "Sprint planning"
    }, {
      "option" : "C",
      "text" : "Scrimmage planning"
    }, {
      "option" : "D",
      "text" : "Melee planning"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning,     release     planning,     pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "From the following, select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Its definition of releasability."
    }, {
      "option" : "B",
      "text" : "Its definition of shipability."
    }, {
      "option" : "C",
      "text" : "Its  definition  of  done  in concert with the product owner"
    }, {
      "option" : "D",
      "text" : "Its  definition  of  delivery readiness."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Because a cornerstone of the scrum framework in agile is to 'always have a product that you could theoretically ship,' it is important for the team and product owner to have a definition of 'done' or what criteria is necessary to consider user features or functionality in a state of finality. [Coaching Agile Teams. Lyssa Adkins.] [Product quality]"
    },
    "question" : "Hank and his agile team are defining what it means when a feature is to be considered finished and theoretically ready for delivery. What is Hank and his agile team  working on?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Have  plants,  natural lighting, and comfortable seating available"
    }, {
      "option" : "B",
      "text" : "Have yearly, individual performance reviews"
    }, {
      "option" : "C",
      "text" : "Seat by team member function"
    }, {
      "option" : "D",
      "text" : "Minimize team  member interaction"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication,      innovation,      and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction   of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Meghan, as team leader, wants to design a comfortable, collaborative team space for her agile project. What can she do as a basic guideline?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "From four to eight hours."
    }, {
      "option" : "B",
      "text" : "A few months."
    }, {
      "option" : "C",
      "text" : "A few hours."
    }, {
      "option" : "D",
      "text" : "From a few days  to  a few weeks."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The Crystal development process is cyclical/iterative. Its  primary components are chartering, delivery cycles, and project wrap-up. Chartering involves creating a project charter, which can last from a few  days to a few weeks. Chartering consists of four activities: 1) Building the core project team, 2) performing an Exploratory 360¡ assessment, 3) fine tuning the methodology, and 3) building the initial project plan. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "Bob is an agile practitioner and works on a team that employs the Crystal methodology. His team has  just    started    building    the project charter. How long should Bob expect project chartering to last?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "An inflexible  requirements definition process"
    }, {
      "option" : "B",
      "text" : "Development  consists  of multiple iterations"
    }, {
      "option" : "C",
      "text" : "Minimized customer feedback"
    }, {
      "option" : "D",
      "text" : "Five distinct phases"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The agile development process has multiple iterations that focus on specific product features, encourages heavy customer feedback, and is adaptive to changing customer requirements. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "The agile development model consists  of  which of  the following characteristics?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Dedicated whiteboard"
    }, {
      "option" : "B",
      "text" : "Large swaths of blank wall space devoid of project information"
    }, {
      "option" : "C",
      "text" : "Minimized team member interaction"
    }, {
      "option" : "D",
      "text" : "Seating  by  team  member function"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important   aspect   to   consider  when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction   of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "In agile, the 'team space' is an important place that should foster effective communication. What is a guideline for promoting such an environment?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "B",
      "text" : "Consolidating and mentoring"
    }, {
      "option" : "C",
      "text" : "Speculating and closing"
    }, {
      "option" : "D",
      "text" : "Coaching and meeting"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Coaching   and   mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need   a   coach   only   for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "An agile team has included a more experienced agile practitioner to help it reach an improved level of performance. What knowledge and skill area is this practitioner providing to the team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Mirroring."
    }, {
      "option" : "B",
      "text" : "Rapid reflection."
    }, {
      "option" : "C",
      "text" : "Unit testing."
    }, {
      "option" : "D",
      "text" : "Conversion testing."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the  entire  system  is  built  and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Drew and his pair programming partner Steve are working on a new piece of software. As they build the software feature, what should Steve and Drew be sure to perform to ensure quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Mission statement"
    }, {
      "option" : "B",
      "text" : "Project charter"
    }, {
      "option" : "C",
      "text" : "Team virtual page"
    }, {
      "option" : "D",
      "text" : "Statement of work"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come to a consensus. Three key elements   should   be   included   in   a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale of a project. Mission is the 'what' of the project and describes what the team will accomplish to reach the vision. Success criteria are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Jan is looking at an important agile document that includes the project vision and success criteria. What document is Jan most likely reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "B",
      "text" : "Symptom and solution"
    }, {
      "option" : "C",
      "text" : "Capturing and mentoring"
    }, {
      "option" : "D",
      "text" : "Coaching and mobilizing"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Coaching and mentoring within    teams    can    be    helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging       situations.       A     not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Anna is concerned with the recent stagnant performance of her agile team. She believes it to be highly capable but the team seems to be in a bit of a malaise. What agile knowledge and skill technique might Anna consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Mobilizing the team"
    }, {
      "option" : "B",
      "text" : "Motivating the team"
    }, {
      "option" : "C",
      "text" : "Refactoring the team"
    }, {
      "option" : "D",
      "text" : "Working the team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality   time   together;   where   team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Vikki, as project leader, empowers her team to make some decisions. This helps to build trust and invigorates the team to improve productivity. What is Vikki doing when she empowers the team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cano"
    }, {
      "option" : "B",
      "text" : "MoCWoS"
    }, {
      "option" : "C",
      "text" : "SMART"
    }, {
      "option" : "D",
      "text" : "Cost-to-value matrix"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are often prioritized with prioritization based on value and risk. Prioritization can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a technique used for value- based analysis?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Daily scrum"
    }, {
      "option" : "B",
      "text" : "Release plan meeting"
    }, {
      "option" : "C",
      "text" : "Affinity planning meeting"
    }, {
      "option" : "D",
      "text" : "Sprint review meeting"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In the agile framework scrum, sprint planning and sprint review meetings are often timeboxed at four hours. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Which scrum meeting is  often timeboxed to four hours?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Knowledge  building  and mentoring"
    }, {
      "option" : "B",
      "text" : "Symptom and solution"
    }, {
      "option" : "C",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "D",
      "text" : "Coaching and servicing"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching  and  mentoring  is  not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ginny is concerned with the recent stagnant performance of her agile team. She believes it to be highly capable but without any direction. What agile knowledge and skill technique might Ginny consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Motivating the customer"
    }, {
      "option" : "B",
      "text" : "Motivating the external stakeholders"
    }, {
      "option" : "C",
      "text" : "Motivating the internal stakeholders"
    }, {
      "option" : "D",
      "text" : "Motivating the individuals involved in development."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The  Agile  Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work   together   daily   throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of  work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "10 minutes"
    }, {
      "option" : "B",
      "text" : "8 minutes."
    }, {
      "option" : "C",
      "text" : "Whatever it takes to come to consensus"
    }, {
      "option" : "D",
      "text" : "Two to three minutes"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Two to three minutes is a typical timeboxed value for discussing user stories when playing planning poker. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "How much time should be devoted to each user story in planning poker?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "New"
    }, {
      "option" : "B",
      "text" : "Navigable"
    }, {
      "option" : "C",
      "text" : "Negotiable"
    }, {
      "option" : "D",
      "text" : "Narrow"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The acronym INVEST (independent, negotiable, valuable, estimable, small, and testable) helps the agile practitioner remember the characteristics of a good user story. I Ð Independent stories can be developed in any order and avoid dependencies which can make development more complex. N Ð Negotiable user stories mean that both the customer and developer should feel free to analyze and adapt a user story to meet customer needs. V Ð A valuable user story describes how the product  feature   will   provide   value   to    the customer. E Ð Estimable user stories are ones that developers can readily estimate the effort or duration required for developing them. S- Small user stories are ones that take about two to five days of work to implement. T - Testable user stories are ones that can be verified according to acceptance criteria to ensure value. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.]  [Planning, monitoring, and adapting]"
    },
    "question" : "Ralph is describing the INVEST acronym used for user story development in an agile practitioner seminar. What does the N in INVEST stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Virtual communication"
    }, {
      "option" : "B",
      "text" : "Near Field Communication"
    }, {
      "option" : "C",
      "text" : "Osmotic communication"
    }, {
      "option" : "D",
      "text" : "XP pair  programming communication"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Peter used the principle of osmotic communication to  understand Paul's   dilemma. Osmotic communication includes picking up visual cues, like body language. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Peter is a software developer on an agile project. He is pair programming with Paul. On one particular day, Paul's body language unconsciously communicated to Peter that Paul was having an especially difficult time with developing a user story. What type   of communication did Peter use to understand Paul's difficulty?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Fool proofing a system"
    }, {
      "option" : "B",
      "text" : "Continuous improvement"
    }, {
      "option" : "C",
      "text" : "Billboard or signboard"
    }, {
      "option" : "D",
      "text" : "Stop on a defect"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Kanban, Japanese for billboard or signboard, is a scheduling system for just-in-time (JIT) production developed by Toyota in the 1940s and 1950s. It is a way of controlling and reducing inventory by using cards or signs to order (demand signal) requisite parts for a manufacturing process from other dependent  systems (supply). Kanban has been adopted by agile to help control workflow. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "What  does  the Japanese  term 'Kanban' translate to in English?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "E-mail"
    }, {
      "option" : "B",
      "text" : "Near Field Communication"
    }, {
      "option" : "C",
      "text" : "Bluetooth"
    }, {
      "option" : "D",
      "text" : "Instant messaging"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Video conferencing and instant messaging are technologies that can provide some level of osmotic communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Although a shared workspace is best to promote osmotic communication, separated team members may also enjoy some  osmotic communication through the use of aiding technology. Pick among the listed technologies the one that helps to provide some level of osmotic communication."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Removing any obstacles"
    }, {
      "option" : "B",
      "text" : "Assigning more work than can be accomplished in an iteration to set a sense of urgency"
    }, {
      "option" : "C",
      "text" : "Using overtime to incentivize the team to delivery early"
    }, {
      "option" : "D",
      "text" : "Never pausing to reflect on performance until the end of the project"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Building a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is self-organized and self-disciplined, and is collocated. Several management techniques can be used to build or foster a high-performance team environment, some techniques include: removing obstacles that slow down a team's    performance,    having    high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice or technique she can use to build a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "No more than five."
    }, {
      "option" : "B",
      "text" : "No more than four."
    }, {
      "option" : "C",
      "text" : "No more than three."
    }, {
      "option" : "D",
      "text" : "No more than two."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is also referred to as work in process (WIP). WIP is material or parts that have started production but are not yet a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain. One way of reducing inventory is to reduce the WIP at individual machines or servers by only moving as fast as your slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that can develop a certain amount of features. In this analogy, the WIP limit is equivalent to the sprint backlog. By maintaining a WIP limit equal to the sprint  backlog,  no  features  should be incomplete at the sprint review. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Jim has just finished building, testing, and integrating a feature in an iteration that has a WIP limit of four for features. How many other features could be in the middle of development on Jim's team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "No more than 11."
    }, {
      "option" : "B",
      "text" : "No more than nine."
    }, {
      "option" : "C",
      "text" : "No more than 10."
    }, {
      "option" : "D",
      "text" : "No more than five."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is also referred to as work in process (WIP). WIP is material or parts that have started production but are not yet a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain. One way of reducing inventory is to reduce the WIP at individual machines or servers by only moving as fast as your slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that can develop a certain amount of features. In this analogy, the WIP limit is equivalent to the sprint backlog. By maintaining a WIP limit equal to the sprint  backlog,  no  features  should be incomplete at the sprint review. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Frankie has just finished building, testing, and integrating a feature in an iteration that a WIP limit of ten for features. How many other features could be in the middle of development on Frankie's team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1"
    }, {
      "option" : "B",
      "text" : "1/3"
    }, {
      "option" : "C",
      "text" : "5"
    }, {
      "option" : "D",
      "text" : "3"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Velocity is a measure of the number of user story points or stories completed by a team per iteration. An agile team can use its previous  velocity recordings as a method of estimating how many user story points it may complete in the next iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Don's agile team just finished building, testing, and releasing 1 user story point in its most recent 3 week iteration. What is the team's velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The  management   of stakeholder interactions to promote a safe and collaborative environment where stakeholders are actively engaged in the project."
    }, {
      "option" : "B",
      "text" : "The management of stakeholder tasks, duties, and responsibilities."
    }, {
      "option" : "C",
      "text" : "The management and organization of stakeholder feature requirements."
    }, {
      "option" : "D",
      "text" : "The management of stakeholder interactions to promote an environment where developers can develop without interaction with stakeholders."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces   and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Harry and the agile team he belongs to are having a discussion regarding 'stakeholder management.' What is 'stakeholder management?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Yes, acceptance criteria should be defined well in advance of iteration planning."
    }, {
      "option" : "B",
      "text" : "Yes, acceptance criteria should always be defined during release planning."
    }, {
      "option" : "C",
      "text" : "No, acceptance criteria for a user story may be defined as late as during iteration planning just so long as it is defined before coding begins."
    }, {
      "option" : "D",
      "text" : "No, acceptance criteria for a user story may be defined as late as just prior to the sprint demo just so long as it is ready for qualifying as 'done.' Metrics Exam"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Acceptance criteria is typically defined in tandem with user story definition during release planning; however, acceptance criteria can also be defined during iteration planning once a story has been picked for the iteration. The one steadfast rule is that acceptance criteria must be defined before development begins. Like agile planning, the definition of acceptance criteria is constantly evolving as the conversation with the product owner matures. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Barry, as the product owner, prefers defining acceptance criteria during iteration planning rather than during release planning to take advantage of progressive elaboration. Is there anything wrong with this agile style?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A  defect  that  is  almost impossible to duplicate."
    }, {
      "option" : "B",
      "text" : "A  defect  that  cannot  be replicated."
    }, {
      "option" : "C",
      "text" : "A defect that escapes from a previous defect-free build to the most recent build iteration."
    }, {
      "option" : "D",
      "text" : "A defect that is not found by the development or testing team and later found by an end-user."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An escaped defect is a software defect that is not found by the development or testing team and later found by an end-user. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Metrics]"
    },
    "question" : "What is an escaped defect?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "After a release planning event"
    }, {
      "option" : "B",
      "text" : "After  an  affinity  planning event"
    }, {
      "option" : "C",
      "text" : "After the envisioning phase"
    }, {
      "option" : "D",
      "text" : "After an iteration."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Because value is delivered incrementally and iteratively through iterations, value and progress is typically measured at the end of each iteration. [The Art of Agile Development. James Shore.] [Metrics]"
    },
    "question" : "When is  value and progress typically measured in an agile effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extra value management"
    }, {
      "option" : "B",
      "text" : "Earned velocity management"
    }, {
      "option" : "C",
      "text" : "Earned value management"
    }, {
      "option" : "D",
      "text" : "Earned value maintenance"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does EVM stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "0.50"
    }, {
      "option" : "B",
      "text" : "1.40"
    }, {
      "option" : "C",
      "text" : "71%"
    }, {
      "option" : "D",
      "text" : "0.71"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "EVM    or    earned    value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). PV is the planned value of work at a given time in a project; you can calculate it by multiplying the BAC by the ratio of current week/scheduled weeks (e.g., 5 weeks into a 15 week $15,000   project =  $5,000  PV).  EV  is  value  of work actually completed or earned (e.g., you have completed 50% of the project by week 5 of a 15 week $15,000 project = $7,500 EV). SPI = EV / PV. If SPI    > 1, the project is ahead of schedule and if SPI < 1, the project is behind schedule. AC is the actual cost the project has incurred to date. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "Calculate the SPI of the following project EVM snapshot. BAC is $100,00. AC  is  $10,00. PV  is $5,00. EV is $7,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the team has overrun on cost."
    }, {
      "option" : "B",
      "text" : "That work has been added to the project."
    }, {
      "option" : "C",
      "text" : "That the schedule is slipping."
    }, {
      "option" : "D",
      "text" : "That work has been removed from the project."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "If a bar extends below the horizontal axis on a project burndown bar chart, work has been added to the project indicating an increase in scope. [Agile Estimating and Planning.  Mike Cohn.] [Metrics]"
    },
    "question" : "If a bar on a product burndown bar chart extends below the horizontal axis, what does it indicate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Mark the story as   done because it would not be reviewed if it didn't pass the acceptance criteria written on the back of the card."
    }, {
      "option" : "B",
      "text" : "Mark the user story as incomplete and collaborate with the product owner whether to include the user story in a subsequent iteration."
    }, {
      "option" : "C",
      "text" : "Postpone the sprint review until the user story is accepted."
    }, {
      "option" : "D",
      "text" : "Remove the user  story from the product backlog."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "If a user story is not accepted by the product owner during a sprint review, the team should not mark the story as complete and collaborate with the product owner to determine if and when the user story should be completed. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "If, during a sprint review, the product owner does NOT accept a user story or feature, what should the team do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the schedule is slipping."
    }, {
      "option" : "B",
      "text" : "That there is a cost variance."
    }, {
      "option" : "C",
      "text" : "That work has been added to the project."
    }, {
      "option" : "D",
      "text" : "That work has been removed from the project and indicating a reduction in scope since initial planning."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "If the bottom of the bar on a product burndown bar chart is above the horizontal axis, it indicates that work   has   been   removed   from  the project (scope reduction) since initial planning. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "If the bottom of the bar on a product burndown bar chart is above the horizontal axis, what does it indicate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SLOC reports are not a complete source for reporting productivity. Instead, testing line of code reports (TLOC) should be reported."
    }, {
      "option" : "B",
      "text" : "SLOC reports SHOULD be used as a reporting metric to stakeholders."
    }, {
      "option" : "C",
      "text" : "SLOC reports are unsuitable because they can give a false positive indication of the project being near completion."
    }, {
      "option" : "D",
      "text" : "SLOC reports are an imperfect source to be used for productivity reports."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "SLOC reports are an imperfect source to be used for productivity reports. [The Art of Agile Development. James Shore.] [Metrics]"
    },
    "question" : "Why aren't source line of code reports (SLOC) suitable as a reporting metric for project stakeholders?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "20"
    }, {
      "option" : "B",
      "text" : "19"
    }, {
      "option" : "C",
      "text" : "15"
    }, {
      "option" : "D",
      "text" : "25"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The team's velocity is 15. 2 x  6 + 3 x 1 = 15. Story points for partially completed stories are not included in the velocity metric. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "During  the  last  iteration,  Paul and his agile team completed 2 user stories worth 6 points each, 3 user stories worth 1 point each, and nearly completed one user story point worth 10 points. What was the team's velocity for the previous iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "18"
    }, {
      "option" : "B",
      "text" : "8"
    }, {
      "option" : "C",
      "text" : "38"
    }, {
      "option" : "D",
      "text" : "28"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The team's velocity is 18. 3 x 4 + 2 x 3 = 18. Story points for partially completed stories are not included in the velocity metric. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "During the last iteration, Steve and his agile team completed 3 user stories worth 4 points each, 2 user stories worth 3 points each, and nearly completed one user story point worth 20 points. What was the team's velocity for the previous iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The top of a bar on a product burndown bar chart may lower from one iteration to the next because the team completed work in the previous iteration or the team re-estimated user story effort."
    }, {
      "option" : "B",
      "text" : "The top of a bar on a product burndown bar chart may lower from one iteration to the next because the product owner added work for the project."
    }, {
      "option" : "C",
      "text" : "The top of a bar on a product burndown bar chart may lower from one iteration to the next because the product owner removed work for the project."
    }, {
      "option" : "D",
      "text" : "The top of a bar on a product burndown bar chart may lower from one iteration to the next because the team may have removed work from the project."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The top of a bar on a product burndown bar chart may lower from one iteration to the next because the team completed work in the previous iteration or the team re-estimated user story development effort. When the team completes planned work during the iteration the top of the bar chart is lowered. Additionally, the top of the bar chart may be lowered if the    team re-estimates user stories and finds they are not as challenging as previously believed and therefore represent a smaller story point value. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "Why might the top of a bar on a product burndown bar chart  lower from one iteration to the next?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "No, velocity alone is not an apples-to-apples metric with which to compare and contrast team productivity."
    }, {
      "option" : "B",
      "text" : "No, velocity must be included in the context of ideal time to be able to make accurate conclusions about comparing team productivity."
    }, {
      "option" : "C",
      "text" : "Yes, so long as the organization has standardized its baseline user story complexity."
    }, {
      "option" : "D",
      "text" : "Yes, so long as the agile teams were all using story points or all using ideal time."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Velocity alone is insufficient for comparing productivity among two or more agile teams. This is because  no two teams share the same definition of a story point. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "An executive is reviewing a chart comparing four of his agile teams' velocity for the previous iteration. Is it safe to make assumptions about the most productive team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "24"
    }, {
      "option" : "B",
      "text" : "3"
    }, {
      "option" : "C",
      "text" : "8"
    }, {
      "option" : "D",
      "text" : "2.67"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Velocity is a measure of the number of user story points completed per iteration. An agile team can use its previous velocity recordings as a method of estimating how many user story points it may complete in the  next iteration. David's team's velocity is 8 [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "David's agile team just finished building, testing, and releasing 8 user story points in its most recent 3 week iteration. What is the team's velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "0.70"
    }, {
      "option" : "B",
      "text" : "0.50"
    }, {
      "option" : "C",
      "text" : "1.43"
    }, {
      "option" : "D",
      "text" : "70%"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At  Completion  (BAC),  Actual   Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance  Index  (SPI). EV is value of work actually completed or earned (e.g., you have completed 50% of the project by week 5  of  a  15  week  $15,000  project    = $7,500 EV). CV is the difference between what a project has earned to date and cost to date (i.e., CV = EV - AC). SV is the difference between what a project has earned to date and what it was planned to earn to  date (i.e., SV = EV - PV). CPI is a ratio that expresses   cost   performance.   CPI  = EV/AC; If CPI > 1, the project is earning more than spending; and if  CPI <1, the project is spending more than it is earning. AC is the actual cost the project has incurred to date. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "Calculate the CPI of the following project  EVM snapshot. BAC is $100,00. AC  is  $10,00. PV  is $5,00. EV is $7,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A technique used to evaluate project performance with respect to quality and value. "
    }, {
      "option" : "B",
      "text" : "A technique used to evaluate project performance with respect to velocity and cost. "
    }, {
      "option" : "C",
      "text" : "A technique used to evaluate project  performance  with respect to cost and schedule. "
    }, {
      "option" : "D",
      "text" : "A technique used to evaluate project performance with respect to schedule and value."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC),   Planned   Value   (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index  (SPI). CV and SV can be converted into performance indicators of CPI and  SPI, respectively, and tracked and charted to show progress over time. BAC is the total project budget. PV is the planned value of work at a given time in a project; you can calculate it by multiplying the BAC by the ratio of current week/scheduled weeks (e.g., 5 weeks into a 15 week $15,000   project = $5,000 PV). EV is value of work actually completed or earned (e.g., you have completed 50% of the project  by week 5 of a 15 week $15,000 project = $7,500 EV). CV is the difference between what a project has earned to date and cost to date (i.e., CV = EV - AC). SV is the difference between what a project has earned to date and what it was planned to earn to  date (i.e., SV = EV - PV). CPI is a ratio that expresses cost performance. CPI = EV/AC If CPI > 1, the project is earning more than spending; and if  CPI 1, the project is ahead of schedule and if SPI < 1, the project is behind schedule. AC is the actual cost the project has incurred to date. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "What purpose can EVM serve on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "No, the sprint review is reserved only for the  product team to make sure the user stories pass the acceptance tests."
    }, {
      "option" : "B",
      "text" : "Yes, the sprint review is exclusively for the stakeholders and product owners, so the product owner should absolutely invite the stakeholders."
    }, {
      "option" : "C",
      "text" : "Absolutely, this is a critical component of the  agile framework where the latest increment  of  product functionality is demonstrated to the stakeholders for inspection, feedback, and adapting."
    }, {
      "option" : "D",
      "text" : "No, review meetings are private to the team so that it may take the necessary time to reflect on its performance and continuously improve."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Stakeholders are a critical component of the agile framework where the latest increment of product functionality is demonstrated to the stakeholders for inspection, feedback, and adapting. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Should stakeholders be invited to a sprint review?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Nothing"
    }, {
      "option" : "B",
      "text" : "It is still somewhat accessible and should be placed in a secure place where no one but Lisa can access."
    }, {
      "option" : "C",
      "text" : "It is not in a digital format."
    }, {
      "option" : "D",
      "text" : "It is not in highly visible place where all team members can regularly view and update its content."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An information radiator should be posted in a highly visible area that is easily accessible by the team and stakeholders. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Lisa is new to agile project management, but is eager to learn the methodology. Team members have asked Lisa to post the project burndown  chart.  Lisa  decides  to post the burndown chart in the basement where none of the team members regularly visit. What is wrong with Lisa's choice of the information radiator's posting location?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Use the daily stand-up stick as a gavel and call out the offending parties to behave properly."
    }, {
      "option" : "B",
      "text" : "Nothing immediately but bring up the issue in the iteration review."
    }, {
      "option" : "C",
      "text" : "Trust that as a self-organizing team, it will notice the issue and correct the problem."
    }, {
      "option" : "D",
      "text" : "Cancel the meeting."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A high-performance, self- organizing team should realize and correct the disruptive behavior. [Coaching Agile Teams. Lyssa Adkins.] [Communications]"
    },
    "question" : "Three daily stand-up participants are holding a disruptive side conversation. How should the team leader approach the issue?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "NPV is a rate value and IRR is a magnitude value."
    }, {
      "option" : "B",
      "text" : "NPV is a rate value and IRR is a summed value."
    }, {
      "option" : "C",
      "text" : "They do not differ."
    }, {
      "option" : "D",
      "text" : "NPV is a magnitude value and IRR is a rate value."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The internal rate of return (IRR) is a financial metric used to measure and compare the profitability of investments. The IRR is the 'rate' that makes the net present value of all cash flows from a particular investment equal to zero. Unlike NPV which is a dollar amount (i.e., a magnitude)  value, the IRR is a rate (i.e.,, a percentage). Often times, the IRR is compared against a threshold rate value to determine if the investment is a suitable risk worth implementing. For example, you might calculate an IRR to be 13% for an investment while a comparative market rate is 2%. The IRR being larger than the  comparative market rate, would indicate the investment is worth pursuing. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "How do NPV and IRR differ?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "On a website that is firewalled and difficult to access."
    }, {
      "option" : "B",
      "text" : "A conspicuous place where the team and stakeholders can review the information radiator easily."
    }, {
      "option" : "C",
      "text" : "In the company monthly newsletter."
    }, {
      "option" : "D",
      "text" : "In an inconspicuous place where only certain team members can review  the information radiator."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An information radiator should be posted in a highly visible area that is easily accessible by the team and stakeholders. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "An agile tem has decided to use an information radiator for tracking progress.   Where   should   it   post the information radiator?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Two to four weeks."
    }, {
      "option" : "B",
      "text" : "Three to five weeks."
    }, {
      "option" : "C",
      "text" : "Two months."
    }, {
      "option" : "D",
      "text" : "One week."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved     product     is      delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is the typical duration of an iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Process analysis technique"
    }, {
      "option" : "B",
      "text" : "Code refactoring technique"
    }, {
      "option" : "C",
      "text" : "Done done technique"
    }, {
      "option" : "D",
      "text" : "Defect technique"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements can be made. It is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can    build).    [Lean-Agile    Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Steve and his team are using process mapping to understand how inputs in his business are turned into outputs  and where bottlenecks form. Process mapping is an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Only as  requested by  the customer"
    }, {
      "option" : "B",
      "text" : "Seldom"
    }, {
      "option" : "C",
      "text" : "Twice a release"
    }, {
      "option" : "D",
      "text" : "Frequently"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need). Sometimes a product may be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "How often are the processes of verification and validation performed on an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Only work that is to be completed for the next few iterations "
    }, {
      "option" : "B",
      "text" : "Only the iterations involved with  other  teams  excluding his own "
    }, {
      "option" : "C",
      "text" : "Only the next iteration "
    }, {
      "option" : "D",
      "text" : "All work that is remaining in the project through its completion"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "When using a rolling wave or rolling look ahead plan for complex projects, only work that is about to be completed for the next few iterations - where requirement details are better understood  -  are  planned.  The   plan includes all interdependent agile project teams to ensure successful integration of tasks. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "As project leader, Hank is conducting a rolling look ahead plan for a complex project. What type of work should Hank include in the rolling look ahead plan?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Transportation"
    }, {
      "option" : "B",
      "text" : "Torpid"
    }, {
      "option" : "C",
      "text" : "Tangible"
    }, {
      "option" : "D",
      "text" : "Taciturn"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing analysis technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities   for   process improvement. Waste can take many forms  and  can  be  remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste within the process. Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible,   the   non   value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to identify areas of waste that exist in the process. The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the T in WIDETOM  stand  for  with  respect to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Inspiring"
    }, {
      "option" : "B",
      "text" : "Adaptability"
    }, {
      "option" : "C",
      "text" : "Openness"
    }, {
      "option" : "D",
      "text" : "Courage"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management   Institute.]   [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a community value per the  PMI   agile   community   of    practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Dynamic communication"
    }, {
      "option" : "B",
      "text" : "Oral communication"
    }, {
      "option" : "C",
      "text" : "Osmotic communication"
    }, {
      "option" : "D",
      "text" : "Organic communication"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated   team  members unconsciously. By sharing the same work environment, team members are exposed to the same environmental sounds and other environmental input and unconsciously share a common framework    that  improves communication. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "When a team shares information unconsciously by the simple fact that it is       collocated,       what       is      the communication method known as?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Organic knowledge"
    }, {
      "option" : "B",
      "text" : "Progressive  elaborated knowledge"
    }, {
      "option" : "C",
      "text" : "Collective knowledge"
    }, {
      "option" : "D",
      "text" : "Tacit knowledge"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Tacit knowledge is the 'sum of all knowledge from all people on a project team.' [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "According to Cockburn, what is referred to as the 'sum of all knowledge   from   all   people   on    a project team?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "67%"
    }, {
      "option" : "B",
      "text" : "60%"
    }, {
      "option" : "C",
      "text" : "50%"
    }, {
      "option" : "D",
      "text" : "40%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments. To calculate ROI, the return of an investment (i.e., the gain minus the cost) is divided by the    cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $15,000;  Cost: $10,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "12 hours"
    }, {
      "option" : "B",
      "text" : "8 hours"
    }, {
      "option" : "C",
      "text" : "4 hours"
    }, {
      "option" : "D",
      "text" : "2 hours"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Timeboxing is a realistic estimate or expectation of how long an action, task, or event will take to perform. Some tasks cannot be performed in the initial timeboxed estimate and are good candidates for reevaluation and possibly further decomposition  into  more  tasks.  [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "If a task is expected to take approximately 4 hours to complete, what would be a good timebox    value to assign to the task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Superlative team members"
    }, {
      "option" : "B",
      "text" : "Osmotic information radiators"
    }, {
      "option" : "C",
      "text" : "Lessons  learned from successes and failures"
    }, {
      "option" : "D",
      "text" : "Planning for the next iteration"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "During reflection an agile team takes a break after completing an iteration to pause and contemplate about its performance. Topics include: lessons learned from successes and failures, such as programming  methods that were highly efficient or inefficient; how to reinforce successful practices, such as new testing standard practices; how to discourage negative practices, like straying from team approved coding standards in order   to make an iteration deadline. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "When an agile team performs reflection, what types of topics does it review?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Osmotic communication"
    }, {
      "option" : "B",
      "text" : "Osmotic coding"
    }, {
      "option" : "C",
      "text" : "Osmotic integration"
    }, {
      "option" : "D",
      "text" : "Osmotic refactoring"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence   of   being   collocated:   team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In the Crystal framework, what is one benefit of collocation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The production code is postfactored to add redundancy measures. "
    }, {
      "option" : "B",
      "text" : "The production code base is tested to identify any integration defects. "
    }, {
      "option" : "C",
      "text" : "Other code is integrated before testing the production code at the end of the day. "
    }, {
      "option" : "D",
      "text" : "The production code is reviewed  in  its entirety  by  pair programmers."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Drew and his pair programming partner Steve have just finished integrating new code into the production code base. What should happen next according to the XP principle of continuous integration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Bout team"
    }, {
      "option" : "B",
      "text" : "Attack team"
    }, {
      "option" : "C",
      "text" : "Empowered team"
    }, {
      "option" : "D",
      "text" : "Forward team"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. This is the antithesis to the classic viewpoint of the traditional project manager who is seen as someone   that controls all decisions and delegates tasks to a team with little feedback. An agile team must include all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer is closely integrated  with the agile team with collocation/on-site support being ideal. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What type of team is entrusted to self-organize and make decisions collectively to adapt to change?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Overbearing"
    }, {
      "option" : "B",
      "text" : "Fastidious"
    }, {
      "option" : "C",
      "text" : "Humble"
    }, {
      "option" : "D",
      "text" : "Honesty"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Leading Change"
    }, {
      "option" : "B",
      "text" : "Rigid"
    }, {
      "option" : "C",
      "text" : "Passionate"
    }, {
      "option" : "D",
      "text" : "Melancholy"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community  of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adaptability"
    }, {
      "option" : "B",
      "text" : "Optimistic"
    }, {
      "option" : "C",
      "text" : "Contemplative"
    }, {
      "option" : "D",
      "text" : "Peaceful"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage,     Openness,     Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ultra programming (UP)"
    }, {
      "option" : "B",
      "text" : "Peer perfect programming (3P)"
    }, {
      "option" : "C",
      "text" : "Paired programming (PP)"
    }, {
      "option" : "D",
      "text" : "Extreme programming (XP)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Extreme programming (XP) is a programmer-centric agile framework that focuses on small, ongoing releases. XP highlights several principles: pair programming, sustainable pace, ongoing automated testing, effective communication, simplicity, feedback, courage, collective ownership, continuous integration,   energized   work,   shared workspaces, on-site customer representation, and the use of  metaphor to describe concepts. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which software development framework stresses a  'sustainable pace' of development, simple design, collective ownership, and an on-site customer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Budget at correlation"
    }, {
      "option" : "B",
      "text" : "Budget analysis correlation"
    }, {
      "option" : "C",
      "text" : "Budget and cost"
    }, {
      "option" : "D",
      "text" : "Budget at completion"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC),   Planned   Value   (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does BAC stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Peer pressure, fine-grained coordination, a fine focus, and daily commitment"
    }, {
      "option" : "B",
      "text" : "Peer pressure, fine-grained coordination, a broad focus, daily commitment, and obstacle identification"
    }, {
      "option" : "C",
      "text" : "Peer pressure, fine-grained coordination, a fine focus, weekly commitment, and obstacle identification"
    }, {
      "option" : "D",
      "text" : "Peer pressure, fine-grained coordination, a fine focus, daily commitment, and obstacle identification"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The key characteristics of a healthy stand-up meeting include: peer pressure - the team is dependent upon each other so expectations of peers drives progress; fine-grained coordination - the team should understand the necessity for focus and working dependently; fine focus - the team  should  understand  the  need for brevity in the stand-up meeting so the team can be productive; daily commitment - the team should understand the value of daily commitments to each other and uphold those commitments; identification of obstacles - the team collectively  should be aware of each other's obstacles so that the team collectively can try to resolve them. [The Art of Agile Development. James Shore.] [Communications]"
    },
    "question" : "A healthy stand-up meeting has several characteristics. Select the response that lists a majority of these characteristics."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Prioritized value"
    }, {
      "option" : "B",
      "text" : "Planned value"
    }, {
      "option" : "C",
      "text" : "Proportional value"
    }, {
      "option" : "D",
      "text" : "Per value"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "EVM or earned value management is a management technique   used   to   evaluate   project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does PV stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Prescriptive and descriptive"
    }, {
      "option" : "B",
      "text" : "Ideal and actual"
    }, {
      "option" : "C",
      "text" : "Perceived and actual"
    }, {
      "option" : "D",
      "text" : "Perceived and conceptual"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In lean software development, there are two forms of integrity: conceptual and perceived. Conceptual integrity     is     determined     by    the developers and is generally high if the product integrates well and functions as specified. Perceived integrity is judged by the customer and is high if the customer is happy with the product, first and foremost, and secondly if the product meets requirements. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Name the two types of integrity in the lean software development framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Business value maximization technique"
    }, {
      "option" : "B",
      "text" : "Performance  improvement plan technique"
    }, {
      "option" : "C",
      "text" : "Process analysis technique"
    }, {
      "option" : "D",
      "text" : "Kanban technique"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a collaborative process analysis technique    where    a    diverse    team depicts/maps a process to identify where waste occurs and where improvements can be made. It is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Steve and his team, in a process mapping workshop, just identified two process steps that are significantly impacting the overall performance of the system. Process mapping is an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Performance  improvement plan technique"
    }, {
      "option" : "B",
      "text" : "Process analysis technique"
    }, {
      "option" : "C",
      "text" : "Kanban technique"
    }, {
      "option" : "D",
      "text" : "Business value maximization technique"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Value stream mapping is a collaborative        process        analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements can be made. It is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Ethan and his team just identified two  processes for upcoming  Kaizen events in a three day value stream mapping workshop. When an agile team uses value stream mapping like Ethan's team, it is an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Picking  a reserved  team member as facilitator. "
    }, {
      "option" : "B",
      "text" : "Hosting the meeting in  the typical Monday  morning conference room that is usually only available to certain team members. "
    }, {
      "option" : "C",
      "text" : "Delaying any criticism that may hamper idea generation. "
    }, {
      "option" : "D",
      "text" : "Leaving participants in the dark until the day of the meeting to add an element of surprise."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A  successful   brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may stifle idea generation. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As agile team leader, Nathan intends to schedule a brainstorming session to generate ideas that may help solve some of the team's current issues. Which of the following is a good brainstorming technique that Nathan should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Program Management Institute"
    }, {
      "option" : "B",
      "text" : "Plan Management Institute"
    }, {
      "option" : "C",
      "text" : "Project Management Institute"
    }, {
      "option" : "D",
      "text" : "Program  Management International"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Project Management Institute (PMI) outlines a professional code of conduct in the PMI Code of Ethics and Professional Conduct document. [PMI Code of Ethics and Professional Conduct. Project Management Institute.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which professional society puts forth a code of conduct that every professional should maintain?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning stud"
    }, {
      "option" : "B",
      "text" : "Planning cards"
    }, {
      "option" : "C",
      "text" : "Planning cribbage"
    }, {
      "option" : "D",
      "text" : "Planning poker"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Planning poker is a popular agile game used to estimate the  relative work effort of developing a user story. Each team member has a deck of cards with various numbered values which he or she can draw from to   'play   (showing   one   card)'     to indicate an estimated point value of developing a user story. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Henry has just revealed a card to his agile team that shows a value of 5. He  drew  the  card  from  a  deck     of similar shaped cards with other values. What popular agile planning game is Henry most likely playing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Should not have"
    }, {
      "option" : "B",
      "text" : "Small"
    }, {
      "option" : "C",
      "text" : "Specific"
    }, {
      "option" : "D",
      "text" : "Should have"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The MoSCoW technique is commonly used in agile to prioritize user stories and create a story  map. The MoSCoW technique prioritizes user stories into the following groups in descending order of priority: M - Must have; S - Should have; C - Could have; W - Would have. Must have items are those product features which are absolutely essential to develop. Should have items are product features that are not essential but have significant business value. Could have items are product features that would add some business value. Would have items are product features that have marginal business value. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Perry  is  explaining  the MoSCoW technique which is often used in agile to prioritize user stories. What does the S stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning game"
    }, {
      "option" : "B",
      "text" : "MoSCoW"
    }, {
      "option" : "C",
      "text" : "Planning poker"
    }, {
      "option" : "D",
      "text" : "Affinity estimating"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product backlogs. Although several methods    exist,    the    basic   affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "What agile estimation technique is useful for efficiently estimating the relative work effort of large product backlogs?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Working the team"
    }, {
      "option" : "B",
      "text" : "Criticizing the team"
    }, {
      "option" : "C",
      "text" : "Motivating the team"
    }, {
      "option" : "D",
      "text" : "Leading the team"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Having a motivated team is essential for any project, regardless of whether  it  is  agile  or  not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust    and    shows    that     leadership believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Vikki, as project leader, empowers her team to make many important decisions. This helps to build trust and a strong sense of community. What is Vikki doing when she empowers the team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Infinity estimating"
    }, {
      "option" : "B",
      "text" : "Affinity estimating"
    }, {
      "option" : "C",
      "text" : "Relative estimating"
    }, {
      "option" : "D",
      "text" : "Planning poker"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product backlogs. Although several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a  wall  in  a  large  conference    room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "Stephanie, an agile developer, is at a planning event where the relative development effort of user stories is to be estimated. The planning event is mostly conducted in silence and the team is to assign user stories to a Fibonacci sequence. The planning event is efficient and the user stories are estimated quickly. What type of planning event is Stephanie most  likely attending?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Three point estimation"
    }, {
      "option" : "C",
      "text" : "Triangulation"
    }, {
      "option" : "D",
      "text" : "Comparative analysis"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Triangulation involves estimating the relative effort of developing a user story by comparing it against two other user stories. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Which agile estimation technique involves estimating the relative effort of developing a user story by comparing it against two other user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Dedicate wall space for frequently updated information radiators"
    }, {
      "option" : "B",
      "text" : "Play loud  and motivational background music"
    }, {
      "option" : "C",
      "text" : "Have non-opening windows"
    }, {
      "option" : "D",
      "text" : "Use  cubicle walls to  give privacy"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Hector, as team leader, wants to design a comfortable, collaborative team space for his agile project. What can he do as a basic guideline?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "PMI's  Code  of  Ethics  and Professional Conduct"
    }, {
      "option" : "B",
      "text" : "PMI's  Code  of  Ethics  and Professional Morality"
    }, {
      "option" : "C",
      "text" : "PMI's Code of Conduct and Professional Morality"
    }, {
      "option" : "D",
      "text" : "PMI's Code of Morality"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Project Management Institute (PMI) outlines a professional code of conduct in the PMI Code of Ethics and Professional Conduct document. [PMI Code of Ethics and Professional Conduct. Project Management Institute.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the document authored by PMI that outlines moral behaviors of professionals called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extensive testing before integration with the production code base."
    }, {
      "option" : "B",
      "text" : "Complete inspection by the customer  or  customer representative."
    }, {
      "option" : "C",
      "text" : "Conversion to the target coding language."
    }, {
      "option" : "D",
      "text" : "Postfactoring  to  add contingency measures.Value Stream Analysis Exam"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The extreme programming (XP) principle of continuous integration  is  that  code  is  integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Drew and his pair programming partner Steve have just finished building    new    code.    What  should happen  next  according to  the XP principle of continuous integration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A lean manufacturing technique used to analyze the flow of material and information that form a product to the consumer."
    }, {
      "option" : "B",
      "text" : "A six sigma manufacturing technique used to analyze the occurrence of defects."
    }, {
      "option" : "C",
      "text" : "A lean manufacturing technique used to control the flow of inventory (WIP) in a manufacturing plant."
    }, {
      "option" : "D",
      "text" : "A six sigma manufacturing technique used to control the visual management board."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping:    1)    Identification    of  the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream    to    deliver    value    to     the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "Which of the following best defines value stream mapping?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Intrepid"
    }, {
      "option" : "B",
      "text" : "Lean / Toyota  production system"
    }, {
      "option" : "C",
      "text" : "Agile"
    }, {
      "option" : "D",
      "text" : "Six sigma"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information  (i.e.,  value)  that  form  a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times   are   generally   seen   as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "What manufacturing technique is generally credited with the creation of value stream mapping?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Identify areas of Kaizen in a process."
    }, {
      "option" : "B",
      "text" : "Identify areas of Yokoten in a process."
    }, {
      "option" : "C",
      "text" : "Identify areas of Kanban in a process."
    }, {
      "option" : "D",
      "text" : "Identify areas of  waste in  a process."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening.    3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise   Agility.   Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "What is one purpose of value stream mapping?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Identify areas of  waste throughout a process."
    }, {
      "option" : "B",
      "text" : "Identify areas of Yokoten in a process."
    }, {
      "option" : "C",
      "text" : "Identify areas of  value in  a process."
    }, {
      "option" : "D",
      "text" : "Identify areas of  WIP in  a process."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process    steps,    delays,   information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work    towards    the    goal    through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "What is a purpose of value stream mapping?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Waste"
    }, {
      "option" : "B",
      "text" : "Value-forma"
    }, {
      "option" : "C",
      "text" : "Value-pro"
    }, {
      "option" : "D",
      "text" : "Value-added"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e.,  the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis,  draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "What is total lead time considered as in a value stream map?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Increase process time by 20%"
    }, {
      "option" : "B",
      "text" : "Reduce lead time by 90%"
    }, {
      "option" : "C",
      "text" : "Both."
    }, {
      "option" : "D",
      "text" : "Neither. Both represent adding more waste into the value stream."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product   or   service   to   a  consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole    process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "Karen is reviewing a value stream map that she and her agile team just created. The team is debating whether it should reduce a lead time by 90% or increase a process time by 20%.  Which of the previous two actions would you suggest her team take?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Neither. Both represent adding more waste into the value stream."
    }, {
      "option" : "B",
      "text" : "Both."
    }, {
      "option" : "C",
      "text" : "Reduce process time by 30%"
    }, {
      "option" : "D",
      "text" : "Increase lead time by 60%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a  lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze  the  map  to  determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver,  James  R.  Trott.] [Value stream analysis]"
    },
    "question" : "Karen is reviewing a value stream map that she and her agile team just created. The team is debating whether it should increase a lead time by 60% or decrease a process time by 30%. Which of the previous two actions would you suggest her team take?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Future-state value stream map"
    }, {
      "option" : "B",
      "text" : "Waste stream map"
    }, {
      "option" : "C",
      "text" : "Value stream analysis"
    }, {
      "option" : "D",
      "text" : "Current-state  value stream map"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements.   Estimate   process  step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process    improvement    events   (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "If you were shown a diagram of a proposed design to improve an  existing system and the diagram had process steps, information flow, lead times, and process times, what type of diagram would you believe it to be?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Current-state  value stream map"
    }, {
      "option" : "B",
      "text" : "Value stream analysis"
    }, {
      "option" : "C",
      "text" : "Future-state value stream map"
    }, {
      "option" : "D",
      "text" : "Waste stream map"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There is roughly five steps in the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process).    2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times should try to be reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a  future  state  value  stream  map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "If you were shown a diagram of an existing system and the diagram had process steps, information flow, lead times, and process times, what type of diagram would you believe it to be?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To understand how sigmas are delivered to a customer."
    }, {
      "option" : "B",
      "text" : "To understand how quality is delivered to a customer."
    }, {
      "option" : "C",
      "text" : "To understand how agility is delivered to a customer."
    }, {
      "option" : "D",
      "text" : "To understand  how value is delivered to a customer."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value stream mapping is a lean manufacturing technique used to analyze the flow of material and information (i.e., value) that form a product or service to a consumer. There  is  roughly  five  steps  in     the implementation of value stream mapping: 1) Identification of the product, customer, and scope (i.e., the beginning and end of the process). 2) Map as a team or individual  the current value stream, identifying process steps, delays, information requirements. Estimate process step durations and lead time durations. A lead time is how long a process or event must wait before happening. 3) Analyze the map to determine where waste exists (e.g., lead times) an where processes can be improved (process times are generally seen as value- added time, but on the whole process times   should   try   to   be   reduced to reduce the overall time it takes the stream to deliver value to the customer). 4) From the analysis, draw a future state value stream map that represents a vision or goal the value stream should strive to become. 5) Work towards the goal  through process improvement events (i.e., Kaizen) or other methods. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "What  is  one purpose of  value stream mapping?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Defect-stream  and Value- stream"
    }, {
      "option" : "B",
      "text" : "Information-flow and information-owner"
    }, {
      "option" : "C",
      "text" : "Value-added  and non value- added"
    }, {
      "option" : "D",
      "text" : "Sigma-ranked and Theta- prioritized"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a lean manufacturing     analysis     technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities for process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste  within  the  process.   Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "Harry's agile team has just finished creating a value stream map for one of its products. On the value stream map, Harry's team has identified two types of data. Which of the following are these two types of data most likely to be?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Operations research"
    }, {
      "option" : "B",
      "text" : "Management science"
    }, {
      "option" : "C",
      "text" : "Value stream mapping"
    }, {
      "option" : "D",
      "text" : "Systems engineering"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a lean manufacturing     analysis     technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities for process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste  within  the  process.   Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "If a business is interested in streamlining its processes to remove and reduce waste and increase the efficiency with which value is delivered to its customers, what technique, adopted from lean manufacturing, might it consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A muda stream map"
    }, {
      "option" : "B",
      "text" : "A kaizen stream map"
    }, {
      "option" : "C",
      "text" : "A lean stream map"
    }, {
      "option" : "D",
      "text" : "A value stream map"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Value stream mapping is a lean manufacturing     analysis     technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities for process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E Ð extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste  within  the  process.   Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "Jill and Stephanie are reviewing a large chart that visually depicts the flow of information from origin to customer. On the chart are times indicating the duration of value-added processes and non value-added processes. What are Jill and Stephanie reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Procedure charting"
    }, {
      "option" : "B",
      "text" : "Multiple regression"
    }, {
      "option" : "C",
      "text" : "Value stream mapping"
    }, {
      "option" : "D",
      "text" : "Process shortening mapping"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a lean manufacturing     analysis     technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities for process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste  within  the  process.   Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "What is it called when a team collaboratively charts the flow of information or material of a process from  origin  to  destination  along with all its instances of waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Deterrent"
    }, {
      "option" : "B",
      "text" : "Deleterious"
    }, {
      "option" : "C",
      "text" : "Defect"
    }, {
      "option" : "D",
      "text" : "Detriment"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a lean manufacturing     analysis     technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities for process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas of waste  within  the  process.   Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to identify areas of waste that    exist    in    the    process.     The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the D  in WIDETOM stand for with respect  to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coach and mentor"
    }, {
      "option" : "B",
      "text" : "Practice and preach"
    }, {
      "option" : "C",
      "text" : "Remove and deliver"
    }, {
      "option" : "D",
      "text" : "Engage and inspire"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Highsmith defines adaptive leadership as two dimensional: Being agile and doing agile. Being agile includes focusing on cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements.   Doing   agile   includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "According to Highsmith and his definition of adaptive leadership, what is one item a project leader can do for 'doing agile?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Car"
    }, {
      "option" : "B",
      "text" : "Preferred customer"
    }, {
      "option" : "C",
      "text" : "Quickly  choose  among any available car"
    }, {
      "option" : "D",
      "text" : "Will remain loyal to the brand"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A user story is written with three essential elements: a role, a goal, and an achieved business value. It typically takes the form of: 'As a, I need to, so that I can .' A simple example is, 'As an online customer, I need to be able  to search by product name and description so that I may add products to  my  shopping  cart.'  [User  Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Identify the goal in the following example user story: 'As a preferred customer, I need to be able to quickly choose among any available car so that I will remain loyal to the brand.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Preferred customer"
    }, {
      "option" : "B",
      "text" : "Car"
    }, {
      "option" : "C",
      "text" : "Will remain loyal to the brand"
    }, {
      "option" : "D",
      "text" : "Quickly  choose  among any available car"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A user story is written with three essential elements: a role, a goal, and an achieved business value. It typically takes the form of: 'As a, I need to, so that I can .' A simple example is, 'As an online customer, I need to be able  to search by product name and description so that I may add products to my shopping cart.' [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Identify the achieved business value in  the  following  example  user story: 'As a preferred customer, I need to be able to quickly choose among any available car so that I will remain loyal to the brand.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Problem-mitigation strategies"
    }, {
      "option" : "B",
      "text" : "Problem-first strategies"
    }, {
      "option" : "C",
      "text" : "Problem-solving strategies"
    }, {
      "option" : "D",
      "text" : "Problem-prioritization strategies"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem- solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is an essential knowledge and skill area of the agile team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Providing minimal leadership."
    }, {
      "option" : "B",
      "text" : "Providing  a forum for anonymous criticism."
    }, {
      "option" : "C",
      "text" : "Providing  constructive feedback."
    }, {
      "option" : "D",
      "text" : "Providing  minimal supervision."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring  and  coaching;  where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In agile and other project management styles, team motivation is a critical factor for success. What is one method to improve team motivation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Unit testing,  quality control, and content management"
    }, {
      "option" : "B",
      "text" : "Reflection and parsing"
    }, {
      "option" : "C",
      "text" : "Requirements definition, scoping, and scheduling"
    }, {
      "option" : "D",
      "text" : "Envisioning, exploring, and closing"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Jim Highsmith's agile project management model consists of the following   five   phases:  Envisioning, speculating, exploring, adapting, and closing. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jim Highsmith's agile project management model divides project management into five phases. Which response includes items from those five phases?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Scrum is used for software development, whereas XP can be applied to software and hardware"
    }, {
      "option" : "B",
      "text" : "Scrum is modeled after XP"
    }, {
      "option" : "C",
      "text" : "Scrum  and XP  share no similarities"
    }, {
      "option" : "D",
      "text" : "XP is modeled after scrum"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Scrum is generally considered to be modeled after XP and shares many similar concepts and techniques. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is  the relationship  between scrum and XP?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Speed-to-risk"
    }, {
      "option" : "B",
      "text" : "Speed-to-value"
    }, {
      "option" : "C",
      "text" : "Speed-to-quality"
    }, {
      "option" : "D",
      "text" : "Speed-to-refinement"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Highsmith defines adaptive leadership  as  two  dimensional: Being agile and doing agile. Being agile includes focusing on cornerstones of agile project management, like incremental delivery, continuous integration, and adapting to changing requirements. Doing agile includes several activities that an agile leader must do: do less; speed-to-value, quality, and engage and inspire. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Soft skills negotiation]"
    },
    "question" : "According to Highsmith and his definition of adaptive leadership, what is one item a project leader can focus on for 'doing agile?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That it would neither add to nor subtract value from the buyer's portfolio."
    }, {
      "option" : "B",
      "text" : "That it would add value to the buyer's portfolio."
    }, {
      "option" : "C",
      "text" : "That it would subtract value from the buyer's portfolio."
    }, {
      "option" : "D",
      "text" : "None of the above."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment   or   project.   NPV   is  the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow is discounted back  to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash  inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "If the NPV of an investment is zero, what does that indicate to the potential buyer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The product datasheet"
    }, {
      "option" : "B",
      "text" : "The release plan"
    }, {
      "option" : "C",
      "text" : "The retrospective"
    }, {
      "option" : "D",
      "text" : "The product backlog"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The product backlog serves as the common bridge or connection between the product owner and team. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In scrum, what serves as the common bridge or connection between the product owner and team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through immediately planning for the next iteration."
    }, {
      "option" : "B",
      "text" : "Through  writing a solid business case."
    }, {
      "option" : "C",
      "text" : "Through  reserving time  for reflection."
    }, {
      "option" : "D",
      "text" : "Through updating the project vision."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Agile project management places strong emphasis on 'continuous improvement.' Continuous improvement processes are built into the agile methodology, from customers providing feedback after each iteration to the team reserving time to reflect on its performance through retrospectives after each iteration. Ongoing unit and integration testing and keeping up with technological/industry developments also play a part in the continuous improvement process. Continuous improvement is also a key principle in the lean methodology, where a focus of removing waste from the value stream is held. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "A customer demo has just completed on Vanessa's agile team, what activity can Vanessa's team perform to focus on continuous improvement?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Use  pairing or  sharing workstations"
    }, {
      "option" : "B",
      "text" : "Use fluorescent lighting"
    }, {
      "option" : "C",
      "text" : "Use headphones so developers can drown out background noise"
    }, {
      "option" : "D",
      "text" : "Update information radiators infrequently"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication,      innovation,      and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction   of nonessential noise/distractions;    dedicated whiteboard and wall space for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "What can an  agile team  do  to promote a warm, welcoming environment to  foster  effective communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Communications management"
    }, {
      "option" : "B",
      "text" : "Process flow mapping"
    }, {
      "option" : "C",
      "text" : "Value stream mapping"
    }, {
      "option" : "D",
      "text" : "Task-network modeling"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders  in  a  timely  manner,   3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:   Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also  use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Peter knows that effective communication is highly important for an agile team. What is the   knowledge and skill area  that  deals with communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "10"
    }, {
      "option" : "B",
      "text" : "4"
    }, {
      "option" : "C",
      "text" : "5"
    }, {
      "option" : "D",
      "text" : "40"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Velocity is a measure of the number of user story points completed per iteration. An agile team can use its previous velocity recordings as a method of estimating how many user story points it may complete in the  next iteration. David's team's velocity is 10. [Agile Estimating and  Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "Hector's agile team just finished building, testing, and releasing 10 user story points in its most recent 4 week iteration. What is the team's velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Process kindling"
    }, {
      "option" : "B",
      "text" : "Process tailoring"
    }, {
      "option" : "C",
      "text" : "Process adapting"
    }, {
      "option" : "D",
      "text" : "Process initiating"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "When initiating a new agile development effort the project team should determine its agile approach. This is also known as  process tailoring, where the agile team determines which agile practices or standards it will follow for the project, like whether it will hold a daily stand- up meeting and what its duration will be, whether it will use any information radiators, how it will estimate and plan for product features, etc. [Agile Software Development: The Cooperative   Game   Ð   2nd   Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "Hank's agile team  is  currently initiating  a   new project and determining which agile practices, standards, techniques it will use through the course of the project. What is Hank's agile team doing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Following a plan"
    }, {
      "option" : "B",
      "text" : "Customer collaboration"
    }, {
      "option" : "C",
      "text" : "Processes and tools"
    }, {
      "option" : "D",
      "text" : "Contract negotiation"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. [Manifesto      for      Agile     Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Which response lists one of its primary values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product  backlog and sprint backlog"
    }, {
      "option" : "B",
      "text" : "Product  backlog and project backlog"
    }, {
      "option" : "C",
      "text" : "Sprint backlog and scrum backlog"
    }, {
      "option" : "D",
      "text" : "Sprint backlog and iteration backlog"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The two backlogs found on agile projects are the product backlog and the sprint/iteration backlog [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "Select the response that holds the two backlogs that are used in an agile project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product schedule"
    }, {
      "option" : "B",
      "text" : "Product quality"
    }, {
      "option" : "C",
      "text" : "Product cost"
    }, {
      "option" : "D",
      "text" : "Product value"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations   are   typically   two   to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need). Sometimes a product may be built and integrated to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated.   [Agile   Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "What does performing frequent verification and validation  help ensure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Portfolio governance layer"
    }, {
      "option" : "B",
      "text" : "Risk management layer"
    }, {
      "option" : "C",
      "text" : "Methodology  management layer"
    }, {
      "option" : "D",
      "text" : "Product layer"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The four layers of Highsmith's agile enterprise framework  include the: portfolio governance layer, project management layer, iteration management layer, and the technical practices layer. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Select the response that holds one layer of Highsmith's agile enterprise framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk management layer"
    }, {
      "option" : "B",
      "text" : "Project management layer"
    }, {
      "option" : "C",
      "text" : "Product layer"
    }, {
      "option" : "D",
      "text" : "Methodology  management layer"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The four layers of Highsmith's agile enterprise framework  include the: portfolio governance layer, project management layer, iteration management layer, and the technical practices layer. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which of the following holds one layer of Highsmith's agile enterprise framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product layer"
    }, {
      "option" : "B",
      "text" : "Methodology  management layer"
    }, {
      "option" : "C",
      "text" : "Risk management layer"
    }, {
      "option" : "D",
      "text" : "Iteration management layer"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The four layers of Highsmith's agile enterprise framework  include the: portfolio governance layer, project management layer, iteration management layer, and the technical practices layer. [Agile Project Management: Creating Innovative Products      Ð      2nd      Edition.    Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Select the response that holds one layer of Highsmith's agile enterprise framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Technical practices layer"
    }, {
      "option" : "B",
      "text" : "Risk management layer"
    }, {
      "option" : "C",
      "text" : "Methodology  management layer"
    }, {
      "option" : "D",
      "text" : "Product layer"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The four layers of Highsmith's agile enterprise framework  include the: portfolio governance layer, project management layer, iteration management layer, and the technical practices layer. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Of the following select the response that holds one layer of Highsmith's agile enterprise framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Portfolio governance layer, Methodology management layer, iteration management layer, and the technical practices layer"
    }, {
      "option" : "B",
      "text" : " Product layer, project management layer, iteration management layer, and the technical practices layer"
    }, {
      "option" : "C",
      "text" : "Portfolio governance layer, project management layer, iteration management layer, and the technical practices layer"
    }, {
      "option" : "D",
      "text" : "Portfolio governance layer, project management layer, risk management layer, and the technical practices layer"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The four layers of Highsmith's agile enterprise framework  include the: portfolio governance layer, project management layer, iteration management layer, and the technical practices layer. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What are the four layers  of Highsmith's agile enterprise framework?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project leader"
    }, {
      "option" : "B",
      "text" : "Product owner"
    }, {
      "option" : "C",
      "text" : "Business analyst"
    }, {
      "option" : "D",
      "text" : "Business executive"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than   the   typical   traditional   project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to     be     self-organized     and      self disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers      and      developers,      are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What  person  in  the agile framework 'serves as a coach, mentor, and counselor?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Delegation of all tasks to team members by the project manager"
    }, {
      "option" : "B",
      "text" : "Working  with  trusted,  cross- functional team"
    }, {
      "option" : "C",
      "text" : "Increasing product functionality with each iteration"
    }, {
      "option" : "D",
      "text" : "Conveying information to the customer about iteration progress"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Agile teams should be self- organizing and not have tasks delegated upon. The Agile Manifesto defines four values and 12 supporting principles. The values are 1) individuals and interactions over processes and tools, 2) working software         over        comprehensive documentation, 3) customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. Agile principles include 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) using working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention  to  technical  excellence  and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is NOT a key agile project management characteristic?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Two to three minutes"
    }, {
      "option" : "B",
      "text" : "10 to 15 minutes"
    }, {
      "option" : "C",
      "text" : "5 to 15 minutes"
    }, {
      "option" : "D",
      "text" : "15 minutes"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Two to three minutes is a typical timeboxed value for discussing user stories when playing planning poker. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "When estimating the relative work effort required to develop a user  story, the time allotted to each user story is typically Timeboxed. What is the typical Timeboxed value per user story?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Counter-alienation team"
    }, {
      "option" : "B",
      "text" : "Empowered team"
    }, {
      "option" : "C",
      "text" : "Engagement team"
    }, {
      "option" : "D",
      "text" : "Engineering team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Empowered teams - ones   that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. This is the antithesis to the classic viewpoint of the traditional project manager who is seen as someone that controls all decisions and delegates tasks to a team with little feedback. An agile team must include all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer is closely integrated  with       the       agile       team      with collocation/on-site support being ideal. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which type of team is entrusted to take ownership of a product and make timely decisions?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Description"
    }, {
      "option" : "B",
      "text" : "Online customer"
    }, {
      "option" : "C",
      "text" : "Shopping cart"
    }, {
      "option" : "D",
      "text" : "Product name"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A user story is written with three essential elements: a role, a goal, and an achieved business value. It typically takes the form of: 'As a, I need to, so that I can .' A simple example is, 'As an online customer, I need to be able to search by product name and description so that I may add products to my shopping cart.' [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Identify the role in the    following example user story: 'As an online customer, I need to be able to search  by product name and description so that I may add products to my shopping cart.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Building in pressure"
    }, {
      "option" : "B",
      "text" : "Working at a sustainable pace"
    }, {
      "option" : "C",
      "text" : "Preventing the customer  for interfering"
    }, {
      "option" : "D",
      "text" : "Empowering the customer"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Building a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is  self-organized  and self-disciplined, and is collocated. Several management techniques can be used to build or foster a high-performance team environment, some techniques include: removing obstacles that slow down a team's performance, having high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice or technique she can use to build a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Choosing the product owner; Performing an Exploratory 360; Picking team conventions and practices; Building the initial project plan"
    }, {
      "option" : "B",
      "text" : "Building the team; Performing an Exploratory 360; Fine tuning the methodology; Building the initial project plan"
    }, {
      "option" : "C",
      "text" : "Building the team; Performing an Exploratory 360; Picking story points or ideal days; Building the initial project plan"
    }, {
      "option" : "D",
      "text" : "Building the team; Performing an Exploratory 180; Picking team conventions and practices; Building the initial project plan"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Crystal development process is cyclical/iterative. Its  primary   components   are  chartering, delivery cycles, and project wrap-up. Chartering involves creating a project charter, which can last from a few  days to a few weeks. Chartering consists of four activities: 1) Building the core project team, 2) performing an Exploratory 360¡ assessment, 3) fine tuning the methodology, and 3) building the initial project plan. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "The Crystal development process has four primary steps when building the project charter. What are the steps?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "After the first iteration."
    }, {
      "option" : "B",
      "text" : "After the first release."
    }, {
      "option" : "C",
      "text" : "At the beginning of  the project."
    }, {
      "option" : "D",
      "text" : "At the end of the project."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and rough  time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development.   James   Shore.]  [Agile analysis and design]"
    },
    "question" : "Thomas, his agile team, and the customer are building the product roadmap. When is it first created?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Business case"
    }, {
      "option" : "B",
      "text" : "Risk burndown chart"
    }, {
      "option" : "C",
      "text" : "Kanban board"
    }, {
      "option" : "D",
      "text" : "Product roadmap"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project will deliver value to a customer. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James   R.   Trott.]   [Knowledge    and Skills: Level 2]"
    },
    "question" : "What  agile artifact  outlines  the project's required investment cost?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Speculation"
    }, {
      "option" : "B",
      "text" : "Release planning"
    }, {
      "option" : "C",
      "text" : "Product roadmapping"
    }, {
      "option" : "D",
      "text" : "Verification and validation"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Because each iteration typically produces a working product that is built and integrated and iterations are typically two to four weeks in length, there is frequent verification and validation to ensure product quality. Verification is the confirmation that a product performs as specified by a customer (e.g. as indicated by a user story) and validation is the confirmation that a product behaves as desired (i.e., meets the customer's need). Sometimes a product may be built and integrated  to specification - that is, it can be verified - but it does not meet the intent of the customer - that is, it cannot be validated.   [Agile   Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Product quality]"
    },
    "question" : "High product quality is  a cornerstone of  the agile project management  methodology,  what process,  performed frequently, helps ensure this standard?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product, goal, process"
    }, {
      "option" : "B",
      "text" : "Role, product, process"
    }, {
      "option" : "C",
      "text" : "Role, goal, achieved business value"
    }, {
      "option" : "D",
      "text" : "Role, goal, process"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A user story is written with three essential elements: a role, a goal, and an achieved business value. It typically takes the form of: 'As a, I need to, so that I can .' A simple example is, 'As an online customer, I need to be able to search by product name and description so that I may add products to my shopping cart.' [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "What are three essential elements of a user story?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Frequent 'customer-agile team' collaboration and short iteration durations"
    }, {
      "option" : "B",
      "text" : " Products work  as intended because of frequent delivery iterations"
    }, {
      "option" : "C",
      "text" : "Documentation supports working software and appropriate processes and tools aid the development process"
    }, {
      "option" : "D",
      "text" : "Customers must collaborate with the agile team to provide feedback and stakeholders must interact    effectively    to    create business value"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The agile secondary values include: documentation of software, processes and tools, contract negotiation, and following project plans. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the response that holds the most secondary values per the Agile Manifesto."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Contracts  need  to  be negotiated and plans followed"
    }, {
      "option" : "B",
      "text" : " Products work  as intended because of frequent delivery iterations"
    }, {
      "option" : "C",
      "text" : "Stakeholders must  interact effectively to create business value"
    }, {
      "option" : "D",
      "text" : "Customers must collaborate with the agile team to provide feedback"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The agile secondary values include:   documentation   of software, processes and tools, contract negotiation, and following project plans. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the response that holds a secondary value per the Agile Manifesto."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Progressive wave planning"
    }, {
      "option" : "B",
      "text" : "Release planning"
    }, {
      "option" : "C",
      "text" : "Progressive elaboration"
    }, {
      "option" : "D",
      "text" : "Rolling wave planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Rolling wave planning (or rolling look ahead planning) involves planning in waves or phases and is especially useful for large, complex projects. Only the next few iterations are planned in detail and iterations more distant are planned only at a high-level. Progressive elaboration is continuous planning that assumes that details and requirements will be  better refined later and will be incorporated into the planning process at the appropriate time. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Gina's agile team is beginning a large, complex project estimated to  last for three years. Her team has decided to only plan in detail for the next few iterations and keep iterations further removed at only a high-level of detail. What type of  planning technique is Gina's team using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "An assessment decision model"
    }, {
      "option" : "B",
      "text" : "A participatory decision model"
    }, {
      "option" : "C",
      "text" : "A preemptive decision model"
    }, {
      "option" : "D",
      "text" : "A risk-based decision model"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "To build trust among the team, agile believes heavily in participatory decision models where team members collaborate to make decisions. Although a team leader or scrum master will need to make some decisions individually, many decisions can be made by the team collectively. These agile principles are also known as      collective      ownership,      self- organization, and self-discipline. In collective ownership, the team members are equally responsible for project results and are empowered to participate in decision making and problem solving processes. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Affinity planning, where agile team members and product owners assemble to order and categorize user stories, is an example of:"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Tasks based on user stories"
    }, {
      "option" : "B",
      "text" : "Defects"
    }, {
      "option" : "C",
      "text" : "Test modules"
    }, {
      "option" : "D",
      "text" : "Project backlog lists"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Typical agile task boards track and monitor tasks that have been chosen for the active iteration. One column holds all the tasks selected for development during the iteration. Each task has an associated card which is placed in one of several other columns on the task board Ð such as 'To do,'  'In progress,' 'Ready for testing,' and 'Done' Ð according to current task status. Different teams may use variations of these columns, depending on project needs and their preferences. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "An agile task board usually tracks the progress of what key piece of information?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Exploratory 360"
    }, {
      "option" : "B",
      "text" : "Team convention  and standards assignment"
    }, {
      "option" : "C",
      "text" : "Team formation"
    }, {
      "option" : "D",
      "text" : "Project plan definition"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Crystal development process     is     cyclical/iterative.      Its primary components are chartering, delivery cycles, and project wrap-up. Chartering involves creating a project charter, which can last from a few  days to a few weeks. Chartering consists of four activities: 1) Building the core project team, 2) performing an Exploratory 360¡ assessment, 3) fine tuning the methodology, and 3) building the initial project plan. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Agile  analysis and design]"
    },
    "question" : "In which step of the project chartering activity of the Crystal development methodology is project soundness evaluated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1) Customer   collaboration over contract negotiation, and 2) Responding to change over following a plan."
    }, {
      "option" : "B",
      "text" : "1) Customer collaboration over contract negotiation, and 2) Following a plan over responding to change."
    }, {
      "option" : "C",
      "text" : "1) Contract negotiation over customer collaboration, and 2) Responding to change over following a plan."
    }, {
      "option" : "D",
      "text" : "1) Teams and interactions over processes and tools, 2) Working software over comprehensive documentation"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes    and    tools,    2)    working software over comprehensive documentation, 3) customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Of the following, which response lists two of the four values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1) Team member collaboration over contract negotiation, and 2) Responding to change over following a plan."
    }, {
      "option" : "B",
      "text" : "1) Individuals and interactions over processes and tools, 2) Working software over comprehensive documentation"
    }, {
      "option" : "C",
      "text" : "1) Teams and interactions over processes and tools, 2) Working software over comprehensive documentation"
    }, {
      "option" : "D",
      "text" : "1) Customer collaboration over contract negotiation, and 2) Following a plan over responding to change."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes    and    tools,    2)    working software over comprehensive documentation, 3) customer collaboration  over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Which response lists two of the four values?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A collaborative activity held for the purpose of reviewing user stories."
    }, {
      "option" : "B",
      "text" : "An individual exercise performed for the purpose of generating ideas."
    }, {
      "option" : "C",
      "text" : "A collaborative activity held for the purpose of generating ideas."
    }, {
      "option" : "D",
      "text" : "A formal meeting led by a project leader to introduce previously defined ideas."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Brainstorming is a group activity held for the purpose of generating new ideas. The idea is that through collaboration, a team can generate more potentially valuable ideas than an individual, while at the same time forming a positive  bonding experience for the team. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of brainstorming?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A high specialized team"
    }, {
      "option" : "B",
      "text" : "A team composed of generalized specialists"
    }, {
      "option" : "C",
      "text" : "A uni-functional team"
    }, {
      "option" : "D",
      "text" : "A monolithic team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams,     self-organizing     and     self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a technique that  promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Incremental development of products and services"
    }, {
      "option" : "B",
      "text" : "A singular-dimensioned team consisting of highly specialized experts all of the same skill"
    }, {
      "option" : "C",
      "text" : "Short iterations and the use of baselines for strict schedule and budget control"
    }, {
      "option" : "D",
      "text" : "Detailed change management processes"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Key characteristics of agile project management include: continuous improvement, cross- functional teams, short iterations, an incremental approach, and business priorities and customer value. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following lists a key agile project management characteristic?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A team that is self-organizing, cross-functional and can manage itself with little external  influence."
    }, {
      "option" : "B",
      "text" : "A team that is profit-oriented and focused solely on meeting cost and schedule constraints."
    }, {
      "option" : "C",
      "text" : "A team that relies on external management to give it direction."
    }, {
      "option" : "D",
      "text" : " A team that is capable of exceeding sustainable development velocities in 'power' iterations to meet backlog goals."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Empowered teams - ones that are  self-organizing  and  know  how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Juan is listening to an agile project management brief at the annual agile capstone conference. The speaker's topic is empowered teams. What does an empowered team mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A technique used in extreme programming to provide criticism of coding syntax."
    }, {
      "option" : "B",
      "text" : "A technique that facilitates constructive criticism to improve product quality and value."
    }, {
      "option" : "C",
      "text" : "A technique used in paired programming to provide criticism of coding syntax."
    }, {
      "option" : "D",
      "text" : "A technique that facilitates ever increasing amounts of spectral magnitude."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built    into the agile process.  In the classic definition, feedback  is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,  demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of 'feedback technique?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adaptability"
    }, {
      "option" : "B",
      "text" : "Leading Change"
    }, {
      "option" : "C",
      "text" : "Openness"
    }, {
      "option" : "D",
      "text" : "Commandeering"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is NOT a community value per the PMI agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Speculating"
    }, {
      "option" : "B",
      "text" : "Closing"
    }, {
      "option" : "C",
      "text" : "Adapting"
    }, {
      "option" : "D",
      "text" : "Executing"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The agile and traditional project management methods share closing as a phase name. Closing occurs as the last   phase   in   both   methods. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What phase do both Highsmith's agile project management and traditional project management share?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Envisioning"
    }, {
      "option" : "B",
      "text" : "Closing"
    }, {
      "option" : "C",
      "text" : "Adapting"
    }, {
      "option" : "D",
      "text" : "Exploring"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Jim Highsmith's agile project management model consists of the following sequential five phases: Envisioning, speculating, exploring, adapting, and closing. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the first phase of Jim Highsmith's agile project management model."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Completing all outstanding project work, like recording lessons  learned  and   performing other tasks with the product release"
    }, {
      "option" : "B",
      "text" : "Making adjustments to the feature breakdown structure specification"
    }, {
      "option" : "C",
      "text" : "Adapting product features to customer feedback"
    }, {
      "option" : "D",
      "text" : "Adapting project plans for the next iteration"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In the closing phase, the agile team completes all remaining project work. In a software project, remaining work can be such tasks as user training documentation and installation manuals. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jerry has just entered Highsmith's agile project management closing phase. What are he and his team focusing on?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Adjustments to the cost sheet"
    }, {
      "option" : "B",
      "text" : "Adjustments to any team dynamics, like handling problems raised by team members"
    }, {
      "option" : "C",
      "text" : "Adjustments   to   the  feature breakdown structure specification"
    }, {
      "option" : "D",
      "text" : "Adjustments  to  software licenses"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In the adapting phase, the agile team leader may make adjustments to the team makeup, like problems raised by team members, if any team  dynamic problems arise. [Agile Project Management:     Creating    Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "As project leader of an agile effort, in Highsmith's agile project management adapting phase you are expected to make adjustments. What are some of the types of adjustments that a project leader may perform in  the adapting phase?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Excited"
    }, {
      "option" : "B",
      "text" : "Alert"
    }, {
      "option" : "C",
      "text" : "Tuned"
    }, {
      "option" : "D",
      "text" : "Active"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing  to  confirm  and   review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "While Gerald is discussing to Lisa his take on the most prominent risks the project is facing, Lisa uses encouraging body language. What type of listening technique is Lisa using?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "An agile project relies on the monitoring and controlling of stakeholders."
    }, {
      "option" : "B",
      "text" : "An agile project relies on active participation from its stakeholders."
    }, {
      "option" : "C",
      "text" : "An agile project relies on the absence of participation of stakeholders."
    }, {
      "option" : "D",
      "text" : "An agile project relies on the intermittent participation of stakeholders."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering     a     strong     collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ryan as project leader, has been discussing the importance of 'stakeholder management' with his team. Why is stakeholder management so important?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A maturing process where future innovation is taken into consideration."
    }, {
      "option" : "B",
      "text" : "A dynamic process where past information influences the future behavior of the same process."
    }, {
      "option" : "C",
      "text" : "An evolving process where past information is disregarded."
    }, {
      "option" : "D",
      "text" : "A  static process  where future information stagnates  the previous behavior of the same process."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences  the  behavior  of  the  same process in the future. Agile feedback techniques include prototyping, simulation, demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the  best definition of 'feedback?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project retrograde"
    }, {
      "option" : "B",
      "text" : "Project vision and scope"
    }, {
      "option" : "C",
      "text" : "Investment performance and risk"
    }, {
      "option" : "D",
      "text" : "Follow-on business"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "When governing agile projects, executives are most interested in investment performance and risk. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 2]"
    },
    "question" : "According to Highsmith, in governing agile projects, executives  are  most  interested  in  which  of   the following project details?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project schedule"
    }, {
      "option" : "B",
      "text" : "Feature breakdown structure"
    }, {
      "option" : "C",
      "text" : "Estimated iteration and release plans"
    }, {
      "option" : "D",
      "text" : "Project vision"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The  focus  in  the  envisioning phase is on project vision, scope (and requirements), project schedule, and assembling a project team. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In Highsmith's agile project management  speculation phase you develop which of the following?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Project requirements"
    }, {
      "option" : "B",
      "text" : "Feature  breakdown and a rough project plan"
    }, {
      "option" : "C",
      "text" : "Project  schedule  and constraints"
    }, {
      "option" : "D",
      "text" : "Project vision and scope"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The focus in the speculation phase is on estimating iteration and release plans, defining feature breakdown, developing a rough project plan, considering project risk and risk mitigation strategies, and estimating project costs. [Agile Project Management:     Creating    Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Tom  is  currently executing the speculation phase of Highsmith's agile project management model. In  addition to estimating iteration and release plans, what else will Tom be developing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Providing minimal structure."
    }, {
      "option" : "B",
      "text" : "Providing minimal leadership."
    }, {
      "option" : "C",
      "text" : "Providing mentoring."
    }, {
      "option" : "D",
      "text" : "Providing a platform to focus on personal deficiencies."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring  and  coaching;  where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In agile and other project management styles, team motivation is a critical factor for success. What is one method to improve team motivation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Problem-mitigation techniques"
    }, {
      "option" : "B",
      "text" : "Problem-prioritization techniques"
    }, {
      "option" : "C",
      "text" : "Problem-first techniques"
    }, {
      "option" : "D",
      "text" : "Problem-solving techniques"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made     in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem- solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is an essential knowledge and skill area of the agile team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Providing product insight."
    }, {
      "option" : "B",
      "text" : "Providing support."
    }, {
      "option" : "C",
      "text" : "User story authoring."
    }, {
      "option" : "D",
      "text" : "Burndown charting."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Servant leadership has its roots with an essay written in 1970 by Robert K Greenleaf. Greenleaf defined servant leaders as humble stewards devoted to their company and work to serve their peers, teams, and  customers. In a self-organizing team, a servant leader, as Greenleaf defined it, is ideal as the team leader is an enabler, listening to the agile team's needs, removing obstacles, and providing tools or other support to promote high productivity. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which  of  the following duties  is expected of a servant leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Push delivery"
    }, {
      "option" : "B",
      "text" : "Incremental delivery"
    }, {
      "option" : "C",
      "text" : "Pull delivery"
    }, {
      "option" : "D",
      "text" : "Lead time delivery"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two  to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What type of delivery style ensures that a customer or product owner has the chance to review a working product that is improved in intervals and ready for feedback frequently?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Push for a remote  working environment"
    }, {
      "option" : "B",
      "text" : "Push for more overtime"
    }, {
      "option" : "C",
      "text" : "Push for moving  the daily scrum to a weekly scrum"
    }, {
      "option" : "D",
      "text" : "Push for collocating the team"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence   of   being   collocated:   team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Henrietta is managing an agile effort and her team, although on  the company campus, is separated over several offices. What might Henrietta strive to do to improve communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Constraints"
    }, {
      "option" : "B",
      "text" : "Schedule"
    }, {
      "option" : "C",
      "text" : "Value"
    }, {
      "option" : "D",
      "text" : "Quality"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The traditional iron triangle includes scope, schedule, and cost as its parameters Value, quality, and constraints are parameters of the agile triangle. [Agile Project Management: Creating  Innovative  Products  Ð   2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "The traditional iron triangle includes which of the following parameters?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "quality and value"
    }, {
      "option" : "B",
      "text" : "change and planning"
    }, {
      "option" : "C",
      "text" : "flexibility and stability"
    }, {
      "option" : "D",
      "text" : "constraints and value"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Agility is the ability to balance flexibility and stability. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 2]"
    },
    "question" : "According to Highsmith, agility is the ability to balance"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Cultural norms and social customs"
    }, {
      "option" : "B",
      "text" : "Quality differences"
    }, {
      "option" : "C",
      "text" : "Risk-based spike tasks"
    }, {
      "option" : "D",
      "text" : "Product burndown charts"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't    always    feasible    in     today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Gerald is working on a multi- national agile project. What is one thing Gerald should be sensitive of in a multi-national effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Feature  driven  development (FDD)"
    }, {
      "option" : "B",
      "text" : "Quality  driven  development (QDD)"
    }, {
      "option" : "C",
      "text" : "Product  driven  development (PDD)"
    }, {
      "option" : "D",
      "text" : "Data driven  development (DDD)"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Common   frameworks   or methodologies used within agile include: scrum, extreme programming (XP), lean software development, crystal, feature driven development (FDD), dynamic systems development method (DSDM), agile unified process (AUP). [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select  a common  agile framework/methodology."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Facilitation method"
    }, {
      "option" : "B",
      "text" : "Waste reduction method"
    }, {
      "option" : "C",
      "text" : "Yokoten method"
    }, {
      "option" : "D",
      "text" : "Quality stream method"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "As a project leader or scrum master, effective facilitation methods are critical for building a high- performance and motivated team. Facilitation  of  meetings,  discussions, demonstrations, etc., is a constant on an agile project. Some general facilitation methods include: using a small number of people for brainstorming events; hosting  events in a non-threatening/comfortable environment; having an agenda that is shared with the group ahead of time; using open-ended questions instead of closed-ended questions; including a diverse representation to gain a broader perspective of the topic.  [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Andy always makes sure he invites a diverse audience when he holds Kaizen events. Having a diverse audience is generally considered a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Agile-based  decomposition and prioritization."
    }, {
      "option" : "B",
      "text" : "Risk-based decomposition and prioritization"
    }, {
      "option" : "C",
      "text" : "Quality-based  decomposition and prioritization."
    }, {
      "option" : "D",
      "text" : "Value-based  decomposition and prioritization."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user   stories   into   more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "When an agile team decomposes user stories into tasks and prioritizes them based on value what is the process called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk-based decomposition and prioritization"
    }, {
      "option" : "B",
      "text" : "Quality-based  decomposition and prioritization."
    }, {
      "option" : "C",
      "text" : "Agile-based  decomposition and prioritization."
    }, {
      "option" : "D",
      "text" : "Risk-based decomposition and prioritization."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product     backlog     initially    during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving   Enterprise   Agility.   Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "When an agile team decomposes user stories into tasks and prioritizes them based on risk what is the process called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Quinn is considering multiple- developer involvement when he should be considering single- developer involvement only."
    }, {
      "option" : "B",
      "text" : "Quinn is forgetting to also consider coding obstacles in his estimate."
    }, {
      "option" : "C",
      "text" : "Quinn is forgetting to consider the positive impact that reflection will have on the team's productivity."
    }, {
      "option" : "D",
      "text" : "Quinn is considering non- working days, delays, and multiple-developer involvement, which should be excluded when estimating work effort using ideal days."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Instead of using story points, agile teams may estimate the relative sizes of user stories using ideal days. Ideal days represents the amount of days - uninterrupted by meetings, personal life, non-working days, or  any other delays, obstacles or distractions - that it would take a  single person to build, test, and release the user story, relative to other user stories in the backlog. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Quinn is estimating the amount of days it will take him to develop a user story. In his estimate he is considering holidays, nonworking days, possibilities of delays, and the possibility that other developers on the team may help with the user story. If Quinn is using ideal days to estimate the relative work effort of the user story, what is he doing incorrectly?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ralph West"
    }, {
      "option" : "B",
      "text" : "End user"
    }, {
      "option" : "C",
      "text" : "Oscar Gill"
    }, {
      "option" : "D",
      "text" : "Veronica Poolie"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A persona is a notional user of the system under development. Being much more detailed than actors in use case modeling where generic user names are assigned (e.g., end user), personas try to elaborate on users with detailed descriptions to  provide context to the developers. Some personas have such notional details as name, address, age, income, likes and dislikes, and other specific details. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "In agile modeling, what is a poor example of a name given to a persona?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Success criteria"
    }, {
      "option" : "B",
      "text" : "Risk-to-value matrix"
    }, {
      "option" : "C",
      "text" : "Planned value"
    }, {
      "option" : "D",
      "text" : "Rate of return"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come to a consensus. Three key elements should be included in a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale of a project. Mission is the 'what' of the project and describes what the team will accomplish to reach the     vision.     Success     criteria   are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a key element of a project charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A visual representation of project-related data to illustrate project status."
    }, {
      "option" : "B",
      "text" : "A schema for organizing information into related datum."
    }, {
      "option" : "C",
      "text" : "A highly detailed section of the agile project management waterfall plan."
    }, {
      "option" : "D",
      "text" : "Raw data organized into information to show data access and modification dates."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "An information radiator is a visual representation of project status data. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select the response that defines an information radiator."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Helps  facilitate  iteration development."
    }, {
      "option" : "B",
      "text" : "Helps facilitate daily stand-up meetings."
    }, {
      "option" : "C",
      "text" : "Helps facilitate the assignment of rough time frames"
    }, {
      "option" : "D",
      "text" : "Helps facilitate  reflection meetings."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The product roadmap -  owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates).       [The       Art       of     Agile Development. James Shore.] [Agile analysis and design]"
    },
    "question" : "Christy is confused about the purpose of a product roadmap. She asks Thomas, her project manager,   to identify a benefit of a product roadmap to help her understand a product roadmaps purpose. Select the benefit of a product roadmap."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Mime"
    }, {
      "option" : "B",
      "text" : "Gesture"
    }, {
      "option" : "C",
      "text" : "Active"
    }, {
      "option" : "D",
      "text" : "Reactive"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4)  Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which communication technique values silence just as much  as speaking to reduce miscommunication and misunderstanding?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk-based spike tasks."
    }, {
      "option" : "B",
      "text" : "Risk-based set tasks."
    }, {
      "option" : "C",
      "text" : "Risk-based bump tasks."
    }, {
      "option" : "D",
      "text" : "Risk-based slam tasks."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Risked-based spike is a risk management technique and is often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need to understand how  migrating from Windows 7 to Windows 8     may impact the look and feel of the interface. Risked-based  spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Bob is reviewing the upcoming user stories for the next iteration. He notices that there will be a few tasks with high risk. What is a risk management technique Bob and his agile team can use to reduce risk?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A list of all product features to be developed in a release. "
    }, {
      "option" : "B",
      "text" : "A list of the product features to be developed in an iteration. "
    }, {
      "option" : "C",
      "text" : "A  list  of  possible  product features  to  be  developed in  an iteration."
    }, {
      "option" : "D",
      "text" : "A list of product features."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The iteration backlog is a list of product features or work items to be completed in an iteration. It is  typically fixed for the iteration unless  it is overcome by important customer requirements. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "What is an iteration backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Realistic"
    }, {
      "option" : "B",
      "text" : "Ready"
    }, {
      "option" : "C",
      "text" : "Rule-based"
    }, {
      "option" : "D",
      "text" : "Relevant"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The acronym SMART (specific, measurable, achievable, relevant, and timeboxed) helps the agile practitioner remember the characteristics of a well-defined task.  S Ð Specific tasks are ones that clearly contribute to the development of a user story. It should not be vague. M Ð Measurable tasks are ones that the team and customer can verify. A - Achievable tasks are ones that developers may realistically  implement    and    understand.    R     - Relevant tasks are ones that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "Jules is describing the SMART acronym used for task analysis in an agile seminar. What does the R stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Reducing the number of features released and increasing the depth, or complexity, of features."
    }, {
      "option" : "B",
      "text" : "Reducing the number of features released and reducing the depth, or complexity, of features."
    }, {
      "option" : "C",
      "text" : "Increasing the number of features released and increasing the depth, or complexity, of features."
    }, {
      "option" : "D",
      "text" : "Reducing the number of features released and increasing the depth, or complexity, of features."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "When a product owner is trying to advance a release date, he or she may reduce the number of features released and reduce the depth or scope of the features to be released. [Agile Estimating and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "If a product owner must expedite the release of a product, what two options are available to him or her to advance the release date?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Refactor testing"
    }, {
      "option" : "B",
      "text" : "Exploratory testing"
    }, {
      "option" : "C",
      "text" : "Interface testing"
    }, {
      "option" : "D",
      "text" : "Unit testing"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Regular exploratory testing is encouraged to improve  product quality. Typically, exploratory testing is performed on completed product software to test the system design for any bugs and to identify any new features that may add value to the customer. Exploratory testing should cover what a developer is unable to anticipate through the course  of normal unit testing. A project charter  is often used as a general overview of the product that exploratory testers use for testing guidance. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "What type of testing is encouraged throughout an agile project on completed software to test system design and potentially identify new features that may add value to the product?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Write product code and apply the test"
    }, {
      "option" : "B",
      "text" : "Refactor the product code"
    }, {
      "option" : "C",
      "text" : "Verify and validate  that  the test fails"
    }, {
      "option" : "D",
      "text" : "Write test code that will fail"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and apply the test, 4) Refactor the product code. An example may be that a user has to enter an age value.  A good test is to make sure the user data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would verify that entering a letter instead of a number would cause the program  to  cause  an  exception  (i.e., v&v the test). The programmer would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product code is successful, the programmer would refactor  the product code to improve its design. Using these four steps iteratively ensures that programmers think about how a software program might fail first and to build product code that is holistically being tested. This helps produce high quality code. [The Art of Agile   Development.   James   Shore.] [Product quality]"
    },
    "question" : "TDD has four basic steps. What is the second step in TDD?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Write test code that will fail"
    }, {
      "option" : "B",
      "text" : "Verify and validate  that  the test fails"
    }, {
      "option" : "C",
      "text" : "Refactor the product code"
    }, {
      "option" : "D",
      "text" : "Write product code and apply the test"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and apply the test, 4) Refactor the product code. An example may be that a user has to enter an age value.  A good test is to make sure the user data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would verify that entering a letter instead of a number would cause the program to cause an exception (i.e., v&v the test). The programmer  would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product code is successful, the programmer would refactor  the product code to improve its design. Using these four steps iteratively ensures that programmers think about how a software program might fail first and to build product code that is holistically being tested. This helps produce high quality code. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "TDD has four basic steps. What is the third step in TDD?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Motivating the team"
    }, {
      "option" : "B",
      "text" : "Mobilizing the team"
    }, {
      "option" : "C",
      "text" : "Guiding the team"
    }, {
      "option" : "D",
      "text" : "Refactoring the team"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored  or  coached  to  improve   in skill and capability, and 3) empowerment; where the team is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jill, as project lead, has been using coaching to help mentor her team to improve its performance. What is Jill doing when she provides coaching?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Task assessment"
    }, {
      "option" : "B",
      "text" : "Reflection"
    }, {
      "option" : "C",
      "text" : "Decomposition"
    }, {
      "option" : "D",
      "text" : "Incremental design"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product     backlog     initially    during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving   Enterprise   Agility.   Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Neve and her agile team are dividing user stories into smaller, manageable tasks. What is this process called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Reflection refers to the process of improving code to make it more efficient."
    }, {
      "option" : "B",
      "text" : "Reflection refers to making a regular habit of reviewing team performance and processes to identify opportunities for improvement."
    }, {
      "option" : "C",
      "text" : "Reflection refers to accessing attributes of a program's metadata."
    }, {
      "option" : "D",
      "text" : "Reflection refers to reflecting product requirements back at the customer through the delivery of working software."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Reflection refers to the agile principle of reviewing work and performance at regular intervals. By doing so an agile team can identify areas of weakness and identify opportunities for improvements. Devoting time to reflection ensures high performance standards. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Planning, monitoring, and adapting]"
    },
    "question" : "One of the twelve agile principles is termed 'reflection.' What does 'reflection' mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "sprint roadmap"
    }, {
      "option" : "B",
      "text" : "Project roadmap"
    }, {
      "option" : "C",
      "text" : "Reflection roadmap"
    }, {
      "option" : "D",
      "text" : "Product roadmap"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection,   and   on-site customer support. And, of course, the sixth principle of Agile is 'The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "From the following, select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Motivating the team"
    }, {
      "option" : "B",
      "text" : "Leading the team"
    }, {
      "option" : "C",
      "text" : "Guiding the team"
    }, {
      "option" : "D",
      "text" : "Reforming the team"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Having a motivated team is essential for any project, regardless of whether it is agile or not. Motivated teams work together better, have  strong productivity, and exceed expectations. Some simple steps to increase motivation are 1) spending quality time together; where team members get to know one another on a personal level to build a sense of community, 2) providing feedback, mentoring and coaching; where team members are congratulated and thanked on jobs well done and also mentored or coached to improve in skill and capability, and 3) empowerment;   where   the   team    is empowered to make many key decisions which, along the way, builds trust and shows that leadership  believes in the capabilities of the team. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Andy, as project leader, has been building a sense of community among his team by focusing, in part, on making sure each team member receives some quality time attention. What  is  Andy  doing  when  he makes sure quality time is being spent?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Returning"
    }, {
      "option" : "B",
      "text" : "Reimaging"
    }, {
      "option" : "C",
      "text" : "Refactoring"
    }, {
      "option" : "D",
      "text" : "Reflection"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "During reflection or retrospectives, an agile team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/ team-assessment events, topics can include: lessons learned from   successes   and   failures;   team standards that worked, failed, or were not properly followed; and other areas of  improvement.  [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the process called when a person performs a self-assessment to understand    how    he    or    she  may improve performance?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "T-shirt estimating"
    }, {
      "option" : "B",
      "text" : "Infinity estimating"
    }, {
      "option" : "C",
      "text" : "Affinity estimating"
    }, {
      "option" : "D",
      "text" : "Relative estimating"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for large product backlogs. Although several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to   large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "Nathan, a new agile practitioner, is at a planning event where the relative development effort of user stories of  alarge product backlog is to be estimated. The planning event is mostly conducted in silence and the team is to assign user stories to various t-shirt sizes (small, medium, large, extra-large). The planning event is efficient and the user stories are estimated quickly. What type of planning event is Nathan most likely attending?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Osmotic communication"
    }, {
      "option" : "B",
      "text" : "Active listening"
    }, {
      "option" : "C",
      "text" : "Chaordic communication"
    }, {
      "option" : "D",
      "text" : "Entropic communication"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Osmotic communication is a concept of communication where information is shared between collocated  team  members unconsciously.       [Agile       Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "When information is shared between collocated team members unconsciously, it is known as?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Meta-tasking"
    }, {
      "option" : "B",
      "text" : "Decomposition"
    }, {
      "option" : "C",
      "text" : "Front end analysis"
    }, {
      "option" : "D",
      "text" : "Refactoring"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed     using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ryan and his agile team are subdividing user stories into manageable tasks to help plan the upcoming sprint. What is this process called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Wanting"
    }, {
      "option" : "B",
      "text" : "Watching"
    }, {
      "option" : "C",
      "text" : "Waiting"
    }, {
      "option" : "D",
      "text" : "Working"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Value stream mapping is a lean manufacturing analysis technique adopted by agile. A value stream map may be used to analyze the flow of information or materials from origin to destination to identify areas of waste. The identified areas of waste are opportunities  for process improvement. Waste can take many forms and can be remembered using the pneumonic device WIDETOM.  W - waiting; I - inventory; D - defects;  E - extra processing; T - transportation; O - overproduction ; M - Motion. A value stream map is typically mapped or charted collaboratively with a team so it may define and view the entire process together, pinpointing areas   of waste within the process. Processes that add value (processing of a part or feature) are generally referred to as 'value-added' and processes that do not (e.g., waiting for a part to arrive) are generally referred to as 'non value- added.' Generally speaking, one wants to reduce, to the largest extent  possible, the non value-added time (i.e., areas of waste). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Value stream analysis]"
    },
    "question" : "When value stream mapping it is important to identify areas of waste that exist in the process. The pneumonic device WIDETOM may be used to remember the different forms of muda (or waste). What does the W in WIDETOM stand for with respect  to waste?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "WIP delivery"
    }, {
      "option" : "B",
      "text" : "Incremental delivery"
    }, {
      "option" : "C",
      "text" : "Release delivery"
    }, {
      "option" : "D",
      "text" : "Iterative delivery"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A   cornerstone   of    Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Hector knows that a delivery concept of agile is defined as 'the frequent delivery of a working product for immediate customer feedback.' Which term is this delivery concept?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Specific service contract   for the initial phase with separate fixed-price contracts for each user story."
    }, {
      "option" : "B",
      "text" : "Specific service contract for the initial phase with separate fixed-schedule contracts for each user story."
    }, {
      "option" : "C",
      "text" : "General service contract for the initial phase with separate fixed-price contracts for each user story."
    }, {
      "option" : "D",
      "text" : "General service contract for the initial phase with separate fixed-schedule contracts for each user story."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith, the nature of the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and  schedule  constraints  are   known but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories;   time-and-material   contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select from the following types of contracts, the one most suited for the agile framework."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Distributed"
    }, {
      "option" : "B",
      "text" : "Isolation"
    }, {
      "option" : "C",
      "text" : "Collocation"
    }, {
      "option" : "D",
      "text" : "Separation"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the ideal team member location in the agile framework?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through strict adherence to the agile project  standards defined at the beginning of a project."
    }, {
      "option" : "B",
      "text" : "Through the use of overtime to meet deadlines earlier than planned."
    }, {
      "option" : "C",
      "text" : "Through demonstrating a working product only at the end of a release."
    }, {
      "option" : "D",
      "text" : "Through listening and responding to customer feedback after each iteration."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Agile project management places strong emphasis on 'continuous improvement.' Continuous improvement processes are built into the agile methodology, from customers providing feedback after each iteration to the team reserving time to reflect on its performance through retrospectives after each iteration. Ongoing unit and integration testing and keeping up with technological/industry developments also play a part in the continuous improvement process. Continuous improvement is also a key principle in the lean methodology, where a focus of removing waste from the value stream is held. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "How  is  continuous  improvement built into the agile framework?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Agile unified process (AUP)"
    }, {
      "option" : "B",
      "text" : "Extreme unified process (EUP)"
    }, {
      "option" : "C",
      "text" : "Simple unified process (SUP)"
    }, {
      "option" : "D",
      "text" : "Adapted  unified process (AdUP)"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Agile Unified Process (AUP) is a simplified version of the Unified Process, or UP (UP itself is a more detailed framework for iterative and incremental software development). AUP simplifies UP for the agile framework. AUP projects use four phases: 1) inception, 2) elaboration, 3) construction, and 4) transition. At the end of each short iteration, the team delivers a working product. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which framework is adapted from the  unified process (UP)  for use in agile?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Facilitation method"
    }, {
      "option" : "B",
      "text" : "Crystal method"
    }, {
      "option" : "C",
      "text" : "Passive listening method"
    }, {
      "option" : "D",
      "text" : "Dynamic product development method (DPDM)"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "As a project leader or scrum master, effective facilitation methods are critical for building a high- performance and motivated team. Facilitation of meetings, discussions, demonstrations, etc., is a constant on an agile project. Some general facilitation methods include: using a small number of people for brainstorming events; hosting  events in a non-threatening/comfortable environment; having an agenda that is shared with the group ahead of time; using open-ended questions instead of closed-ended questions; including a diverse representation to gain a broader    perspective    of    the  topic. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Sarah is a scrum master for an agile project.  She practices using open-ended questions with her team to promote idea generation. The use of open ended questions is a..."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Aspirational standards are not mandatory but good practice and encouraged. "
    }, {
      "option" : "B",
      "text" : "Aspirational standards are backed by federal law and mandatory backed by state and local law. "
    }, {
      "option" : "C",
      "text" : "Aspirational    standards   are enforced by state law and mandatory standards are backed by federal law."
    }, {
      "option" : "D",
      "text" : "Both are compulsory standards and backed by law."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Aspirational standards are standards that every professional should strive to uphold, but are not compulsory. Mandatory standards are required and often backed by law. [PMI Code of Ethics and Professional Conduct. Project Management Institute.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the difference between aspirational and mandatory standards, as referred to in the PMI Code?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Using overtime to incentivize the team to delivery early"
    }, {
      "option" : "B",
      "text" : "Building in pressure"
    }, {
      "option" : "C",
      "text" : "Empowering the customer"
    }, {
      "option" : "D",
      "text" : "Having the right team members (i.e., a cross-functional team)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Building a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is self-organized and self-disciplined, and is collocated. Several management techniques can be used to build or foster a high-performance team environment, some techniques include: removing obstacles that slow down a team's    performance,    having    high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice she should follow to build a high-performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Kanban board"
    }, {
      "option" : "B",
      "text" : "Business case"
    }, {
      "option" : "C",
      "text" : "Product backlog"
    }, {
      "option" : "D",
      "text" : "Scope document"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Business case development is an important initial step in agile project management. The business case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a   project will deliver value to a customer. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What agile artifact  outlines  the project's vision?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Intrinsic  knowledge of  the product domain and industry"
    }, {
      "option" : "B",
      "text" : "Knowledge about what the threshold features are about a product."
    }, {
      "option" : "C",
      "text" : "Extrinsic knowledge of the product domain and industry"
    }, {
      "option" : "D",
      "text" : "Knowledge about what features will or will not be developed in a project"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Cohn's definition of product knowledge is knowledge about what features will or will not be developed in a project. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is  Cohn's  definition  of product knowledge?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sprint"
    }, {
      "option" : "B",
      "text" : "Scrum"
    }, {
      "option" : "C",
      "text" : "LP"
    }, {
      "option" : "D",
      "text" : "PMI"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Common frameworks or methodologies used within agile include: scrum, extreme programming (XP), lean software development, crystal, feature driven development (FDD), dynamic systems development method (DSDM), agile unified process (AUP). [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a common  agile framework/methodology."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A technical approach that can be used  in  the agile framework that is a family of methodologies for flexible and lightweight software development."
    }, {
      "option" : "B",
      "text" : "A technical approach that can be used in the agile framework that focuses on simple design and constant testing."
    }, {
      "option" : "C",
      "text" : "A technical approach that can be used in the agile framework that focuses on the elimination of waste and amplification of learning."
    }, {
      "option" : "D",
      "text" : "A technical approach that can be used in the agile framework that focuses on paired programming and integrated testing."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Crystal is a family of methodologies for a flexible and lightweight approach to software development.       The       family      of methodologies is color coded to differentiate its members (e.g., clear, yellow, orange, red.) The color chosen depends on the level of effort required. On one end of the spectrum is crystal clear, which is for smaller efforts, while crystal red is for larger efforts. Regardless of color, the crystal framework is cyclical and has three fundamental processes: chartering, delivery cycles, and wrap-up. Crystal chartering includes building the team, doing an Exploratory 360, defining standards of practice for the team, and building the project plan. In the delivery cycle, the crystal team iteratively  develops,  integrates,  tests, and releases the product in iterations that last from one week to two months. Like other agile frameworks, crystal includes collaborative events, like stand-up meetings and reflective improvement workshops. In wrap-up the team concludes the project and holds a completion ritual where the team reflects on the entire project. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which of  the following best describes the crystal framework?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Reflection"
    }, {
      "option" : "B",
      "text" : "Refactoring"
    }, {
      "option" : "C",
      "text" : "Returning"
    }, {
      "option" : "D",
      "text" : "Reimaging"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "During reflection or retrospectives,  an  agile  team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/ team-assessment events, topics can include: lessons learned from successes and failures; team standards that worked, failed, or were not properly followed; and other areas of  improvement.  [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is the process called when a team constructively criticizes its performance for the purpose of improving performance going forward?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Static systems development method (SSDM)"
    }, {
      "option" : "B",
      "text" : "Extreme systems development method (XSDM)"
    }, {
      "option" : "C",
      "text" : "Dynamic  systems development method (DSDM)"
    }, {
      "option" : "D",
      "text" : "Dynamic product development method (DPDM)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Dynamic Systems Development  Method  (DSDM)  is   a structured framework that emphasizes a business perspective with a heavy focus on proving the 'fitness' or marketability. Similar to scrum, DSDM has three major phases: initiating project activities, project life cycle activities, and closing project activities (i.e., similar to scrum's pre- game, game, postgame). The project life cycle has five stages: feasibility study, business study, functional  model iteration, design and build iteration, and implementation. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which agile framework emphasizes a heavy focus on proving the 'fitness' or marketability of a product (i.e., has a strong business emphasis)?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ultra programming (UP)"
    }, {
      "option" : "B",
      "text" : "Paired programming (PP)"
    }, {
      "option" : "C",
      "text" : "Peer perfect programming (3P)"
    }, {
      "option" : "D",
      "text" : "Extreme programming (XP)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Extreme programming (XP) is a programmer-centric agile framework that focuses on small, ongoing releases. XP highlights several principles: pair programming, sustainable pace, ongoing automated testing, effective communication, simplicity, feedback, courage, collective ownership, continuous integration, energized work, shared workspaces, on-site customer representation, and the use of  metaphor to describe concepts. [Agile Software Development: The Cooperative   Game   Ð   2nd   Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which software development framework stresses the use of 'metaphor' to describe concepts?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Acceptance test  driven development (ATDD)"
    }, {
      "option" : "B",
      "text" : "Test driven  development (TDD)"
    }, {
      "option" : "C",
      "text" : "Feature  driven  development (FDD)"
    }, {
      "option" : "D",
      "text" : "Defect driven  development (3D)"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Feature driven development (FDD) uses a prescriptive model  where the software development process is planned, managed, and tracked from the perspective of individual software features. FDD uses short iterations of two weeks or less to develop a set amount of features. The five step FDD process is: 1. Develop overall model; 2. Create the features list; 3. Plan by feature; 4. Design by feature; 5 Build by feature. [Agile Software          Development:         The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which software development framework used in agile uses a prescriptive model where the development process is planned, managed, and tracked by feature?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Know that conflict is inevitable and approach conflict with an open mind knowing that it can manage conflict itself."
    }, {
      "option" : "B",
      "text" : "Take an anonymous vote among team members to identify which team members should leave the project."
    }, {
      "option" : "C",
      "text" : "Avoid talking about or dealing with conflict, knowing that  that all problems will eventually pass."
    }, {
      "option" : "D",
      "text" : "Know that all conflict is completely self-imposed and the best course of action is to ignore conflict until it goes away."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "High-performance teams differ from low-performance teams with how they deal with conflict. Conflict is inevitable even for the most experienced agile team. The difference is that high-performance teams approach conflict with an open mind and as self-organizing often navigate and resolve conflict organically. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "How do high-performance teams approach conflict?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Release planner"
    }, {
      "option" : "B",
      "text" : "Project leader"
    }, {
      "option" : "C",
      "text" : "Project scheduler"
    }, {
      "option" : "D",
      "text" : "Product owner"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this  misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members       to       make       decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating  effectively; and,  be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'adapts the leadership style to the working environment?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Release  planning, daily planning, daily stand-up planning"
    }, {
      "option" : "B",
      "text" : " Release planning, rolling waveform planning, daily planning"
    }, {
      "option" : "C",
      "text" : "Release  planning, iteration planning, daily planning"
    }, {
      "option" : "D",
      "text" : "Sprint planning, iteration planning, iteration planning"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The three main levels of agile planning are release planning, iteration planning, and daily planning. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Select the response  that  lists the three main levels of agile planning."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Aggregate the task with other tasks that are equally as difficult"
    }, {
      "option" : "B",
      "text" : "Take a corrective measure as soon as possible and notify the team about the realization"
    }, {
      "option" : "C",
      "text" : "Remove the user story from the current iteration and place it  in the product backlog"
    }, {
      "option" : "D",
      "text" : "Simply update the timebox to what he thinks is appropriate and continue to work without notifying the team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "When a developer notices that a user  story/task  is  taking  longer  than the timebox indicates, he or she should notify the team and take a corrective measure. Corrective measures include splitting the task into smaller user stories or changing team members. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Reggie realizes that the   timeboxed value for the current user story he is developing is too short a duration. What should Reggie do?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Defect reduction"
    }, {
      "option" : "B",
      "text" : "Test-driven development"
    }, {
      "option" : "C",
      "text" : "Paying continuous attention to technical excellence and good design."
    }, {
      "option" : "D",
      "text" : "Removing waste"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Agile Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements,        even        late        in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software  is  the  primary  measure   of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) SimplicityÑthe art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.]    [Knowledge    and  Skills: Level 1]"
    },
    "question" : "Which of the following is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Conflict resolution"
    }, {
      "option" : "B",
      "text" : "Requirement resolution"
    }, {
      "option" : "C",
      "text" : "Negotiation resolution"
    }, {
      "option" : "D",
      "text" : "Specification resolution"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Problem-prioritization tools"
    }, {
      "option" : "B",
      "text" : "Problem-solving tools"
    }, {
      "option" : "C",
      "text" : "Problem-mitigation tools"
    }, {
      "option" : "D",
      "text" : "Problem-first tools"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made     in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem- solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is an essential knowledge and skill area of the agile team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Responding to change"
    }, {
      "option" : "B",
      "text" : "Customer collaboration"
    }, {
      "option" : "C",
      "text" : "Following a plan"
    }, {
      "option" : "D",
      "text" : "Individuals and interactions"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The Agile Manifesto defines four values. The four values list primary values and secondary values, with primary values superseding secondary values. The values are 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Lisa is describing the four Agile Manifesto values to her co-workers. Which response lists a secondary value?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Individuals and interactions over processes and tools, and customer collaboration over contract negotiation "
    }, {
      "option" : "B",
      "text" : "Working software over comprehensive documentation, and individuals and interactions over processes and tools "
    }, {
      "option" : "C",
      "text" : "Individuals and interactions over processes and tools, and responding to change over following a plan "
    }, {
      "option" : "D",
      "text" : "Responding to change over following a plan, and individuals and interactions over processes and tools"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four values are: 1) individuals and interactions over processes and tools, 2) working software over comprehensive documentation, 3) customer collaboration over  contract negotiation, and 4) responding to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change, 3) delivering working  software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved   in   development,   6)  using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "Two of the Agile Manifesto's four core values cover communication values. Select these values from the list."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Results from the customer evaluation help the  team prioritize which user stories should be tested and integrated during the next iteration."
    }, {
      "option" : "B",
      "text" : "Customer evaluation is used during release planning which holds the work breakdown structure of the iteration plan"
    }, {
      "option" : "C",
      "text" : "Customer evaluation is not incorporated into iteration planning. The agile team plans  for the iteration independently of customer evaluation."
    }, {
      "option" : "D",
      "text" : "Customer feedback helps the agile team plan for the next iteration."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Once completing an iteration, the team and customer evaluate the most    recently    developed     product features. The customer's evaluation provides the agile team with key insights and objectives for the next iteration. Iteration planning is highly dependent on customer evaluation to ensure quality is built into the product. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "How  is  iterative customer evaluation  of  a product incorporated into iteration planning?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Openness"
    }, {
      "option" : "B",
      "text" : "Introspective"
    }, {
      "option" : "C",
      "text" : "Weary"
    }, {
      "option" : "D",
      "text" : "Reticent"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage,     Openness,     Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Reflection listening"
    }, {
      "option" : "B",
      "text" : "Retrospective listening"
    }, {
      "option" : "C",
      "text" : "Passive listening"
    }, {
      "option" : "D",
      "text" : "Active listening"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Reflective listening"
    }, {
      "option" : "B",
      "text" : "Passive listening"
    }, {
      "option" : "C",
      "text" : "Reflection listening"
    }, {
      "option" : "D",
      "text" : "Retrospective listening"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile   team   is   properly   versed     in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Brainstorm facilitation management"
    }, {
      "option" : "B",
      "text" : "Feedback management"
    }, {
      "option" : "C",
      "text" : "Retrospective management"
    }, {
      "option" : "D",
      "text" : "Communications management"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting,  progress  measurement, and forecasting, and 4) Managing Stakeholders:   Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not     the     case.     [Agile     Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select the agile knowledge and skill area that concerns itself with effective communication."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Impact statement"
    }, {
      "option" : "B",
      "text" : "Return on investment"
    }, {
      "option" : "C",
      "text" : "Investment cost"
    }, {
      "option" : "D",
      "text" : "Vision"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come to a consensus. Three key elements should be included in a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale  of  a  project.  Mission  is the 'what' of the project and describes what the team will accomplish to reach the vision. Success criteria are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a key element of a project charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Stakeholder analysis"
    }, {
      "option" : "B",
      "text" : "Risk analysis"
    }, {
      "option" : "C",
      "text" : "Cost-to-value matrix"
    }, {
      "option" : "D",
      "text" : "Mission"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come to a consensus. Three key elements should be included in a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale of a project. Mission is the 'what' of the project and describes what the team will accomplish to reach the vision. Success criteria are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a key element of a project charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk-based spike tasks"
    }, {
      "option" : "B",
      "text" : "Time zones"
    }, {
      "option" : "C",
      "text" : "Risk burndown chart"
    }, {
      "option" : "D",
      "text" : "Quality differences"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider    language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Gerald is working on a multi- national agile project. What is one thing Gerald should be sensitive of in a multi-national effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product roadmap"
    }, {
      "option" : "B",
      "text" : "Business case"
    }, {
      "option" : "C",
      "text" : "Risk burndown chart"
    }, {
      "option" : "D",
      "text" : "Iteration backlog"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project will deliver value to a customer.      [Lean-Agile      Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What  agile artifact  outlines  the project's goals?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning games"
    }, {
      "option" : "B",
      "text" : "Affinity poker"
    }, {
      "option" : "C",
      "text" : "Risk games"
    }, {
      "option" : "D",
      "text" : "Planning poker"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their  card  concurrently,  5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What  agile estimation  technique originates  from  the  wideband Delphi estimation technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk impact"
    }, {
      "option" : "B",
      "text" : "Risk severity"
    }, {
      "option" : "C",
      "text" : "Risk mitigation factors"
    }, {
      "option" : "D",
      "text" : "Risk likelihood"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A risk burndown chart is a risk management technique used to track project risk over time. It allows stakeholders to quickly review project risk management performance (e.g., increasing, decreasing, and by how much) over time. Severity (a    product of impact and probability) is charted along the vertical axis with time on the horizontal axis. Impact typically takes a value from 0 to 5 in increasing order of risk and probability/likelihood typically takes a value from 0 to 5 in increasing order of probability. In this example, the worst severity a risk could have is 25 (5 x 5 = 25) and the least harmful severity a risk could  have is 0. The agile team and customer/product owner identifies its risks and assigns severity values in a risk register and tracks those values over time. Ideally, risk severity will decrease over time. [The Art of Agile Development.   James   Shore.]   [Risk management]"
    },
    "question" : "What is typically plotted in a risk burndown graph?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk management"
    }, {
      "option" : "B",
      "text" : "Communications management"
    }, {
      "option" : "C",
      "text" : "Operations research"
    }, {
      "option" : "D",
      "text" : "Timeboxing management"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications management  and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects  stakeholders  2)   Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders:  Managing communications to satisfy the requirements and resolve issues with project stakeholders. From an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following agile knowledge and skill areas involves the management  of  effective communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk-based spike tasks."
    }, {
      "option" : "B",
      "text" : "Risk-mitigation  reflection tasks."
    }, {
      "option" : "C",
      "text" : "Risk-seeking tasks."
    }, {
      "option" : "D",
      "text" : "Risk-averse tasks."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Risked-based spike is a risk management technique and is often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need to understand how  migrating from Windows 7 to Windows 8 may impact the look and feel of the interface. Risked-based  spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "John and his agile team are planning an iteration with several tasks having high risk. To manage the risk, what type of task can John and his team build into the iteration plan?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1000%"
    }, {
      "option" : "B",
      "text" : "700%"
    }, {
      "option" : "C",
      "text" : "900%"
    }, {
      "option" : "D",
      "text" : "800%"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Return on Investment (ROI): A metric used to evaluate the efficiency of an investment or to compare efficiency among a number of investments.   To   calculate   ROI,  the return of an investment (i.e., the gain minus the cost) is divided by the cost of the investment. The result is usually expressed as a percentage and sometimes a ratio. The product owner is often said to be responsible for the ROI. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the return on investment of the following: Gain: $10,000;  Cost: $1,000."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Language"
    }, {
      "option" : "B",
      "text" : "Quality differences"
    }, {
      "option" : "C",
      "text" : "Kanban board"
    }, {
      "option" : "D",
      "text" : "Risk-based spike tasks"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational       environment.       For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Gerald is working on a multi- national agile project. What is one thing Gerald should be sensitive of in a multi-national effort?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk-to-cost matrix"
    }, {
      "option" : "B",
      "text" : "Risk-to-mitigate matrix"
    }, {
      "option" : "C",
      "text" : "Risk-to-reward matrix"
    }, {
      "option" : "D",
      "text" : "Risk-to-value matrix"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "An agile team must always face    the    prioritization    of  product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or user stories/features in terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into    'Must    have,'    'Should  have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value  matrix  can  be  used.   A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy     Beaver,     James     R.    Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a method that is commonly used to help prioritize user stories."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "To learn more  about release planning. "
    }, {
      "option" : "B",
      "text" : "To learn more  about certain tasks. "
    }, {
      "option" : "C",
      "text" : "To learn more about uncertain tasks. "
    }, {
      "option" : "D",
      "text" : "To learn more about iteration delays."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Risked-based spike is a risk management technique and is often thought of as a task. A risked-based spike is a task used to gain knowledge in an area of uncertainty to reduce risk. For example, a development team may need to understand how  migrating from Windows 7 to Windows 8 may impact the look and feel of the interface. Risked-based  spikes typically are included in iteration planning directly before a the task that holds the uncertainty. [The Art of Agile   Development.   James   Shore.] [Risk management]"
    },
    "question" : "What is one reason to perform a risk-based spike task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "User testing"
    }, {
      "option" : "B",
      "text" : "Role testing"
    }, {
      "option" : "C",
      "text" : "Ad hoc testing"
    }, {
      "option" : "D",
      "text" : "Exploratory testing"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Regular exploratory testing is encouraged to improve  product quality. Typically, exploratory testing is performed on completed product software to test the system design for any bugs and to identify any new features that may add value to the customer. Exploratory testing should cover what a developer is unable to anticipate through the course  of normal unit testing. A project charter  is often used as a general overview of the product that exploratory testers use for testing guidance. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Jill has been tasked with exploring a release of the software product for any bugs or flaws in the  system design. What type of testing is Jill performing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sunk cost fallacy"
    }, {
      "option" : "B",
      "text" : "Root reflection"
    }, {
      "option" : "C",
      "text" : "2Y"
    }, {
      "option" : "D",
      "text" : "Inspection"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions;  and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Ask it loud"
    }, {
      "option" : "B",
      "text" : "Root reflection"
    }, {
      "option" : "C",
      "text" : "Root inspection"
    }, {
      "option" : "D",
      "text" : "Probe it loud"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Root inspection"
    }, {
      "option" : "B",
      "text" : "Root reflection"
    }, {
      "option" : "C",
      "text" : "Revisit the problem"
    }, {
      "option" : "D",
      "text" : "Probe it loud"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile   team   is   properly   versed     in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "5Y"
    }, {
      "option" : "B",
      "text" : "Root reflection"
    }, {
      "option" : "C",
      "text" : "Root inspection"
    }, {
      "option" : "D",
      "text" : "Probe it loud"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made   in   response   to   problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Select a common agile problem- solving technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Rehearsed team"
    }, {
      "option" : "B",
      "text" : "Revolving team"
    }, {
      "option" : "C",
      "text" : "Rotating team"
    }, {
      "option" : "D",
      "text" : "Empowered team"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Empowered teams - ones   that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which type of team is expected and trusted to make decisions to adapt to changing needs and requirements?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Schedule management"
    }, {
      "option" : "B",
      "text" : "Cooperative management"
    }, {
      "option" : "C",
      "text" : "Social management"
    }, {
      "option" : "D",
      "text" : "Stakeholder management"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders   (i.e.,   facilitating  active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders.  We  never  trade  off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve     our     stakeholders.    Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What topic area within strategic management deals with promoting a work environment where the agile team and stakeholders collaborate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Affinity estimation"
    }, {
      "option" : "C",
      "text" : "Planning game"
    }, {
      "option" : "D",
      "text" : "SMART"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique  for  a  relative  estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the  developers.  Typically  the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is  consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What agile estimation technique is conducted using a deck of cards with non-sequential numbers for quickly estimating the relative work effort of developing user stories in a product backlog?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Tangible"
    }, {
      "option" : "B",
      "text" : "Testable"
    }, {
      "option" : "C",
      "text" : "Torrent"
    }, {
      "option" : "D",
      "text" : "Timeboxed"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In the SMART acronym, the T stands for 'Timeboxed' meaning that a well-defined task can be performed in a specific duration. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken   Schwaber.]  [Planning, monitoring, and adapting] 35. D - In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn,   effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "In the SMART acronym, which is used to guide the creation of well- defined tasks, what does the T stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The heavily controlled conveyance of information to  only key team members. "
    }, {
      "option" : "B",
      "text" : "The tightly controlled flow of information among team  members to maintain clear organizational hierarchies. "
    }, {
      "option" : "C",
      "text" : "The    conveyance    of   data between refactored code modules. "
    }, {
      "option" : "D",
      "text" : "The conveyance of important information among all stakeholders and team members."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn,   effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of 'knowledge sharing?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Schedule performance indicator"
    }, {
      "option" : "B",
      "text" : "Schedule performance index"
    }, {
      "option" : "C",
      "text" : "Specification  performance indicator"
    }, {
      "option" : "D",
      "text" : "Schedule parametric index"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule   Performance   Index  (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does SPI stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Schedule value"
    }, {
      "option" : "B",
      "text" : "Specification value"
    }, {
      "option" : "C",
      "text" : "Specification variance"
    }, {
      "option" : "D",
      "text" : "Schedule variance"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule   Performance   Index  (SPI). [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. What does SV stand for in the EVM technique?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Total scope diagram"
    }, {
      "option" : "B",
      "text" : "Cumulative flow diagram"
    }, {
      "option" : "C",
      "text" : "Done done diagram"
    }, {
      "option" : "D",
      "text" : "Schematic diagram"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Like burnup charts, cumulative flow diagrams are information radiators that can track progress for agile projects. CFDs differ from traditional burnup charts because they convey total scope (not started, started, completed) of the entire backlog. Tracked items can be features, stories, tasks, or use cases. By tracking total scope, CFDs communicate absolute progress and give a proportional sense of project progress (e.g., On Day 14: 15% of features have been  completed; 15% have been started; and, 70% have not been started). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Patrick is reviewing an information radiator that shows the current progress of items in the product backlog. Unlike a traditional burnup chart, the information radiator that Patrick is reviewing shows the items' total scope, including completion details of 'not started,' 'started,' and 'completed.' What type of information radiator  is  Patrick most  likely reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Scope creep"
    }, {
      "option" : "B",
      "text" : "Progressive elaboration"
    }, {
      "option" : "C",
      "text" : "Rolling wave elaboration"
    }, {
      "option" : "D",
      "text" : "Scope bloat"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Rolling wave planning (or rolling look ahead planning) involves planning in waves or phases and is especially useful for large, complex projects. Only the next few iterations are planned in detail and iterations more distant are planned only at a high-level. Progressive elaboration is continuous planning that assumes  that details and requirements will be better refined later and will be incorporated into the planning process at the appropriate time. [Agile Estimating and Planning. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Gina's agile team is beginning a large, complex project estimated to last for three years. Her team has decided to only plan in detail for the next few iterations and keep iterations further removed at only a high-level of detail. Gina's team assumes that customer requirements and other details will change and become more detailed in the future. What project management technique is the basis of this assumption?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Through focusing on quality"
    }, {
      "option" : "B",
      "text" : "Through  focusing  on constraints"
    }, {
      "option" : "C",
      "text" : "Through focusing on value"
    }, {
      "option" : "D",
      "text" : "Through retrospectives"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Effective communication is a cornerstone of agile.  Communication is the act of transferring information among   various  parties. Communications management is a knowledge and skill area of agile that highlights this importance. PMI has several definitions regarding communications     management    and agile builds on top of these to add its own perspective: 1) Communications Planning: Determining the information and communication needs of the projects stakeholders 2) Information Distribution: Making needed information available to project stakeholders in a timely manner, 3) Performance Reporting:  Collecting and distributing performance information. This includes status reporting, progress measurement, and forecasting, and 4) Managing Stakeholders: Managing communications to satisfy the requirements and resolve issues with project   stakeholders.   From   an agile perspective: communication among  the team is built into the process and facilitated through collocation, information radiators, daily stand-up meetings, retrospectives etc.; Although it is hoped that the product owner, customer, and user can be heavily involved with the project and also use these communication techniques, a plan for conveying information to stakeholders may be needed if this is not the case. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following helps an agile team promote simple and effective communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Chaordic"
    }, {
      "option" : "B",
      "text" : "Entropic"
    }, {
      "option" : "C",
      "text" : "Facile"
    }, {
      "option" : "D",
      "text" : "Static"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A complex adaptive system, or CAS, is a system composed of interacting, adaptive agents or components. The term is used in agile to remind practitioners that the development of a product is adaptive  in  that  previous  interactions,  events, decisions influence future behavior. The term chaordic (a made up word blending chaotic and order) is sometimes used when describing CASs. Literature points to three key characteristics of chaordic projects: alignment and cooperation, emergence and self-organization, and learning and adaptation.  [Agile  Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What term is often used to describe complex adaptive systems (CAS)?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Whether or not to demonstrate the product at the end of each iteration."
    }, {
      "option" : "B",
      "text" : "Whether or not to have daily stand-up meetings."
    }, {
      "option" : "C",
      "text" : "Whether or not to consider time zone differences when scheduling meetings."
    }, {
      "option" : "D",
      "text" : " Whether or  not to perform continuous testing and integration."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A high-performance agile team is  one  that  is  ideally  collocated   for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [Agile Software Development:  The  Cooperative Game Ð 2nd   Edition.   Alistair  Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Mark's agile team is geographically dispersed throughout the world. What is one factor the team should consider when conducting its business?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Risk-aversion compliance"
    }, {
      "option" : "B",
      "text" : "Mandatory compliance"
    }, {
      "option" : "C",
      "text" : "Documentation compliance"
    }, {
      "option" : "D",
      "text" : "Regulatory compliance"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Although in agile project management, it is generally practiced to generate minimal documentation to support the project, some specific documents, like those required by regulatory bodies need to be created to comply with local and federal law. [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 3]"
    },
    "question" : "When an    agile team  authors documents to  conform with  local or federal regulations it is known as?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Changing company culture"
    }, {
      "option" : "B",
      "text" : "Changing communication styles from top-down to face-to- face"
    }, {
      "option" : "C",
      "text" : "Changing the mindset from following rigid plans to adapting to change"
    }, {
      "option" : "D",
      "text" : "Changing project status meetings to daily stand-ups"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Changing  company  culture is typically the most difficult when migrating to an agile framework. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 3]"
    },
    "question" : "When a non-agile company migrates to an agile framework what is often the most challenging task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The agile team ignores the organization's code of ethics and conduct."
    }, {
      "option" : "B",
      "text" : "The agile team complies with the organization's code of ethics and conduct."
    }, {
      "option" : "C",
      "text" : "The agile team follows its own code of ethics and conduct."
    }, {
      "option" : "D",
      "text" : "The agile team chooses what to comply with of the organization's code of ethics and conduct."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Compliance with a company's code of ethics and professional  conduct is standard practice in agile. [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Describe the type of organizational compliance an agile team  upholds itself to when hired by an independent organization."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Six-sigma"
    }, {
      "option" : "B",
      "text" : "One-sigma"
    }, {
      "option" : "C",
      "text" : "Three-sigma"
    }, {
      "option" : "D",
      "text" : "Five-sigma"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Control limits - those which  set an objective range to indicate whether a process is controlled or stabilized or defect free (e.g., within three sigmas of the mean) - may be used in an agile project. Generally, a control limit of three-sigma (s) is used on a Shewhart control chart. A sigma refers to one standard deviation. So three sigmas indicates a limit three standard deviations away from the mean in both the positive and negative direction. This applies to normal data, where a normal distribution curve has been obtained. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James   R.   Trott.]   [Knowledge    and Skills: Level 3]"
    },
    "question" : "Ron is setting up control limits using a Shewhart control chart for his agile project. What control limit is typically used on a Shewhart control chart?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "AUP"
    }, {
      "option" : "B",
      "text" : "DSDM"
    }, {
      "option" : "C",
      "text" : "Crystal"
    }, {
      "option" : "D",
      "text" : "XP"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Crystal is a family of methodologies for a flexible and lightweight approach to software development. The family of methodologies is color coded to differentiate its members (e.g., clear, yellow, orange, red.) The color chosen depends on the level of effort required. On one end of the spectrum is crystal clear, which is for smaller efforts, while crystal red is for larger efforts. Regardless of color, the crystal framework is cyclical and has three fundamental    processes:    chartering, delivery cycles, and wrap-up. Crystal chartering includes building the team, doing an Exploratory 360, defining standards of practice for the team, and building the project plan. In the delivery cycle, the crystal team iteratively develops, integrates, tests, and releases the product in iterations that last from one week to two months. Like other agile frameworks, crystal includes collaborative events, like stand-up meetings and reflective improvement workshops. In wrap-up the team concludes the project and holds a completion ritual where the team reflects on the entire project. [Agile   Software   Development:   The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework uses an Exploratory 360 in its formal chartering process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The cost performance index is a ratio of earned value over actual cost."
    }, {
      "option" : "B",
      "text" : "The cost performance indicator is a ratio of expected value over actual cost."
    }, {
      "option" : "C",
      "text" : "The cost performance index is a ratio of actual cost over earned value."
    }, {
      "option" : "D",
      "text" : "The cost performance indicator is a ratio of actualized cost over expected value."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule   Performance   Index  (SPI). CV and SV can be converted into performance indicators of CPI and  SPI, respectively, and tracked and charted to show progress over time. BAC is the total project budget. AC is the actual cost incurred to date. PV is the planned value of work at a given time in a project; you can calculate it by multiplying the BAC by the ratio of current week/scheduled weeks (e.g., 5 weeks into a 15 week $15,000   project = $5,000 PV). EV is value of work actually completed or earned (e.g., you have completed 50% of the project by week 5 of a 15 week $15,000 project = $7,500 EV). CV is the difference between what a project has earned    to date and cost to date (i.e., CV = EV - AC). SV is the difference between what a project has earned to date and what it was planned to earn to  date (i.e., SV = EV - PV). CPI is a ratio that expresses cost performance. CPI = EV/AC; If CPI > 1, the project is earning more than spending; and if  CPI 1, the project is ahead of schedule and if SPI < 1, the project is behind schedule. [Agile Estimating and Planning. Mike Cohn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What does the earned value management (EVM) accounting variable 'CPI' measure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "XP"
    }, {
      "option" : "B",
      "text" : "Scrum"
    }, {
      "option" : "C",
      "text" : "Agile unified process (AUP)"
    }, {
      "option" : "D",
      "text" : "DSDM"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Extreme Programming (XP) uses   the   following   practices:    pair programming, collective ownership, continuous integration, 40-hour week, on-site customer, coding standards, open workspace, and team rules [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework emphasizes the practice of using a 40-hour     work week?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Acceptance test  driven development (ATDD)"
    }, {
      "option" : "B",
      "text" : "Defect driven  development (3D)"
    }, {
      "option" : "C",
      "text" : "Test driven  development (TDD)"
    }, {
      "option" : "D",
      "text" : "Feature  driven  development (FDD)"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Feature driven development (FDD) uses a prescriptive model  where the software development process is planned, managed, and tracked from the perspective of individual software features. FDD uses short iterations of two weeks or less to develop a set amount of features. The five step FDD process is: 1. Develop overall model; 2. Create the features list; 3. Plan by feature; 4. Design by feature; 5 Build by feature. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which software development framework has a development process that is planned, managed, and   tracked by feature?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Time and materials"
    }, {
      "option" : "B",
      "text" : "Fixed-price"
    }, {
      "option" : "C",
      "text" : "Cost-reimbursable"
    }, {
      "option" : "D",
      "text" : "Not-to-exceed with fixed-fee"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Fixed-price contracts, although typical of traditional projects where scope is defined ahead of time, are not well suited for agile. When scope is fixed it can deter a team from exploring  out-of-scope  solutions  that may add value to the product. Contracts suited for agile include: general service for the initial phase with fixed-price contracts for successive phases; cost-reimbursable/ time and materials; not-to-exceed with fixed-fee; and a combination with incentives. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which type of contract is the least suitable for the agile development method?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Planning poker"
    }, {
      "option" : "B",
      "text" : "Story point poker"
    }, {
      "option" : "C",
      "text" : "Point poker"
    }, {
      "option" : "D",
      "text" : "Poker"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Planning poker is a popular agile 'game' used to estimate the relative work effort (story points) of developing   user   stories.    [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What popular agile game is used to estimate  the relative  effort  of developing user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The schedule performance index is a ratio of expected value over planned value."
    }, {
      "option" : "B",
      "text" : "The schedule performance index is a ratio of earned value over planned value."
    }, {
      "option" : "C",
      "text" : "The schedule performance index is a ratio of planned value over earned value."
    }, {
      "option" : "D",
      "text" : "The schedule performance index is a ratio of planned value over expected value."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Schedule Performance Index (SPI). SPI is a ratio that expresses schedule performance. SPI = EV / PV. If SPI > 1, the project is ahead of schedule and if SPI < 1, the project is behind schedule. AC is the actual cost the project has incurred to date. [Agile Estimating and Planning. Mike Cohn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What  does  the earned  value management    (EVM)   accounting variable 'SPI' measure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "XP"
    }, {
      "option" : "B",
      "text" : "FDD"
    }, {
      "option" : "C",
      "text" : "Crystal"
    }, {
      "option" : "D",
      "text" : "Scrum"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Scrum emphasizes, in part, the following  principles:  always  have   a product you can theoretically ship, speak a common language, and continuously test the product as you build it. [Agile Project Management with Scrum. Ken Schwaber.] [Knowledge and Skills: Level 3]"
    },
    "question" : "Which agile framework emphasizes the always having a product that you could potentially ship/release?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme programming (XP)"
    }, {
      "option" : "B",
      "text" : "Agile unified process (AUP)"
    }, {
      "option" : "C",
      "text" : "Scrum"
    }, {
      "option" : "D",
      "text" : "Lean software development"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The core roles in scrum are the product owner, scrum master and development team. [Agile Project Management with Scrum. Ken Schwaber.] [Knowledge and Skills: Level 3]"
    },
    "question" : "In which agile framework is the customer referred to as the 'product owner?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "16 hours"
    }, {
      "option" : "B",
      "text" : "8 hours"
    }, {
      "option" : "C",
      "text" : "4 hours"
    }, {
      "option" : "D",
      "text" : "24 hours"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Timeboxing is a realistic estimate or expectation of how long an action, task, or event will take to perform. Some tasks cannot be performed in the initial timeboxed estimate and are good candidates for reevaluation and possibly further decomposition  into  more  tasks.  [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "If a team believes during sprint planning that a task is expected to take approximately  8  hours  to   complete, what would be a good timebox value  to assign to the task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Stakeholder management"
    }, {
      "option" : "B",
      "text" : "Value management"
    }, {
      "option" : "C",
      "text" : "Scope management"
    }, {
      "option" : "D",
      "text" : "Executive management"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing  for  Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication    and    dialogue   with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What topic area    within  strategic management  deals with  fostering a work  environment to  engage stakeholders?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "30"
    }, {
      "option" : "B",
      "text" : "20"
    }, {
      "option" : "C",
      "text" : "5"
    }, {
      "option" : "D",
      "text" : "10"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The team's velocity is 20. 10 x 1 + 2 x 5 = 20. Story points for partially completed stories are not included in the velocity metric. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "During the last iteration, Paula and her agile team  completed 10  user stories worth 1 point each, 2 user stories worth 5 points each, and nearly completed one user story point worth 5 points. What was the team's velocity for the previous iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Process mapping"
    }, {
      "option" : "B",
      "text" : "Reflection agenda"
    }, {
      "option" : "C",
      "text" : "Scrum"
    }, {
      "option" : "D",
      "text" : "Product roadmap"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements  can  be  made.  It  is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which of the following is a process analysis technique."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Extreme programming (XP)"
    }, {
      "option" : "B",
      "text" : "Lean software development"
    }, {
      "option" : "C",
      "text" : "Agile unified process (AUP)"
    }, {
      "option" : "D",
      "text" : "Scrum"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Extreme programming (XP) is a programmer-centric agile framework that focuses on small, ongoing releases. XP highlights several principles:        pair        programming, sustainable pace, ongoing automated testing, effective communication, simplicity, feedback, courage, collective ownership, continuous integration, energized work, shared workspaces, on-site customer representation, and the use of  metaphor to describe concepts. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which    software  development framework stresses  the use of  pair- programming and shared workspaces?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "16 hours"
    }, {
      "option" : "B",
      "text" : "24 hours"
    }, {
      "option" : "C",
      "text" : "4 hours"
    }, {
      "option" : "D",
      "text" : "8 hours"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In the agile framework scrum, sprint planning and sprint review meetings  are  often  timeboxed  at four hours. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "What is  a typical scrum timebox value for a sprint planning meeting?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Three to five weeks."
    }, {
      "option" : "B",
      "text" : "Two months."
    }, {
      "option" : "C",
      "text" : "One week."
    }, {
      "option" : "D",
      "text" : "Two to four weeks."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide        updated       requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What is  the typical duration  of  a sprint?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Scrum  master, executive sponsor, and product owner"
    }, {
      "option" : "B",
      "text" : "Scrum  master, executive sponsor, and business analyst"
    }, {
      "option" : "C",
      "text" : "Product owner, scrum master, and team"
    }, {
      "option" : "D",
      "text" : "Scrum master, product team, and development team"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The three 'managers' of the scrum framework include the product owner, scrum master, and team. [Agile Project Management with Scrum. Ken Schwaber.]   [Knowledge   and  Skills: Level 2]"
    },
    "question" : "The scrum framework what stakeholders compose the three 'managers?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Strong leadership"
    }, {
      "option" : "B",
      "text" : "Seismic leadership"
    }, {
      "option" : "C",
      "text" : "Servant leadership"
    }, {
      "option" : "D",
      "text" : "Safety leadership"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Of the following, which is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Emotional resilience"
    }, {
      "option" : "B",
      "text" : "Reticence"
    }, {
      "option" : "C",
      "text" : "Confidence"
    }, {
      "option" : "D",
      "text" : "Self-aggrandizement"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Higgs & Dulewicz (1999) defines emotional intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4) Interpersonal sensitivity, 5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. What is one of the seven components of emotional intelligence as defined by Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Conscientiousness"
    }, {
      "option" : "B",
      "text" : "Reticence"
    }, {
      "option" : "C",
      "text" : "Confidence"
    }, {
      "option" : "D",
      "text" : "Self-aggrandizement"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Higgs & Dulewicz (1999) defines emotional intelligence using seven components: 1)  Self-awareness, 2) Emotional resilience, 3) Motivation, 4) Interpersonal sensitivity, 5) Influence, 6) Intuitiveness, and 7) Conscientiousness. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Having a high emotional intelligence is important to promote effective communication in an agile team. Which of the following is one of the seven components of emotional intelligence as defined by Higgs & Dulewicz?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Problem-mitigation strategies, tools, and techniques"
    }, {
      "option" : "B",
      "text" : "Problem-solving  strategies, tools, and techniques"
    }, {
      "option" : "C",
      "text" : "Problem-reversing  strategies, tools, and techniques"
    }, {
      "option" : "D",
      "text" : "Problem-saturation strategies, tools, and techniques"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an agile team is properly versed in problem-solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jessica is using active listening to help her agile team member work through a design challenge she is facing.   In   this   context,   what  agile knowledge and skill area does active listening fall under?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Self-organizing teams need a key enabler to remove obstacles and provide effective coaching."
    }, {
      "option" : "B",
      "text" : "Self-organizing teams need an authoritative figure that assigns tasks and makes sure the project is on schedule and budget."
    }, {
      "option" : "C",
      "text" : "Self-organizing teams do not need servant leadership."
    }, {
      "option" : "D",
      "text" : "Self-organizing teams need an ambassador between it and the product owner to reduce interruptions."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Servant leadership has its roots with an essay written in 1970 by Robert K Greenleaf. Greenleaf defined servant leaders as humble stewards devoted to their company and work to serve their peers, teams, and  customers. In a self-organizing team, a servant leader, as Greenleaf defined it, is ideal as the team leader is an enabler, listening to the agile team's needs, removing obstacles, and providing  tools  or  other  support    to promote high productivity. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Why is the quality of servant leadership desirable for agile team leaders?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Leaving participants in the dark until the day of the meeting to add an element of surprise."
    }, {
      "option" : "B",
      "text" : "Having a multi- disciplinary/diverse group so that many different perspectives are available."
    }, {
      "option" : "C",
      "text" : "Sending participants preparatory material, so they know what to expect and what is expected of them."
    }, {
      "option" : "D",
      "text" : "Having an engaging and experienced facilitator lead the brainstorming session."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A successful brainstorming event should strive to consider the following points - Host the meeting in a neutral and comfortable environment - Have an engaging and experienced facilitator lead the event - Send participants an overview, with goals, schedule, and what ground rules, beforehand - Have a multidisciplinary/ diverse team to get a broader perspective - Delay any criticism that may   stifle   idea   generation.   [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Stacey intends to schedule a brainstorming session to  generate ideas that may help solve some of the team's current issues. Which of the following is NOT a good brainstorming technique that Stacey should use?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "During iteration planning"
    }, {
      "option" : "B",
      "text" : "During release planning"
    }, {
      "option" : "C",
      "text" : "During project vision planning"
    }, {
      "option" : "D",
      "text" : "During sprint planning"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Release planning is important because the customer and development team collaborate to create a high-level plan for product release. User stories are initially defined during release planning. The release plan typically includes a schedule that includes several iterations and an estimate for when the product will be released. The development team discusses each user story   in   detail   to,   along   with  the customer, assign them to the project's iterations. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "When  are user  stories initially defined?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Separate of team members by function"
    }, {
      "option" : "B",
      "text" : "Collocate team members"
    }, {
      "option" : "C",
      "text" : "Rotate team member roles"
    }, {
      "option" : "D",
      "text" : "Isolate team members"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better agile team space include: collocation of team  members; reduction of nonessential noise/distractions;    dedicated whiteboard     and     wall     space   for information radiators; space for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Paula, as team leader, wants to design a comfortable, collaborative team space for her agile project. What can she do as a basic guideline?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Reserve  a space for daily stand-up meetings"
    }, {
      "option" : "B",
      "text" : "Arrange  seating to  group by team function"
    }, {
      "option" : "C",
      "text" : "Rotate team member roles"
    }, {
      "option" : "D",
      "text" : "Separate team  members by function"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A warm, welcoming environment that promotes effective communication, innovation, and motivated team members is an important aspect to consider when designing team space. Guidelines for a better    agile    team    space    include: collocation of team members; reduction   of nonessential noise/distractions; dedicated whiteboard  and wall space for information   radiators;   space   for the daily stand-up meeting and other meetings; pairing workstations; and other pleasantries like plants and comfortable furniture. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Communications]"
    },
    "question" : "Stephanie, as team leader, wants to design a comfortable, collaborative team space for her agile project. What can she do as a basic guideline?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "ATM user"
    }, {
      "option" : "B",
      "text" : "ATM maintainer"
    }, {
      "option" : "C",
      "text" : "Ronald Herbert"
    }, {
      "option" : "D",
      "text" : "ATM machine"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A persona is a notional user of the system under development. Being much more detailed than actors in  use case modeling where generic user names are assigned (e.g., end user), personas try to elaborate on users with detailed descriptions to  provide context to the developers. Some personas have such notional details as name, address, age, income, likes and dislikes, and other specific details. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "In agile modeling, what is a good example of a name given to a persona?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Helps facilitate daily stand-up meetings."
    }, {
      "option" : "B",
      "text" : "Helps facilitate the organization of features into categories or themes."
    }, {
      "option" : "C",
      "text" : "Helps facilitate reflection meetings."
    }, {
      "option" : "D",
      "text" : "Helps facilitate iteration development."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The product roadmap - owned by the product owner - serves as a high level overview of the product requirements. It is used as a tool for prioritizing features, organizing features into categories, and assigning rough time frames. Creating a product roadmap has four basic steps: 1) Identify requirements (these will become part of the product    backlog), 2) Organize requirements into categories or themes, 3) Estimate relative work effort (e.g., planning poker or affinity estimation) and prioritize (value), and 4) Estimate rough time frames (estimate velocity, sprint duration, and rough release dates). [The Art of Agile Development. James Shore.] [Agile analysis and design]"
    },
    "question" : "Christy is confused about the purpose of a product roadmap. She asks Thomas, her project manager, to identify a benefit of a product roadmap to help her understand a product roadmaps purpose. Select the benefit of a product roadmap."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Push"
    }, {
      "option" : "B",
      "text" : "Both pull and push"
    }, {
      "option" : "C",
      "text" : "Neither pull or push"
    }, {
      "option" : "D",
      "text" : "Pull"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Kanban, Japanese for billboard or signboard, is a scheduling system for just-in- time (JIT) production developed by Toyota in the 1940s and 1950s. It is a way of controlling and reducing inventory by using cards or signs to order (demand signal) requisite parts for a manufacturing process from other dependent systems (supply). Kanban has been adopted by agile to help control workflow. Kanban is based on the concept of 'pull.' Where the demand signal for production originates from the end customer requesting a product. When the customer orders a product (e.g., car) it sends a cascading 'pull'   signal that triggers through  the manufacturing process. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "In the lean manufacturing, just-in- time concept of kanban, is inventory control based on pull or push?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "2nd"
    }, {
      "option" : "B",
      "text" : "4th"
    }, {
      "option" : "C",
      "text" : "1st"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of  ATDD  with  its  four  steps  can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are.   3)   After   distillation,   the  team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "Jane and her team are demonstrating to the business stakeholder recently developed product  code.  At  the   demonstration, the team reviews what the expected behavior of the code is based on previous collaborative discussions  with the stakeholders and also brings up any risks the team found during the development process (e.g., other ways the code may fail that were not thought of in previous discussions). What step is Jane on in the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Peaceful"
    }, {
      "option" : "B",
      "text" : "Vision"
    }, {
      "option" : "C",
      "text" : "Trust"
    }, {
      "option" : "D",
      "text" : "Servant Leadership"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration,     Honesty,    Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is NOT a community value per the  PMI agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Serial leadership"
    }, {
      "option" : "B",
      "text" : "Service leadership"
    }, {
      "option" : "C",
      "text" : "Servile leadership"
    }, {
      "option" : "D",
      "text" : "Servant leadership"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Key soft skills negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Statement of work"
    }, {
      "option" : "B",
      "text" : "Team virtual page"
    }, {
      "option" : "C",
      "text" : "Project charter"
    }, {
      "option" : "D",
      "text" : "Mission statement"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come to a consensus. Three key elements should be included in a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale of a project. Mission is the 'what' of the project and describes what the team will accomplish to reach the     vision.     Success     criteria   are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Jan is looking at an important agile document that includes the project mission and success criteria. What document is Jan most likely reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Setting up a team intranet site"
    }, {
      "option" : "B",
      "text" : "Setting up an RSS feed"
    }, {
      "option" : "C",
      "text" : "Setting up a listserv"
    }, {
      "option" : "D",
      "text" : "Setting up a message board"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A high-performance agile team is one that is ideally collocated for osmotic communication and face-to- face interaction. However, collocation isn't always feasible in today's multinational environment. For distributed teams, several practices are available to provide the best form     of effective communication in the absence of being collocated: team intranet sites, virtual team rooms, and video conferencing over e-mail when possible. Geographic separation, especially on a world-wide scale, causes the team to consider language and cultural differences, and time zone differences. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What is one method that can be used to improve communication for a team that cannot be collocated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Firm fixed-price"
    }, {
      "option" : "B",
      "text" : "Fixed-budget and fixed- schedule"
    }, {
      "option" : "C",
      "text" : "Fixed-schedule and fixed-price"
    }, {
      "option" : "D",
      "text" : "Fixed-budget and fixed-price"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Time, budget, and cost estimation is an important knowledge and skill area of agile. According to Highsmith,   the   nature   of   the agile method, whereby it welcomes changing scope, means that it lends itself well to fixed budgets and a fixed schedule because changing scope makes it difficult to estimate a total cost. Generally speaking, the budget and schedule constraints are known  but before a project will commence there needs to be an agreed upon set of base product functionality defined in an initiation phase; fixing scope reduces an agile team's innovative tendency to provide improved value. For companies that are familiar with fixed-price contracts, where requirements are agreed upon before contract closing, adopting agile can  be a weary initial venture. Instead, other contract vehicle types are recommended for agile efforts. These include: a general service contract for the initiation phase and separate fixed- price contracts for iterations or user stories; time-and-material contracts; not-to-exceed with fixed-fee contracts; and, incentive contracts (e.g., fixed price with incentive; cost-reimbursable with award fee). [Agile Project Management: Creating Innovative Products Ð 2nd Edition. Jim Highsmith.] [Knowledge and Skills: Level 1]"
    },
    "question" : "According to Highsmith, what type of contract does agile lend itself well to?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Severity cost = impact * planned"
    }, {
      "option" : "B",
      "text" : "Severity value = impact * planned"
    }, {
      "option" : "C",
      "text" : "Severity = impact * actual cost"
    }, {
      "option" : "D",
      "text" : "Severity = impact  * probability/likelihood"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A risk burndown chart is a risk management technique used to track project risk over time. It allows stakeholders to quickly review project risk management performance (e.g., increasing, decreasing, and by how much) over time. Severity (a product of impact and probability) is charted along the vertical axis with time on the horizontal axis. Impact typically takes a value from 0 to 5 in increasing order of risk and probability/likelihood typically takes a value from 0 to 5 in increasing order of probability. In this example, the worst severity a risk could have is 25 (5 x 5 = 25) and the least   harmful   severity   a   risk could have is 0. The agile team and customer/product owner identifies its risks and assigns severity values in a risk register and tracks those values over time. Ideally, risk severity will decrease over time. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "How is risk severity, as used in a risk burndown chart, typically calculated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Short iterations"
    }, {
      "option" : "B",
      "text" : "Top-down decision making"
    }, {
      "option" : "C",
      "text" : "Cross-functional teams"
    }, {
      "option" : "D",
      "text" : "Continuous improvement"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Key characteristics of agile project management include: continuous improvement, cross- functional teams, short iterations, an incremental approach, and business priorities and customer value. [The Art of Agile Development. James   Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is NOT a characteristic of agile project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Should be  reported  to  the offending parties for resolution."
    }, {
      "option" : "B",
      "text" : "Should be  reported  to appropriate parties."
    }, {
      "option" : "C",
      "text" : "Should be  reported  to  upper management."
    }, {
      "option" : "D",
      "text" : "Should be  reported  to  the human resources office."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The PMI Code of Ethics and Professional Conduct states that it is mandatory for a project manager to: inform yourself about and uphold the policies, rules, regulations, and laws that govern your work, including professional and volunteer activities; report unethical or illegal conduct to appropriate parties and, if necessary, to those affected by the misconduct; ensure that any allegations of misconduct or illegal activity are substantiated and file only complaints that are supported by facts; never  take part or help someone else take part in illegal activities. [PMI Code of Ethics and Professional Conduct. Project Management Institute.] [Knowledge and Skills: Level 2]"
    },
    "question" : "According to  the PMI Code, unethical or illegal conduct"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Spike task"
    }, {
      "option" : "B",
      "text" : "Slam task"
    }, {
      "option" : "C",
      "text" : "Risk reduction task"
    }, {
      "option" : "D",
      "text" : "Sprint planning"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques       include       prototyping, simulation, demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment, feedback is essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Stacey knows that feedback techniques are ubiquitous in agile projects. Which of the following lists an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Eliminating the need for task duration estimation"
    }, {
      "option" : "B",
      "text" : "Slowing down the estimation process"
    }, {
      "option" : "C",
      "text" : "Large product backlogs"
    }, {
      "option" : "D",
      "text" : "Small product backlogs"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Affinity estimating is a method to predict the work effort, typically in story points, of developing a user  story. It is particularly useful for  large product backlogs. Although several methods exist, the basic affinity estimating model involves sizing user stories on a scale from small to large. The scale can be a Fibonacci sequence or t-shirt sizes and is typically taped to a wall in a large conference room. Participants then attach their user stories to the wall as estimates. It is often done in silence and has several iterations until the user stories have been estimated. [The Art of Agile Development. James Shore.] [Agile estimation]"
    },
    "question" : "What  is  the agile technique of affinity estimation notably useful for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SPORT"
    }, {
      "option" : "B",
      "text" : "SMART"
    }, {
      "option" : "C",
      "text" : "STRONG"
    }, {
      "option" : "D",
      "text" : "SMALL"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The    acronym   SMART (specific, measurable, achievable, relevant, and timeboxed) helps the agile practitioner remember the characteristics of a well-defined task.  S Ð Specific tasks are ones that clearly contribute to the development of a user story. It should not be vague. M Ð Measurable tasks are ones that the team and customer can verify. A - Achievable tasks are ones that developers may realistically  implement and understand. R - Relevant tasks are ones that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "What acronym helps the agile practitioner remember  the characteristics of a well-defined task?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Schedule management"
    }, {
      "option" : "B",
      "text" : "Stakeholder management"
    }, {
      "option" : "C",
      "text" : "Risk management"
    }, {
      "option" : "D",
      "text" : "Interaction management"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs.     6)     We     need      intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What topic area within strategic management deals with promoting a work environment where stakeholders are constantly engaged?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SMART"
    }, {
      "option" : "B",
      "text" : "INVEST"
    }, {
      "option" : "C",
      "text" : "Kano"
    }, {
      "option" : "D",
      "text" : "WIDETOM"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "An agile team must always face the prioritization of product features in its product backlog. From release planning to iteration planning, an agile team must prioritize the user stories/ features of its product to ensure that high-quality and high- value features are developed first to help facilitate an optimized and early return on investment (ROI). An agile team typically prioritizes requirements or   user   stories/features   in   terms of relative value and risk; value is  defined by the customer (i.e., customer-value prioritization). Two common methods to prioritize product features are: MoSCoW and Kano. The MoSCoW method categorizes features into 'Must have,' 'Should have,' 'Could have,' and 'Would have' features. The Kano method categorizes features into 'Must haves (threshold),' 'Dissatisfiers,' 'Satisfiers,' and 'Delighters.' Must haves are features that are requisite. Dissatisfiers are features that adversely impact perceived value and should be eliminated. 'Satisfiers' are  features that increase perceived value  linearly, where the more you add the more the customer is pleased, but are not required, and 'Delighters' are features that increase perceived value exponentially to please the customer. To prioritize features based on risk, a risk-to-value matrix can be used. A risk-to-value matrix has four quadrants, with the horizontal axis having low and high value, and the vertical axis having low and high risk. User stories are assigned to one of the four categories/quadrants: low-value, low-risk; low-value, high-risk; high- value, low-risk; high-value, high-risk. A cost-to-value matrix can also be made in this manner. All prioritization in agile is 'relative,' meaning that the priority of one user story is relative to other user stories and not prioritized  on a fixed scale. [Lean-  Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, select a method used in agile for the purpose of prioritization."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SMART"
    }, {
      "option" : "B",
      "text" : "INVEST"
    }, {
      "option" : "C",
      "text" : "WoSCoM"
    }, {
      "option" : "D",
      "text" : "MoSCoW"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development Although the user stories are prioritized in the product backlog  initially  during release  planning,  an  agile  team   and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway,   Guy   Beaver,   James   R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Becky and her agile team have just performed decomposition on several user stories and wants to prioritize them. What common technique might she and her team use to prioritize the user stories?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Demo"
    }, {
      "option" : "B",
      "text" : "Develop"
    }, {
      "option" : "C",
      "text" : "Distill"
    }, {
      "option" : "D",
      "text" : "Discuss"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer    or    business    stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That is, what the acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have    been    developed,    the     team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "What  is  the fourth  step  of  the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "By performing work breakdown structure reviews."
    }, {
      "option" : "B",
      "text" : "By performing ongoing integration testing."
    }, {
      "option" : "C",
      "text" : "By using comprehensive documentation to define team values."
    }, {
      "option" : "D",
      "text" : "By    performing   integration testing near the end of a release."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Agile project management places strong emphasis on 'continuous improvement.' Continuous improvement processes are built into the agile methodology, from customers providing feedback after each iteration to the team reserving time to reflect on its performance through retrospectives after each iteration. Ongoing unit   and integration testing and keeping up with technological/industry developments also play a part in the continuous improvement process. Continuous improvement is also a key principle in the lean methodology, where a focus of removing waste from the value stream is held. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 2]"
    },
    "question" : "How might an  agile team continuously improve its product?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who builds team trust and removes any obstacles a team may face during its effort."
    }, {
      "option" : "B",
      "text" : "Someone that drives the team to maximum and unsustainable performance    levels    to  exceed customer expectations."
    }, {
      "option" : "C",
      "text" : "Someone who constantly criticizes team members so that they are aware of their defects  and can improve their performance."
    }, {
      "option" : "D",
      "text" : "Someone who builds an authoritative air so that team members know who is in charge."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the  team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all   stakeholders,   including  business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ginny has recently started an agile project where she is to be the project leader. What should Ginny aspire to be as agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who constantly criticizes team members so that they are aware of their defects  and can improve their performance."
    }, {
      "option" : "B",
      "text" : "Someone that drives the team to maximum and unsustainable performance levels to exceed customer expectations."
    }, {
      "option" : "C",
      "text" : "Someone who communicates and endorses the values and principles of agile project management to stakeholders that may be unfamiliar with agile."
    }, {
      "option" : "D",
      "text" : "Someone who espouses agile project management as the best and therefore only management method that can succeed in today's volatile marketplace."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project  leader  method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined;    empowering    the   team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating  effectively; and,  be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Victoria  has recently  started an agile  project where she is  to  be  the project leader. What  should  Victoria aspire to be as agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Release delivery"
    }, {
      "option" : "B",
      "text" : "Incremental delivery"
    }, {
      "option" : "C",
      "text" : "Value stream delivery"
    }, {
      "option" : "D",
      "text" : "Sprint delivery"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are successively improved, to a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration     for     demonstration     and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Kyle knows that a delivery concept of agile is defined as 'frequent  delivery  of  working  products,  which are successively improved, to a customer for immediate feedback and acceptance.' Which term is this delivery concept?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone that provides guidance, mentoring, coaching, and makes decisions when needed, but empowers the team to make its own decisions collaboratively a predominant amount of the time."
    }, {
      "option" : "B",
      "text" : "Someone that makes all decisions in the face of team adversity to quell unfavorable team dynamics."
    }, {
      "option" : "C",
      "text" : "Someone who is minimally available  but  present  enough  to make all decisions."
    }, {
      "option" : "D",
      "text" : "Someone that provides minimal guidance, mentoring, coaching, but makes all decisions without informing the team until required."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this  misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members       to       make       decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating  effectively; and,  be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of an agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Someone who empowers the team to be self-organized and self-disciplined."
    }, {
      "option" : "B",
      "text" : "Someone who empowers the team to be self-sufficient and independent of any leadership."
    }, {
      "option" : "C",
      "text" : "Someone who empowers the team to be self-scrumming and self-introspective."
    }, {
      "option" : "D",
      "text" : "Someone who empowers the team to make all decisions by itself."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems     from     the     desired     'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product and make some decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively    with    the  customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members so it will be motivated to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working  environment  to  ensure   that the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Edward has recently started an agile project where she is to be the project leader. What should Edward aspire to be as agile leader?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "4th"
    }, {
      "option" : "B",
      "text" : "1st"
    }, {
      "option" : "C",
      "text" : "2nd"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The TDD process has four basic steps: 1) Write a test, 2) Verify and validate the test, 3) Write product code and apply the test, 4) Refactor the product code. An example may be that a user has to enter an age value.  A good test is to make sure the user data entry is a positive number and not a different type of input, like a letter (i.e., write the test). The programmer would   verify   that   entering   a letter instead of a number would cause the program to cause an exception (i.e., v&v the test). The programmer would then write product code that takes user entry for the age value (i.e., write the product code). The programmer would then run the product code and enter correct age values and incorrect age values (i.e., apply the test). If the product code is successful, the programmer would refactor  the product code to improve its design. Using these four steps iteratively ensures that programmers think about how a software program might fail first and to build product code that is holistically   being   tested.   This helps produce high quality code. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Xavier has just verified and validated that the test code he just wrote fails as part of the four step process of TDD; What step is Xavier performing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Team standards that failed"
    }, {
      "option" : "B",
      "text" : "The  tester  who caught  the fewest bugs"
    }, {
      "option" : "C",
      "text" : "Customer inconsistencies in Requirements"
    }, {
      "option" : "D",
      "text" : "Product owner values"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "During reflection or retrospectives, an agile team reserves time to reflect on the work it has completed with the objective of continuous improvement. In these self- assessment/ team-assessment events, topics can include: lessons learned from successes and failures; team standards that worked, failed, or were not properly followed; and other areas of improvement.   [Agile Retrospectives:  Making  Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "In a self-assessment or reflection event, what is a likely topic a team will focus on?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "$3,447"
    }, {
      "option" : "B",
      "text" : "$3,337"
    }, {
      "option" : "C",
      "text" : "$3,227"
    }, {
      "option" : "D",
      "text" : "$3,667"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment or project. NPV is the difference between the  present  value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow  is  discounted  back to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash inflow or outflow. For example, consider the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it   indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "Calculate the Net Present Value of the following investment candidate. The initial investment cost is $2,00. The discount rate is 5%. At the end of year 1, $2000 is expected. At the end  of year 2, $2000 is expected. At the end of year 3, $2000 is expected."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Envisioning"
    }, {
      "option" : "B",
      "text" : "Adapting"
    }, {
      "option" : "C",
      "text" : "Speculating"
    }, {
      "option" : "D",
      "text" : "Executing"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile project management phases, in sequence, are: Envisioning, speculating, exploring, adapting, closing. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which is NOT a phase of Highsmith's  agile project management?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Speculating and closing"
    }, {
      "option" : "B",
      "text" : "Envisioning and elaborating"
    }, {
      "option" : "C",
      "text" : "Knowledge  building  and mentoring"
    }, {
      "option" : "D",
      "text" : "Coaching and mentoring"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time  while  others  may  need  a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Stephanie's agile team is always looking to improve its performance. Her team has decided to use an experienced agile practitioner and facilitator to come in and provide guidance to the team on how it may improve. What knowledge and skill area is this practitioner providing  to the team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Problem-saturation strategies, tools, and techniques"
    }, {
      "option" : "B",
      "text" : "Problem-reversing  strategies, tools, and techniques"
    }, {
      "option" : "C",
      "text" : "Problem-mitigation strategies, tools, and techniques"
    }, {
      "option" : "D",
      "text" : "Problem-solving  strategies, tools, and techniques"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Literally thousands of decisions are made in the course of a project. Many of these decisions are made in response to problems that inevitably arise and confront the agile team. Therefore it is essential that an     agile team is properly versed in problem- solving strategies, tools, and techniques. Some common problem- solving techniques include: ask it loud; revisit the problem; 5Y; sunk cost fallacy; devil's advocate; be kind, rewind; asking probing questions; and reflective/active listening. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Jessica is using 'ask it loud' to help her understand the nature of an issue she is facing on the project. What agile knowledge and skill area does 'ask it loud' fall under?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SPI = EV / PV"
    }, {
      "option" : "B",
      "text" : "SPI = BAC / EV"
    }, {
      "option" : "C",
      "text" : "SPI = PV / EV"
    }, {
      "option" : "D",
      "text" : "SPI = BAC / PV"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "EVM or earned value management is a management technique   used   to   evaluate   project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index  (SPI). CV and SV can be converted into performance indicators of CPI and  SPI, respectively, and tracked and charted to show progress over time. SPI = EV / PV. If SPI > 1, the project is ahead of schedule and if SPI < 1, the project is behind schedule. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. How is SPI calculated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Business executive"
    }, {
      "option" : "B",
      "text" : "Project leader"
    }, {
      "option" : "C",
      "text" : "Business analyst"
    }, {
      "option" : "D",
      "text" : "sprint planner"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A common misconception in agile is that an agile team does not need a leader. In fact, all agile teams need a leader, but the way in which the leader leads is fundamentally different than the typical traditional project manager/project leader method. Some have theorized that this misconception stems from the desired 'self- organizing' quality of the agile team. And although the 'self-organizing' agile team is empowered to take ownership and responsibility of the product   and   make   some   decisions itself, it nevertheless requires a leader to help provide guidance, mentoring, coaching, problem solving, and decision making. Some key aspects required of an agile leader include: empowering team members to decide what standard agile practices and methods it will use; allowing the team to be self-organized and self- disciplined; empowering the team members to make decisions collaboratively with the customer; inspire the team to be innovative and explore new ideas and technology capabilities; be a champion of and articulate the product vision to team members  so  it  will  be  motivated   to accomplish the overall objective; remove any obstacles and solve any problems the team may face in its effort; communicate and endorse the values and principles of agile project management to stakeholders that may be unfamiliar with agile; ensure that  all stakeholders, including business managers and developers, are collaborating effectively; and, be able to adapt the leadership style to the working environment to ensure that  the agile values and principles are effectively upheld. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What person in the agile framework 'empowers team members to decide what standard agile practices and methods it will use?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Story days"
    }, {
      "option" : "B",
      "text" : "Sprint points"
    }, {
      "option" : "C",
      "text" : "Story points"
    }, {
      "option" : "D",
      "text" : "Agile points"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Story points is the typical unit used for estimating the relative work effort involved with developing a user story. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What is the typical unit of work effort used for sizing user stories in planning poker and affinity estimation?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "0.8"
    }, {
      "option" : "B",
      "text" : "4"
    }, {
      "option" : "C",
      "text" : "36"
    }, {
      "option" : "D",
      "text" : "12"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Velocity is a measure of the number of user story points completed per iteration. An agile team can use its previous velocity recordings as a method of estimating how many user story points it may complete in the  next iteration. David's team's velocity is 12. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "David's agile team just finished building, testing, and releasing 12 user story points in its most recent 3   week iteration. What is the team's velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Release planning"
    }, {
      "option" : "B",
      "text" : "sprint retrospective"
    }, {
      "option" : "C",
      "text" : "Product roadmapping"
    }, {
      "option" : "D",
      "text" : "Envisioning"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Acceptance criteria is typically defined in tandem with user story definition during release planning; however, acceptance criteria can also be defined during iteration planning once a story has been picked for the iteration. The one steadfast rule is that acceptance criteria must be defined before development begins. Like agile planning, the definition of acceptance criteria is constantly evolving as the conversation with the product owner matures. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "Of the following, which event is typically the one where acceptance criteria is first defined?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sprint team"
    }, {
      "option" : "B",
      "text" : "Empowered team"
    }, {
      "option" : "C",
      "text" : "Parry team"
    }, {
      "option" : "D",
      "text" : "Iteration team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Empowered teams - ones that are self-organizing and know how to solve problems with minimal management involvement - are a cornerstone of the agile methodology. This is the antithesis to the classic viewpoint of the traditional project manager who is seen as someone that controls all decisions and delegates tasks to a team with little feedback. An agile team must include all members and stakeholders to make decisions, and make decisions expediently. Because it is essential that the user/customer be involved with development, it is encouraged that the user/customer   is   closely    integrated with the agile team with collocation/on-site support being ideal. An agile team feels empowered when  it collectively assumes responsibility for the delivery of the product (i.e., taking ownership). [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What type of team uses collaboration to solve problems and decides on the path forward?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Products work  as   intended because of frequent delivery iterations"
    }, {
      "option" : "B",
      "text" : "Customers must collaborate with the agile team to provide feedback"
    }, {
      "option" : "C",
      "text" : "Stakeholders must interact effectively to create business value"
    }, {
      "option" : "D",
      "text" : "Comprehensive software specification and precise contract terms and conditions"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The agile primary values include: individuals and interactions, working software, customer collaboration, and responding to change. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is NOT a primary agile value per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Statement of work"
    }, {
      "option" : "B",
      "text" : "Request for proposal"
    }, {
      "option" : "C",
      "text" : "Project home page"
    }, {
      "option" : "D",
      "text" : "Project charter"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come to a consensus. Three key elements should be included in a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale of a project. Mission is the 'what' of the project and describes what the team will accomplish to reach the     vision.     Success     criteria   are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Jan is looking at an important agile document that includes the project vision and mission. What document is Jan most likely reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Crowdsourcing and mentoring"
    }, {
      "option" : "B",
      "text" : "Symptom and solution"
    }, {
      "option" : "C",
      "text" : "Coaching and mechanizing"
    }, {
      "option" : "D",
      "text" : "Coaching and mentoring"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile    has    a    value    of  continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile      Teams.      Lyssa      Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Stacey is concerned with the recent stagnant performance of her agile team. She believes it just needs some outside, independent guidance to improve What agile knowledge and skill technique might Stacey consider?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Envisioning and elaborating"
    }, {
      "option" : "B",
      "text" : "Coaching and mechanizing"
    }, {
      "option" : "C",
      "text" : "Coaching and mentoring"
    }, {
      "option" : "D",
      "text" : "Symptom and solution"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount of coaching and mentoring an agile team needs    is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Ursula's agile team is in need of outside guidance and leadership to  help it reach new levels of performance. Her team has decided to use an experienced agile practitioner and facilitator. What knowledge and skill area is this practitioner providing to the team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Inspiring"
    }, {
      "option" : "B",
      "text" : "Persistent"
    }, {
      "option" : "C",
      "text" : "Collaboration"
    }, {
      "option" : "D",
      "text" : "Streamlined"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The following are community values of the PMI agile community of practice   community   charter: Vision, Servant  Leadership, Trust, Collaboration, Honesty, Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "AGILE"
    }, {
      "option" : "B",
      "text" : "Risk-to-value matrix"
    }, {
      "option" : "C",
      "text" : "Strength"
    }, {
      "option" : "D",
      "text" : "IDEF"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Value-based analysis strives to understand how value, as defined by the customer, relates to various components of the product, like features and tasks. Features are often prioritized with prioritization based on value  and  risk.  Prioritization  can  be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Select a technique used for value- based analysis?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sub-tasking"
    }, {
      "option" : "B",
      "text" : "Decomposition"
    }, {
      "option" : "C",
      "text" : "Function task analysis"
    }, {
      "option" : "D",
      "text" : "Sub-functioning"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release  planning,  an  agile  team   and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway,   Guy   Beaver,   James   R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Oswald and his agile team are subdividing user stories into manageable tasks so that it may plan the upcoming iteration with more accuracy. What is this process called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Coaching and mentoring is not a knowledge and skill technique within agile."
    }, {
      "option" : "B",
      "text" : "Minimal to reduce distracting the development team."
    }, {
      "option" : "C",
      "text" : "Non-stop."
    }, {
      "option" : "D",
      "text" : "It varies  depending on  the needs of the team."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Coaching and mentoring within teams can be helpful for  nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. Because agile has a value of continuous improvement, coaching and mentoring is not solely for new or immature teams, but experienced ones too where coaching can help achieve higher levels of performance. The amount   of coaching and mentoring an agile team needs is variable. Some newer teams will need a coach guiding the team nearly all the time while others may need a coach only for particularly challenging situations. A not uncommon scenario is to have a coach help the team collectively during sprint/iteration planning and then during the iteration help mentor individual team members. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Coaching and mentoring can be a powerful knowledge and skill technique to improve the performance of an agile team. What is the perfect amount of coaching and mentoring for an agile team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Being  present and focusing your attention on the speaker."
    }, {
      "option" : "B",
      "text" : "Thinking about what to say next to move the conversation flow."
    }, {
      "option" : "C",
      "text" : "Summarizing."
    }, {
      "option" : "D",
      "text" : "Paraphrasing."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "One communication technique to     reduce     misunderstanding    and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Interrupting the speaker."
    }, {
      "option" : "B",
      "text" : "Being  present and focusing your attention on the speaker."
    }, {
      "option" : "C",
      "text" : "Taking notes."
    }, {
      "option" : "D",
      "text" : "Summarizing."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Taking notes."
    }, {
      "option" : "B",
      "text" : "Summarizing."
    }, {
      "option" : "C",
      "text" : "Paraphrasing."
    }, {
      "option" : "D",
      "text" : "Allowing yourself  to  get distracted"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both good listeners and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1)  Being  present  and  focusing   your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Smart"
    }, {
      "option" : "B",
      "text" : "Small"
    }, {
      "option" : "C",
      "text" : "Superlative"
    }, {
      "option" : "D",
      "text" : "Specific"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The acronym INVEST (independent, negotiable, valuable, estimable, small, and testable) helps the   agile   practitioner   remember the characteristics of a good user story. I Ð Independent stories can be developed in any order and avoid dependencies which can make development more complex. N Ð Negotiable user stories mean that both the customer and developer should feel free to analyze and adapt a user story to meet customer needs. V Ð A valuable user story describes how the product  feature will provide value to the customer. E Ð Estimable user stories are ones that developers can readily estimate the effort or duration required for developing them. S- Small user stories are ones that take about two to five days of work to implement. T - Testable user stories are ones that can be verified according to acceptance criteria to ensure value. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken  Schwaber.]  [Planning, monitoring, and adapting]"
    },
    "question" : "Ralph is describing the INVEST acronym used for user story development in an agile practitioner seminar. What does the S in INVEST stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Small"
    }, {
      "option" : "B",
      "text" : "Stable"
    }, {
      "option" : "C",
      "text" : "Specific"
    }, {
      "option" : "D",
      "text" : "Superlative"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The acronym SMART (specific, measurable, achievable, relevant, and timeboxed) helps the agile practitioner remember the characteristics of a well-defined task.  S Ð Specific tasks are ones that clearly contribute to the development of a user story.  It  should  not  be  vague.  M   Ð Measurable tasks are ones that the team and customer can verify. A - Achievable tasks are ones that developers may realistically  implement and understand. R - Relevant tasks are ones that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "Jules is describing the SMART acronym used for task analysis in an agile seminar. What does the S stand for?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "SV = AC - PV"
    }, {
      "option" : "B",
      "text" : "SV = PV - EV"
    }, {
      "option" : "C",
      "text" : "SV = PV - AC"
    }, {
      "option" : "D",
      "text" : "SV = EV - PV"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Unlike   traditional  project management methods that  evaluate risk and variance and trends in formal meetings, agile incorporates risk analysis and variance and trend analysis into iteration review meetings. Risk and variance and trend analysis may be performed in agile using information radiators, like a risk burndown chart, and the use of traditional earned value management (EVM) to measure cost and schedule variance (CV and SV, respectively). [Agile Estimating and Planning. Mike Cohn.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What earned value management (EVM) variable captures schedule variance?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Developing"
    }, {
      "option" : "B",
      "text" : "Refactoring"
    }, {
      "option" : "C",
      "text" : "Simulation"
    }, {
      "option" : "D",
      "text" : "Coding"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "There are several feedback techniques - techniques that facilitate constructive criticism to improve product value and quality - built into the agile process. In the classic definition, feedback is a dynamic process where past information influences the behavior of the same process in the future. Agile feedback techniques include prototyping, simulation,   demonstration, evaluations, pair programming, unit testing, continuous integration, daily stand-up meetings, sprint planning. Because agile prides itself on a transparent and collaborative environment,  feedback  is   essentially ubiquitous. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is an agile 'feedback technique for product?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Iteration method"
    }, {
      "option" : "B",
      "text" : "Facilitation method"
    }, {
      "option" : "C",
      "text" : "Business case method"
    }, {
      "option" : "D",
      "text" : "Synchronization method"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "As a project leader or scrum master, effective facilitation methods are critical for building a high- performance and motivated team. Facilitation of meetings, discussions, demonstrations, etc., is a constant on an agile project. Some general facilitation methods include: using a small number of people for brainstorming events; hosting  events in      a     non-threatening/comfortable environment; having an agenda that is shared with the group ahead of time; using open-ended questions instead of closed-ended questions; including a diverse representation to gain a broader perspective of the topic.  [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Hanson has shared an agenda for an upcoming product demonstration with key stakeholders. Sharing an agenda is generally considered a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Confident"
    }, {
      "option" : "B",
      "text" : "Courage"
    }, {
      "option" : "C",
      "text" : "Deliberate"
    }, {
      "option" : "D",
      "text" : "Taciturn"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The following are community values of the PMI agile community of practice community charter: Vision, Servant  Leadership, Trust, Collaboration,     Honesty,    Learning, Courage, Openness, Adaptability, Leading Change, Transparency [PMI Agile Community of Practice Community Charter. Project Management Institute.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following responses, which is a community value per the PMI  agile community of practice community charter?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Remove their estimate values from the game."
    }, {
      "option" : "B",
      "text" : "Carry their values forward to the next user story."
    }, {
      "option" : "C",
      "text" : "Take the average of the their scores and then see if it is within 10% of the average of the other scores."
    }, {
      "option" : "D",
      "text" : "Defend their positions to the group so it may help to arrive at a consensus."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Planning poker is based upon the wideband Delphi estimation technique. It is a consensus-based technique for estimating effort. Sometimes called scrum poker, it is a technique for a relative estimation of effort, typically in story points, to develop a user story. At a planning poker meeting, each estimator is given an identical deck of planning poker cards with a wide range of values. The Fibonacci sequence is often used for values for planning poker (i.e., 0, 1,  1, 2, 3, 5, 8, etc.); another common sequence is (question mark, 0, 1/2, 1,  2,  3,  5,  8,  13,  20,  40,  and  100).  A planning poker meeting works as follows: 1) a moderator, not estimating, facilitates the meeting. 2) the product owner/manager provides a short overview of the user story and answers clarifying questions posed by the developers. Typically the product owner does not vote. 3) Each estimator selects an estimate of work effort by selecting a card, 4) Once everyone has selected a card, everyone overturns their card concurrently, 5) Estimators with high and low estimates are given a chance to defend positions. 6) The process repeats until there is consensus. The developer who owns the user story is typically given higher credence. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What should the persons with the highest and lowest estimated story point value do when playing a game of planning poker?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Paraphrasing."
    }, {
      "option" : "B",
      "text" : "Focusing your full attention on a speaker."
    }, {
      "option" : "C",
      "text" : "Taking notes."
    }, {
      "option" : "D",
      "text" : "Focusing your full attention on environmental surroundings."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "One communication technique to reduce misunderstanding and miscommunication is active listening. A well run agile project necessitates both         good         listeners          and communicators, active listening helps work towards both of these necessities. The basics of active listening   include: 1) Being present and focusing your attention on the speaker. 2) Taking notes instead of interrupting. 3) Paraphrasing to confirm and review what you have heard. 4) Summarizing the conversation once it has concluded for posterity. Using open ended questions, good body language, and silence can help improve listening skills. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following responses is NOT a part of active listening?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Schedule management"
    }, {
      "option" : "B",
      "text" : "Team member management"
    }, {
      "option" : "C",
      "text" : "Agile management"
    }, {
      "option" : "D",
      "text" : "Stakeholder management"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the importance of managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships    ourselves    rather  than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4) Everything that we do serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need    to    generalize    the  marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What  topic area  within  strategic management  deals with  promoting a work  environment of  active participation of stakeholders?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Sub-functioning"
    }, {
      "option" : "B",
      "text" : "Subdividing"
    }, {
      "option" : "C",
      "text" : "Task analysis"
    }, {
      "option" : "D",
      "text" : "Decomposition"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In iteration planning, an   agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Oscar and his agile team    are subdividing   user    stories into manageable tasks. What is this process called?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Product backlog"
    }, {
      "option" : "B",
      "text" : "Task backlog"
    }, {
      "option" : "C",
      "text" : "Scrum backlog"
    }, {
      "option" : "D",
      "text" : "Sprint backlog"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The sprint backlog is a list of product features or work items to be completed in a sprint. It is typically fixed for the sprint unless it is overcome by important customer requirements. [Lean-Agile Software Development:   Achieving   Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Agile analysis and design]"
    },
    "question" : "Esther  is  looking   at  a document that holds a list  of  all the product features to be developed in the upcoming sprint/iteration. What document is Ester reviewing?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Burndown chart"
    }, {
      "option" : "B",
      "text" : "Business case"
    }, {
      "option" : "C",
      "text" : "Task board"
    }, {
      "option" : "D",
      "text" : "Value stream map"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Business case development is an important initial step in agile  project management. The business  case is a concise document that outlines the project's vision, goals, strategies for achieving goals, milestones, required investment and expected return/payback. A business case articulates the why and how a project will deliver value to a customer. [Lean-Agile Software Development:   Achieving   Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "What  agile  artifact  outlines   the project's strategies  for achieving goals?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Assimilation planning"
    }, {
      "option" : "B",
      "text" : "Doctrine planning"
    }, {
      "option" : "C",
      "text" : "Release planning"
    }, {
      "option" : "D",
      "text" : "Manifesto planning"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up     meetings,    iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed     Sidky.]     [Knowledge   and Skills: Level 1]"
    },
    "question" : "Select a technique that promotes agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Process analysis technique"
    }, {
      "option" : "B",
      "text" : "Error proofing technique"
    }, {
      "option" : "C",
      "text" : "Sprint planning technique"
    }, {
      "option" : "D",
      "text" : "Team reflection technique"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "Value stream mapping is a collaborative process analysis technique where a diverse team depicts/maps a process to identify where waste occurs and where improvements can be made. It is an example of a process analysis technique. Like value stream mapping, process mapping is also used to map a process to identify bottlenecks (places where processing slows and inventory can build). [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy  Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Process mapping is an example of a"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "WebEx"
    }, {
      "option" : "B",
      "text" : "E-mail"
    }, {
      "option" : "C",
      "text" : "Telephone"
    }, {
      "option" : "D",
      "text" : "Face-to-face communication"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The Agile Manifesto developed by the Agile Alliance covers 4 values and 12 principles. The four values are: 1) individuals and interactions  over  processes  and tools, 2) working software over comprehensive documentation, 3) customer collaboration over contract negotiation, and 4) responding to change over following a plan. The 12 principles are: 1) focusing on satisfying the customer, 2) welcoming change,      3)      delivering     working software frequently, 4) ensuring that business people and developers work together, 5) motivating the individuals involved in development, 6) using face-to-face communication whenever possible, 7) working software as the primary measure of progress, 8) maintaining a constant pace of development, 9) paying continuous attention to technical excellence and good design, 10) aiming for simplicity, 11) using  self-organizing  teams,  and 12) regularly reflecting on how to become more effective. [Manifesto for Agile Software Development. Agile Alliance.] [Communications]"
    },
    "question" : "A core agile philosophy is effective information sharing among team members. Which communication method ensures this and is an Agile Manifesto principle?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Terms and conditions"
    }, {
      "option" : "B",
      "text" : "Project charter"
    }, {
      "option" : "C",
      "text" : "Story  point estimation document"
    }, {
      "option" : "D",
      "text" : "Statement of work"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The project charter is an important governing document that requires all stakeholder participation. Although experts recommend it not be longer than a page in length, creating a project charter can be challenging, as all stakeholders must participate and come   to   a   consensus.   Three    key elements should be included in a project charter: vision, mission, and success criteria. Vision is the 'why' or rationale of a project. Mission is the 'what' of the project and describes what the team will accomplish to reach the vision. Success criteria are management metrics that define 'how' the project will be deemed successful. [Lean-Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Which of the following is a key agile artifact that requires all stakeholders come to a consensus?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Aiming for simplicity."
    }, {
      "option" : "B",
      "text" : "Defect reduction"
    }, {
      "option" : "C",
      "text" : "Test-driven development"
    }, {
      "option" : "D",
      "text" : "Removing waste"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The Agile Manifesto defines  12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment  and  support  they   need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress. 8) Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs  emerge  from  self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Removing waste"
    }, {
      "option" : "B",
      "text" : "Test-driven development"
    }, {
      "option" : "C",
      "text" : "Focus on product value"
    }, {
      "option" : "D",
      "text" : "Maintaining a constant pace of development."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The Agile Manifesto defines 12 supporting principles. Agile principles include 1) Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2) Welcome changing requirements, even late in development.  Agile  processes harness change for the customer's competitive advantage. 3) Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale. 4) Business people and developers must work together daily throughout the project. 5) Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6) The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. 7) Working software is the primary measure of progress.  8)  Agile  processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9) Continuous attention to technical excellence and good design enhances agility. 10) Simplicity--the art of maximizing the amount of work not done--is essential. 11) The best architectures, requirements, and designs emerge from self-organizing teams. 12) At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is an agile principle per the Agile Manifesto?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "that are consistent with your aspirations. "
    }, {
      "option" : "B",
      "text" : "that are consistent with your background, experience, skills, and qualifications "
    }, {
      "option" : "C",
      "text" : "that are consistent with your interests regardless of whether your background, experience, and skills qualify. "
    }, {
      "option" : "D",
      "text" : "that are beyond your capabilities but that  will allow you to grow as an organization"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The PMI Code of Ethics and Professional Conduct outlines the following aspirational standards based on the core value of responsibility: base your decisions and actions on the best interests of society, public safety, and the environment; accept only assignments that are consistent with your background, experience, skills, and qualifications; honestly disclose gaps or weaknesses in your experience, qualifications, or skills; fulfill the commitments that you undertake Ð do what you say you will do;    take    ownership    of    errors  or omissions and make corrections promptly; protect proprietary or confidential information that has been entrusted to you; uphold the PMI Code and hold others accountable to it. [PMI Code  of Ethics   and Professional Conduct. Project Management Institute.] [Knowledge and   Skills: Level 2]"
    },
    "question" : "According  to  the PMI Code, you should accept assignments"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That every e-mail and other written communication is shared with every stakeholder immediately"
    }, {
      "option" : "B",
      "text" : "That team members should expect no privacy in the work place"
    }, {
      "option" : "C",
      "text" : "Open and honest communication about successes and failures to all stakeholders"
    }, {
      "option" : "D",
      "text" : "A need-to-know information sharing policy where important information regarding project failures is only shared with key personnel"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Transparent communication upholds the virtue of being open and honest about the project's successes or failures. By sharing this information, the team members, and internal and external   stakeholders   can   focus  on delivering a high quality and high value product. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "As an  agile practitioner, Barry believes heavily in transparency. What does the principle of transparency mean with respect to communication?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That  it  has  been  specified in the product backlog."
    }, {
      "option" : "B",
      "text" : "That is has been specified in the work breakdown structure."
    }, {
      "option" : "C",
      "text" : "That is meets specific customer criteria."
    }, {
      "option" : "D",
      "text" : "That it clearly contributes to the development of a user story and is not vague."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The acronym SMART (specific, measurable, achievable, relevant, and timeboxed) helps the agile practitioner remember the characteristics of a well- defined task. S Ð Specific tasks are ones that clearly contribute to the development of a user story. It should not be vague. M Ð Measurable tasks are ones that the team and customer can  verify.  A  -  Achievable  tasks are ones that developers may realistically implement and understand. R - Relevant tasks are ones that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "If a task is said to have the characteristic of being specific, what does it indicate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That it would neither add to nor subtract value from the buyer's portfolio."
    }, {
      "option" : "B",
      "text" : "That it would add value to the buyer's portfolio."
    }, {
      "option" : "C",
      "text" : "That it would subtract value from the buyer's portfolio."
    }, {
      "option" : "D",
      "text" : "None of the above."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Net Present Value: A metric used to analyze the profitability of an investment or project. NPV is the difference  between  the  present value of cash inflows and the present value of cash outflows. NPV considers the likelihood of future cash inflows that an investment or project will yield. NPV is the sum of each cash inflow/outflow for the expected duration of the investment. Each cash inflow/outflow is discounted back  to its present value (PV) (i.e.,, what the money is worth in terms of today's value). NPV is the sum of all terms: NPV = Sum of [ Rt/(1 + i)^t ] where   t = the time of the cash flow, i = the discount rate (the rate of return that could be earned on in the financial markets), and Rt = the net cash inflow or outflow. For example, consider   the following two year period. The discount rate is 5% and the initial investment cost is $500. At the end of the first year, a $200 inflow is expected. At the end of the second year, a $1,000 is expected. NPV = - 500 + 200/(1.05)^1 + 1000/(1.05)^2  = ~$597. If NPV is positive, it indicates that the investment will add value to the buyer's portfolio. If NPV is negative, it will subtract value. If NPV is zero, it will neither add or subtract value. [Agile Estimating and Planning. Mike Cohn.] [Value based prioritization]"
    },
    "question" : "If the NPV of  an  investment  is above zero, what does that indicate   to the potential buyer?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The next few iterations"
    }, {
      "option" : "B",
      "text" : "Only the next iteration"
    }, {
      "option" : "C",
      "text" : "8 two-week iterations or 16 one-week iterations depending on the iteration cycle"
    }, {
      "option" : "D",
      "text" : "The previous iterations that had leftover user stories"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "When using a rolling wave or rolling look ahead plan for complex projects, agile teams plan for work in the next few iterations. A rolling wave or look ahead plan focuses on planning only work that is about to be accomplished, not work beyond this threshold with details that remain unclear because it is too far in the future. [Agile Estimating  and Planning. Mike Cohn.] [Planning, monitoring, and adapting]"
    },
    "question" : "In a rolling look ahead plan how many iterations are planned for at one time?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "A  website holding project documentation."
    }, {
      "option" : "B",
      "text" : "A  visual  representation  of  a project status metric."
    }, {
      "option" : "C",
      "text" : "An organizational chart with pictures of agile team members."
    }, {
      "option" : "D",
      "text" : "The world wide web."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "An information radiator is a visual representation of project status data.   [Agile   Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "What is an information radiator?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That project risk  is  not successfully being mitigated. "
    }, {
      "option" : "B",
      "text" : "That project risk is remaining static. "
    }, {
      "option" : "C",
      "text" : "That project risk is not an area of concern. "
    }, {
      "option" : "D",
      "text" : "That project risk  is successfully being mitigated."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A risk burndown chart is a risk management technique used to track project risk over time. It allows stakeholders to quickly review project risk management performance (e.g., increasing, decreasing, and by how much) over time. Severity (a product of impact and probability) is charted along the vertical axis with time on the horizontal axis. Impact typically takes a value from 0 to 5 in increasing order of risk and probability/likelihood typically takes a value from 0 to 5    in increasing order of probability. In this example, the worst severity a risk could have is 25 (5 x 5 = 25) and the least harmful severity a risk could  have is 0. The agile team and customer/product owner identifies its risks and assigns severity values in a risk register and tracks those values over time. Ideally, risk severity will decrease over time. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Vanessa is reviewing her team's risk burndown chart. She notices that the severity for all identified risks are continuing to grow in value. What does this mean briefly?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "3"
    }, {
      "option" : "B",
      "text" : "24"
    }, {
      "option" : "C",
      "text" : "72"
    }, {
      "option" : "D",
      "text" : "8"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Velocity is a measure of the number of user story points or stories completed by a team per iteration.  An agile team can use its previous  velocity recordings as a method of estimating how many user story points it may complete in the next iteration. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Jacob's agile team just finished building, testing, and releasing 24 user story points in its most recent 3 week iteration. What is the team's velocity?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That project risk  is successfully being mitigated. "
    }, {
      "option" : "B",
      "text" : "That project risk is   remaining static. "
    }, {
      "option" : "C",
      "text" : "That project risk is not an area of concern. "
    }, {
      "option" : "D",
      "text" : "That project risk  is  not successfully being mitigated."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A risk burndown chart is a risk management technique used to track project risk over time. It allows stakeholders to quickly review project risk management performance (e.g., increasing, decreasing, and by how much) over time. Severity (a product of impact and probability) is charted along the vertical axis with time on the horizontal axis. Impact typically takes a value from 0 to 5 in increasing order of risk and probability/likelihood typically takes a value from 0 to 5 in increasing order of probability. In this example, the worst severity a risk could have is 25 (5 x 5 = 25) and the least harmful severity a risk could  have is 0. The agile team and customer/product owner identifies its risks and assigns severity values in a risk register and tracks those values over time. Ideally, risk severity will decrease over time. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "Vanessa is reviewing her team's risk burndown chart. She notices that the severity for all identified risks are continuing to decrease in value. What does this mean briefly?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the product owner tests the customer during the definition of the product vision to ensure the business value is clearly stated."
    }, {
      "option" : "B",
      "text" : "That software developers test the customer during release planning to ensure user stories are properly outlined."
    }, {
      "option" : "C",
      "text" : "That software developers design and develop product software first and use extensive unit testing afterwards to ensure code meets acceptance criteria."
    }, {
      "option" : "D",
      "text" : "That software developers design and develop tests first before developing product software to ensure code meets acceptance criteria."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Test-driven development, or TDD, is an agile methodology that has software developers develop automated software tests before developing software that implements product features. This helps ensure quality as each bit of feature software is tested individually to remove bugs and improve performance before it is integrated with the final product. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Jack and his agile team want to incorporate test-driven development (TDD) into standard practice. Briefly, what does test-driven development mean?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the adopting organization emphasizes   the   negotiation   of contracts over individuals and interactions."
    }, {
      "option" : "B",
      "text" : "That the adopting organization emphasizes the perk of remote working."
    }, {
      "option" : "C",
      "text" : "That the adopting organization values strict, inflexible project management techniques."
    }, {
      "option" : "D",
      "text" : "That the adopting organization emphasizes collocation of project team members."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "When considering whether to apply new agile practices, several internal and external factors should  be considered. Internal factors include whether the project is developing new processes or products; whether the organization is collaborative and emphasizes trust, adaptability, collective ownership, and has minimal or informal project management processes; the size, location, and skills of the project team. External factors include the industry stability and customer engagement or involvement. Generally, agile is best suited to developing new processes or products for an organization that is  collaborative and emphasizes trust, adaptability, collective ownership, and has    minimal    project    management processes by an agile/project team that is relatively small in size,  is collocated, and is cross-functional in skill. Additionally, agile is known to succeed in industries that are quickly adapting to disruptive technologies as opposed to industries that are stable and perhaps inflexible to adaptive approaches. And, lastly,  the component of customer involvement and engagement cannot be stressed enough; the more participation, the better. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 3]"
    },
    "question" : "What is a positive indicator that agile may be appropriate to an organization as a new project methodology?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Assigning more work than can be accomplished in an iteration to set a sense of urgency"
    }, {
      "option" : "B",
      "text" : "Empowering the team"
    }, {
      "option" : "C",
      "text" : "Never pausing to reflect on performance until the end of    the project"
    }, {
      "option" : "D",
      "text" : "Making all decisions for the team"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Building a high-performance team is critical to any project's  success. A high performance team has the right team members,  is empowered, has built trust, works at a sustainable pace, has consistently high velocity/productivity, takes regular time for reflection to review work, has a team lead that removes any obstacles and provides mentoring and coaching, is self-organized and self-disciplined, and is collocated. Several management techniques can be used to build or foster a high-performance team environment, some techniques include: removing obstacles that slow down a team's    performance,    having    high expectations of team performance, and coaching and mentoring the team to achieve its best performance. [Coaching Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 2]"
    },
    "question" : "Becky, as project leader, intends on building a high-performance team. What is a practice or technique she can use to build a high performance team?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Helping  a person  or  team prioritize features in the backlog."
    }, {
      "option" : "B",
      "text" : "Helping a person or team come up with new ideas."
    }, {
      "option" : "C",
      "text" : "Helping a person or team achieve new goals by providing guidance and insight."
    }, {
      "option" : "D",
      "text" : "Helping a person or team communicate with one another."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Coaching and mentoring within teams can be helpful for nascent agile teams and even for more experienced agile teams. Coaching and mentoring is the act of helping a person or team improve performance and achieve realistic goals. [Coaching  Agile Teams. Lyssa Adkins.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Of the following, which is the best definition of coaching and mentoring?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the earned value exceeds the actual costs of the project."
    }, {
      "option" : "B",
      "text" : "That the planned costs of    theproject exceed the earned value."
    }, {
      "option" : "C",
      "text" : "That the expected value of the project exceeds the actual costs of the project."
    }, {
      "option" : "D",
      "text" : "That the actual costs incurred by the project exceed the earned value."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule Variance (SV), Cost Performance Index (CPI), and Schedule Performance Index  (SPI). CV and SV can be converted into performance indicators of CPI and  SPI,   respectively,   and   tracked   and charted to show progress over time. BAC is the total project budget. AC is the actual cost incurred to date. PV is the planned value of work at a given time in a project; you can calculate it by multiplying the BAC by the ratio of current week/scheduled weeks (e.g., 5 weeks into a 15 week $15,000   project = $5,000 PV). EV is value of work actually completed or earned (e.g., you have completed 50% of the project by week 5 of a 15 week $15,000 project = $7,500 EV). CV is the difference between what a project has earned to date and cost to date (i.e., CV = EV - AC). [Agile Estimating and Planning. Mike  Cohn.]  [Knowledge  and Skills: Level 3]"
    },
    "question" : "If  you have  a cost  variance  of negative $2,000 what does it imply?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "That the task is achievable."
    }, {
      "option" : "B",
      "text" : "That the task can be verified by the team and customer."
    }, {
      "option" : "C",
      "text" : "That the task is timeboxed."
    }, {
      "option" : "D",
      "text" : "That the task is specific."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "The acronym SMART (specific, measurable, achievable, relevant, and timeboxed) helps the agile practitioner remember the characteristics of a well-defined task.  S Ð Specific tasks are ones that clearly contribute to the development of a user story. It should not be vague. M Ð Measurable tasks are ones that the team and customer can verify. A - Achievable tasks are ones that developers may realistically  implement and understand. R - Relevant      tasks      are      ones    that unequivocally add value to the user story. T - Timeboxed tasks are ones that can have an estimate assigned of the amount of effort or time needed for development. [Agile Retrospectives: Making Good Teams Great. Esther Derby, Diana Larsen, Ken Schwaber.] [Planning, monitoring, and adapting]"
    },
    "question" : "If a task is said to have the characteristic of being measurable, what does it indicate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The 100% confidence estimate"
    }, {
      "option" : "B",
      "text" : "The difference between the 50% confidence estimate and the 10% confidence estimate"
    }, {
      "option" : "C",
      "text" : "The 60% confidence estimate"
    }, {
      "option" : "D",
      "text" : "The difference between the 90% confidence estimate and 50% confidence estimate"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The local safety is the difference between the 90% confidence estimate of task time and the 50% confidence estimate of task time. Remember that estimates for task time are typically a range of estimates and   not   a   single   value;   think    of estimates existing as a cumulative distribution function. A 50% confidence estimate is essentially an aggressive estimate where the estimator only has a 50% confidence that the task will be completed within the associated time value. A 90% confidence estimate is essentially a conservative estimate where the estimator has a 90% confidence that the task will be completed within the associated time value. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "Cody is trying to explain Mike Cohn's square root of the sum of squares method that is used to estimate a project buffer to his agile team. He decides to start with the definition of a local safety. What is a local safety?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Local emergency numbers"
    }, {
      "option" : "B",
      "text" : "A burndown chart"
    }, {
      "option" : "C",
      "text" : "The agile manifesto"
    }, {
      "option" : "D",
      "text" : "A project schedule"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "Typical  information radiators on an agile project include: project burndown charts, task boards, burnup charts, and defect charts. [Agile Software Development: The Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "Select the response that is a typical information radiator for an agile project."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The amount of defects identified to date in a release."
    }, {
      "option" : "B",
      "text" : "The amount of story points remaining to complete in an iteration."
    }, {
      "option" : "C",
      "text" : "The amount of remaining use stories to decompose in a release."
    }, {
      "option" : "D",
      "text" : "The  most  likely  amount   of story points that will be completed in a project."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A risk-based burnup chart tracks targeted and actual product delivery progress and also includes estimates of how likely the team is to achieve targeted value adjusted for risk. Typically, risk is shown as three different levels: best-case; most likely; and worst-case. For example, if you have  a  10  iteration  project  and    the team's current velocity is 10 story points, you can portray the chance of completing 100 story points (most likely case), the chance of completing 80 story points (worst-case), and the chance of completing 120 story points (best-case). In this way, the stakeholders get a feel for the range of risk. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "What is one piece of information a stakeholder can review using a risk- based burnup chart?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The amount of remaining use stories to decompose in a release."
    }, {
      "option" : "B",
      "text" : "The amount of story points remaining to complete in an iteration."
    }, {
      "option" : "C",
      "text" : "The amount of defects identified to date in a release."
    }, {
      "option" : "D",
      "text" : "The amount of story points that will be completed in a project in a best-case scenario."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "A risk-based burnup chart tracks targeted and actual product delivery progress and also includes estimates of how likely the team is to achieve   targeted   value   adjusted for risk. Typically, risk is shown as three different levels: best-case; most likely; and worst-case. For example, if you have a 10 iteration project and the team's current velocity is 10 story points, you can portray the chance of completing 100 story points (most likely case), the chance of completing 80 story points (worst-case), and the chance of completing 120 story points (best-case). In this way, the stakeholders get a feel for the range of risk. [The Art of Agile Development. James Shore.] [Risk management]"
    },
    "question" : "What is one piece of information a stakeholder can review using a risk- based burnup chart?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Emotional equivalence"
    }, {
      "option" : "B",
      "text" : "Emotional rigidity"
    }, {
      "option" : "C",
      "text" : "Emotional obsolescence"
    }, {
      "option" : "D",
      "text" : "Emotional intelligence"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Key  soft  skills   negotiation qualities for the effective implementation and practice of agile are: emotional intelligence, collaboration, adaptive leadership, negotiation, conflict resolution, servant leadership. [Coaching Agile Teams. Lyssa Adkins.] [Soft skills negotiation]"
    },
    "question" : "Which of the following is a key soft skill negotiation quality?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "the  best  interests of  society after first satisfying the customer."
    }, {
      "option" : "B",
      "text" : "the  best  interests of  the customer."
    }, {
      "option" : "C",
      "text" : "the best interests of the parent company's bottom line."
    }, {
      "option" : "D",
      "text" : "the best interests of society, public safety, and the environment."
    } ],
    "correct" : {
      "option" : "D",
      "text" : "The PMI Code of Ethics and Professional Conduct outlines the following aspirational standards based on the core value of responsibility: base your decisions and actions on the best interests of society, public safety, and   the   environment;   accept    only assignments that are consistent with your background, experience, skills, and qualifications; honestly disclose gaps or weaknesses in your experience, qualifications, or skills; fulfill the commitments that you undertake Ð do what you say you will do; take ownership of errors or omissions and make corrections promptly; protect proprietary or confidential information that has been entrusted to you; uphold the PMI Code and hold others accountable to it. [PMI Code  of Ethics   and Professional Conduct. Project Management Institute.] [Knowledge and   Skills: Level 2]"
    },
    "question" : "According to the PMI Code, decisions and actions should be based on"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The incremental development of software that is immediately integrated into the full code base."
    }, {
      "option" : "B",
      "text" : "The coding of new software directly within the production code base."
    }, {
      "option" : "C",
      "text" : "The incremental development of software that is extensively tested before integrating into the full code base, followed by  testing of the full code to ensure successful integration."
    }, {
      "option" : "D",
      "text" : "The coding of integration software for new product features."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Select the response that best defines the XP practice of continuous integration."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The integration of built and tested code with the production code base. Once the test code is integrated the entire product code base is tested."
    }, {
      "option" : "B",
      "text" : "The integration of new code with the production code base. One the code is integrated, the product may be released to the customer for feedback."
    }, {
      "option" : "C",
      "text" : "The coding of new software directly within the production code base."
    }, {
      "option" : "D",
      "text" : "The coding of integration software for new product  features."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The extreme programming (XP) principle of continuous integration is that code is integrated into the full code base as soon as it is built, tested, and completed. Once integrated, the code base and therefore the entire system is built and tested. Continuous integration is just one principle of XP that promotes rapid delivery of software and the early detection of integration defects. [The Art of Agile Development. James Shore.] [Product quality]"
    },
    "question" : "Kaitlin is providing an overview of the XP principle of continuous integration. Which response provides the best definition of continuous integration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The customers"
    }, {
      "option" : "B",
      "text" : "External stakeholders"
    }, {
      "option" : "C",
      "text" : "The project team members"
    }, {
      "option" : "D",
      "text" : "Internal stakeholders"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "The most correct answer is the project   team   members.   The project team members is the best answer because they will use the information radiator most during the course of the project and will typically be the first entities to know when a metric has been modified. [Agile Software Development:  The  Cooperative Game Ð 2nd Edition. Alistair Cockburn.] [Communications]"
    },
    "question" : "On an agile project, who is responsible for updating the content of an information radiator?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The daily sprint meeting"
    }, {
      "option" : "B",
      "text" : "The daily iteration meeting"
    }, {
      "option" : "C",
      "text" : "The daily sprint meeting"
    }, {
      "option" : "D",
      "text" : "The daily stand-up meeting"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders.  To  promote  knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "From   the   following,   select    a technique that  promotes  agile 'knowledge sharing.'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "1st"
    }, {
      "option" : "B",
      "text" : "2nd"
    }, {
      "option" : "C",
      "text" : "4th"
    }, {
      "option" : "D",
      "text" : "3rd"
    } ],
    "correct" : {
      "option" : "D",
      "text" : "Acceptance Test Driven Development (ATDD) is similar to Test-driven development (TDD)  in that it requires programmers to create tests first before any product code. The tests in ATDD are aimed at confirming features/behaviors that the intended software will have. The iterative  cycle of ATDD with its four steps can be remembered as the four Ds: 1) Discuss, 2) Distill, 3) Develop, and 4) Demo. 1) Discuss: The agile team and customer or business stakeholder discuss a user story in detail. Talking about the expected behaviors the user story should have and what it should not. 2) The development team takes those items learned from the  discussion and distills them into tests that will verify and validate those behaviors. The distillation process is where the entire team should have a good understanding of what 'done' (or completed) means for a user story. That  is,  what  the  acceptance criteria are. 3) After distillation, the team develops the test code and product code to implement the product features. 4) Once the product features have been developed, the team demonstrates them to the customer or business stakeholders for feedback. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Product quality]"
    },
    "question" : "Jane and her team are developing code to  implement unit  tests and product code for a user story. This is after the team had distilled information into specific tests to confirm expected behavior of the product. What step is Jane on in the ATDD four step process?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The decomposition of user stories into tasks that are in turn prioritized by value."
    }, {
      "option" : "B",
      "text" : "The decomposition of iterations into intervals that are in turn prioritized by value."
    }, {
      "option" : "C",
      "text" : "The  decomposition  of release plans into intervals that are in  turn prioritized by value."
    }, {
      "option" : "D",
      "text" : "The decomposition of story points into intervals that are in turn prioritized by value."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In iteration planning, an agile team, collaboratively with the customer, chooses user stories to include for development. Although the user stories are prioritized in the product backlog  initially  during release planning, an agile team and customer should review prioritization based on progressive elaboration (i.e., gained knowledge and perspective). Prioritization is often based on value and risk and can be performed using the MoSCoW or Kano method and through the use of risk-to-value and cost-to-value matrices. An agile team performs decomposition to subdivide user stories into more  manageable tasks so that it may estimate task time. Tasks for an iteration may also be prioritized based on value, similar to how user stories are prioritized. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of  value-based decomposition?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "CPI = BAC / EV"
    }, {
      "option" : "B",
      "text" : "CPI = EV / AC"
    }, {
      "option" : "C",
      "text" : "CPI = BAC / PV"
    }, {
      "option" : "D",
      "text" : "CPI = AC / EV"
    } ],
    "correct" : {
      "option" : "B",
      "text" : "EVM or earned value management is a management technique used to evaluate project performance with respect to cost and schedule. EVM relies on other common financial metrics like Budget At Completion (BAC), Actual Cost (AC), Planned Value (PV), Earned Value (EV), Cost Variance (CV), Schedule      Variance      (SV),     Cost Performance Index (CPI), and Schedule Performance Index  (SPI). CPI is a ratio that expresses cost performance. CPI = EV/AC. If CPI > 1, the project is earning more than spending; and if CPI <1, the project is spending more than it is  earning. [Agile Estimating and Planning. Mike Cohn.] [Metrics]"
    },
    "question" : "EVM is a frequently used project management abbreviation. How is CPI calculated?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The customer prioritized value of developing a user story."
    }, {
      "option" : "B",
      "text" : "The complexity, cost, radiance, and dependency  ofdeveloping a user story."
    }, {
      "option" : "C",
      "text" : "The complexity, effort, risk, and dependencies of developing a user story."
    }, {
      "option" : "D",
      "text" : "The ease, value, required quality, and cost of developing a user story."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Story points represent the relative work effort it takes to develop a user story. Each point represents a fixed value of development effort. When estimating the agile team must consider  complexity,  effort,  risk, and inter-dependencies. [Agile Estimating and Planning. Mike Cohn.] [Agile estimation]"
    },
    "question" : "What  should  an  agile team consider when estimating story points?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The establishment of the proper requirements, acceptance criteria, and priorities"
    }, {
      "option" : "B",
      "text" : "The establishment of iteration team members"
    }, {
      "option" : "C",
      "text" : "The establishment of product value risk assessment criteria"
    }, {
      "option" : "D",
      "text" : "The establishment of daily stand-up meeting acceptance criteria"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "In release planning, the agile project manager discusses the product vision with the development team in detail. This ensures that the proper requirements, acceptance criteria, and priorities are established. [The Art of Agile Development. James Shore.] [Planning, monitoring, and adapting]"
    },
    "question" : "What does sharing and discussing the product vision in detail during release planning help ensure?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The tightly controlled flow of information among top ranking team members."
    }, {
      "option" : "B",
      "text" : "The conveyance of data between refactored code modules."
    }, {
      "option" : "C",
      "text" : "Keeping all team members andstakeholders informed by the equitable sharing of important project information."
    }, {
      "option" : "D",
      "text" : "The heavily controlled conveyance of information to  only certain team members."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In agile, effective 'knowledge sharing' is a critical factor for success. It involves the near real time communication of key information among all team members and stakeholders. To promote knowledge sharing, agile uses standard practices built into its process, such as using generalized specialists/cross functional teams, self-organizing and self- disciplined teams, collocation, daily stand-up meetings, iteration/sprint planning, release planning, pair programming and pair rotation, project retrospectives/reflection, and on-site customer support. And, of course, the sixth principle of Agile is ' The most efficient and effective method of conveying information to and within  a development team is face-to-face conversation.' In this sense, Agile prefers and encourages collocation for all stakeholders and team members for the simple fact that face-to-face conversation is the best method of communication and, in turn, effective knowledge sharing. [Becoming  Agile: ...in an imperfect world. Greg Smith, Ahmed Sidky.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Joyce, as a certified agile practitioner, believes in the value of 'knowledge sharing.' Which of the following is the best definition of 'knowledge sharing?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Team member management"
    }, {
      "option" : "B",
      "text" : "Agile management"
    }, {
      "option" : "C",
      "text" : "Stakeholder management"
    }, {
      "option" : "D",
      "text" : "Schedule management"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "Stakeholder management is a growing topic area within strategic management that brings awareness to the       importance       of      managing stakeholders (i.e., facilitating active participation of stakeholders and fostering a strong collaborative environment) for a project's success. Stakeholder management is typically defined in the context of guiding principles and values. R. E. Freeman's 'Managing for Stakeholders' includes 10 principles: 1) Stakeholder interests need to go together over time. 2) We need a philosophy of volunteerism Ð to engage stakeholders and manage relationships ourselves rather than leave it to government. 3) We need to find solutions to issues that satisfy multiple  stakeholders  simultaneously. 4)   Everything   that   we   do    serves stakeholders. We never trade off the interests of one versus the other continuously over time. 5) We act with purpose that fulfills our commitment  to stakeholders. We act with aspiration towards fulfilling our dreams and theirs. 6) We need intensive communication and dialogue with stakeholders Ð not just those who are friendly. 7) Stakeholders consist of  real people with names and faces and children. They are complex. 8) We need to generalize the marketing approach. 9) We engage with both primary  and  secondary  stakeholders. 10) We constantly monitor and redesign processes to make them better serve our stakeholders. Because stakeholder involvement is critical for the success of a project, where projects without active participation from stakeholders are prone to failure, stakeholder management should be a topic that every agile team knows well. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "What topic area within strategic management deals with fostering a welcoming environment where stakeholders actively participate?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The immediate delivery of a working product to a customer for customer unit testing."
    }, {
      "option" : "B",
      "text" : "The semi-annual delivery of a working product to a customer for continuous feedback and acceptance."
    }, {
      "option" : "C",
      "text" : "The frequent delivery of a working product to a customer for continuous feedback and acceptance."
    }, {
      "option" : "D",
      "text" : "The occasional delivery of a working product, which improves steadily,  over non-standard periods of time."
    } ],
    "correct" : {
      "option" : "C",
      "text" : "A cornerstone of Agile development is 'incremental delivery.' Incremental delivery is the frequent delivery of working products, which are    successively    improved,    to    a customer for immediate feedback and acceptance. Typically, a product is delivered at the end of each sprint or iteration for demonstration and feedback. In this feedback technique, a customer can review the product and provide updated requirements. Changed/updated/refined requirements are welcomed in the agile process to ensure the customer receives a valuable and quality product. A sprint or iteration typically lasts from two to four weeks and at the end a new and improved product is delivered, incrementally. [The Art of Agile Development. James Shore.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is the best definition of 'incremental delivery?'"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "The inventory of material that is awaiting initial processing. "
    }, {
      "option" : "B",
      "text" : "Material that is currently in production or development but has not yet been completed. "
    }, {
      "option" : "C",
      "text" : "The  production  work  that  is required to process material into finished products. "
    }, {
      "option" : "D",
      "text" : "The backlog of features held in the product backlog."
    } ],
    "correct" : {
      "option" : "B",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is also referred to as work in process (WIP). WIP is material or parts that have started production but are not yet a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain. One way of reducing inventory is to reduce the WIP at individual machines or servers by only moving as fast  as your slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that can develop a certain amount of features. In this analogy, the WIP limit is equivalent to the sprint backlog. By maintaining a WIP limit equal to the sprint backlog, no features should be incomplete at the sprint review. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Select the response that holds the best definition of work in process (WIP)."
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Kanban board"
    }, {
      "option" : "B",
      "text" : "The iteration backlog"
    }, {
      "option" : "C",
      "text" : "The product backlog"
    }, {
      "option" : "D",
      "text" : "The sprint backlog"
    } ],
    "correct" : {
      "option" : "C",
      "text" : "In an agile project, the product backlog typically holds all the user stories to be developed. [User Stories Applied: For Agile Software Development. Mike Cohn.] [Agile analysis and design]"
    },
    "question" : "Where do all user stories typically reside in an agile project?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "No more than five."
    }, {
      "option" : "B",
      "text" : "No more than two."
    }, {
      "option" : "C",
      "text" : "No more than one."
    }, {
      "option" : "D",
      "text" : "No more than 10."
    } ],
    "correct" : {
      "option" : "A",
      "text" : "A lean manufacturing philosophy is to eliminate waste. One defined waste type in the lean philosophy is inventory, which is also referred to as work in process (WIP). WIP is material or parts that have started  production  but  are  not  yet  a finished or 'done' product. Inventory is considered wasteful because it costs money to purchase, store, and maintain. One way of reducing inventory is to reduce the WIP at individual machines or servers by only moving as fast as your slowest machine or processor (the system bottleneck). Agile also strives to control its WIP through WIP limits by completing all features to a 'done' state before beginning development of new features. One can think of an iteration or sprint as a process that can develop a certain amount of features. In this analogy, the WIP limit is equivalent  to  the  sprint  backlog.  By maintaining a WIP limit equal to the sprint backlog, no features should be incomplete at the sprint review. [Lean- Agile Software Development: Achieving Enterprise Agility. Alan Shalloway, Guy Beaver, James R. Trott.] [Planning, monitoring, and adapting]"
    },
    "question" : "Ken's agile team has set a feature WIP limit of five. How many features may the team be simultaneously building during the iteration?"
  }, {
    "answers" : [ {
      "option" : "A",
      "text" : "Customers must collaborate with the agile team to provide feedback"
    }, {
      "option" : "B",
      "text" : "Contracts need to be negotiated and plans followed"
    }, {
      "option" : "C",
      "text" : "Appropriate processes and tools aid the development process"
    }, {
      "option" : "D",
      "text" : "Documentation supports working software and appropriate processes and tools aid the development process"
    } ],
    "correct" : {
      "option" : "A",
      "text" : "The agile secondary values include: documentation of software, processes and tools, contract negotiation, and following project plans. [Manifesto for Agile Software Development. Agile Alliance.] [Knowledge and Skills: Level 1]"
    },
    "question" : "Which of the following is NOT a secondary agile value per the Agile Manifesto?"
  } ],
  "sections" : {
    "contact" : {
      "content" : "Thank you for using our tool and good luck in your exam preparation. If you find any question with a wrong answer, send us the question id for review. You can find the id of the question at the end of the correct answer.",
      "icon" : "mail",
      "order" : 2,
      "title" : "Contact"
    }
  }
}
